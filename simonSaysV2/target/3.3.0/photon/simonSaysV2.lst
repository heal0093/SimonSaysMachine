
/Users/parttimeidiot/EE1301/SimonSaysV2/simonSaysV2/target/3.3.0/photon/simonSaysV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000018b4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a18d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a18d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000484  20000088  20000088  00030088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a195c  080a195c  0002195c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1984  080a1984  00021984  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00092aaa  00000000  00000000  00021988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000d918  00000000  00000000  000b4432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00011f2e  00000000  00000000  000c1d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ae8  00000000  00000000  000d3c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003a88  00000000  00000000  000d5760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000247ec  00000000  00000000  000d91e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002509b  00000000  00000000  000fd9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000afd2e  00000000  00000000  00122a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000041ac  00000000  00000000  001d27a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f9cd 	bl	80a13cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f9d5 	bl	80a13e8 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a18d4 	.word	0x080a18d4
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	20000509 	.word	0x20000509
 80a0058:	20000509 	.word	0x20000509

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f86b 	bl	80a1138 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a18a8 	.word	0x080a18a8
 80a0080:	080a18c4 	.word	0x080a18c4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f863 	bl	80a0154 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 b809 	b.w	80a10a8 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bc8d 	b.w	80a09b4 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 bc93 	b.w	80a09c4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
int prevRed = LOW;		 // red
bool LED_stateR = FALSE; // red

// setup() runs once, when the device is first turned on.
void setup()
{
 80a00b0:	b510      	push	{r4, lr}
	// Put initialization like pinMode and begin functions here.
	pinMode(ledB, OUTPUT);
 80a00b2:	4c20      	ldr	r4, [pc, #128]	; (80a0134 <setup+0x84>)
 80a00b4:	2101      	movs	r1, #1
 80a00b6:	8820      	ldrh	r0, [r4, #0]
 80a00b8:	f001 f8ba 	bl	80a1230 <pinMode>
	digitalWrite(ledB, LOW);
 80a00bc:	8820      	ldrh	r0, [r4, #0]
	pinMode(ledG, OUTPUT);
 80a00be:	4c1e      	ldr	r4, [pc, #120]	; (80a0138 <setup+0x88>)
	digitalWrite(ledB, LOW);
 80a00c0:	2100      	movs	r1, #0
 80a00c2:	f001 f8c6 	bl	80a1252 <digitalWrite>
	pinMode(ledG, OUTPUT);
 80a00c6:	8820      	ldrh	r0, [r4, #0]
 80a00c8:	2101      	movs	r1, #1
 80a00ca:	f001 f8b1 	bl	80a1230 <pinMode>
	digitalWrite(ledG, LOW);
 80a00ce:	8820      	ldrh	r0, [r4, #0]
	pinMode(ledY, OUTPUT);
 80a00d0:	4c1a      	ldr	r4, [pc, #104]	; (80a013c <setup+0x8c>)
	digitalWrite(ledG, LOW);
 80a00d2:	2100      	movs	r1, #0
 80a00d4:	f001 f8bd 	bl	80a1252 <digitalWrite>
	pinMode(ledY, OUTPUT);
 80a00d8:	8820      	ldrh	r0, [r4, #0]
 80a00da:	2101      	movs	r1, #1
 80a00dc:	f001 f8a8 	bl	80a1230 <pinMode>
	digitalWrite(ledY, LOW);
 80a00e0:	8820      	ldrh	r0, [r4, #0]
	pinMode(ledR, OUTPUT);
 80a00e2:	4c17      	ldr	r4, [pc, #92]	; (80a0140 <setup+0x90>)
	digitalWrite(ledY, LOW);
 80a00e4:	2100      	movs	r1, #0
 80a00e6:	f001 f8b4 	bl	80a1252 <digitalWrite>
	pinMode(ledR, OUTPUT);
 80a00ea:	8820      	ldrh	r0, [r4, #0]
 80a00ec:	2101      	movs	r1, #1
 80a00ee:	f001 f89f 	bl	80a1230 <pinMode>
	digitalWrite(ledR, LOW);
 80a00f2:	8820      	ldrh	r0, [r4, #0]
 80a00f4:	2100      	movs	r1, #0
 80a00f6:	f001 f8ac 	bl	80a1252 <digitalWrite>

	// timeToToggleLED = millis() + 1000;
	pinMode(buttonB, INPUT_PULLDOWN);
 80a00fa:	4b12      	ldr	r3, [pc, #72]	; (80a0144 <setup+0x94>)
 80a00fc:	2103      	movs	r1, #3
 80a00fe:	8818      	ldrh	r0, [r3, #0]
 80a0100:	f001 f896 	bl	80a1230 <pinMode>
	pinMode(buttonG, INPUT_PULLDOWN); // INPUT mode with internal pull-down resistor
 80a0104:	4b10      	ldr	r3, [pc, #64]	; (80a0148 <setup+0x98>)
 80a0106:	2103      	movs	r1, #3
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f001 f891 	bl	80a1230 <pinMode>
	pinMode(buttonY, INPUT_PULLDOWN);
 80a010e:	4b0f      	ldr	r3, [pc, #60]	; (80a014c <setup+0x9c>)
 80a0110:	2103      	movs	r1, #3
 80a0112:	8818      	ldrh	r0, [r3, #0]
 80a0114:	f001 f88c 	bl	80a1230 <pinMode>
	pinMode(buttonR, INPUT_PULLDOWN);
 80a0118:	4b0d      	ldr	r3, [pc, #52]	; (80a0150 <setup+0xa0>)
 80a011a:	2103      	movs	r1, #3
 80a011c:	8818      	ldrh	r0, [r3, #0]
 80a011e:	f001 f887 	bl	80a1230 <pinMode>
	Serial.begin(9600);
 80a0122:	f000 fecd 	bl	80a0ec0 <_Z16_fetch_usbserialv>
}
 80a0126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Serial.begin(9600);
 80a012a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a012e:	f000 bead 	b.w	80a0e8c <_ZN9USBSerial5beginEl>
 80a0132:	bf00      	nop
 80a0134:	2000000c 	.word	0x2000000c
 80a0138:	20000010 	.word	0x20000010
 80a013c:	20000018 	.word	0x20000018
 80a0140:	20000014 	.word	0x20000014
 80a0144:	2000008c 	.word	0x2000008c
 80a0148:	20000000 	.word	0x20000000
 80a014c:	20000008 	.word	0x20000008
 80a0150:	20000004 	.word	0x20000004

080a0154 <loop>:
unsigned long int timeToToggleLED;
bool startGame = FALSE;

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a0154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0158:	f000 faae 	bl	80a06b8 <HAL_Timer_Get_Milli_Seconds>
	// The core of your code will likely live here.

	unsigned long int currentTime = millis();
	int change = 1000;
	int curB = digitalRead(buttonB);
 80a015c:	4bbd      	ldr	r3, [pc, #756]	; (80a0454 <loop+0x300>)
 80a015e:	4680      	mov	r8, r0
 80a0160:	8818      	ldrh	r0, [r3, #0]
 80a0162:	f001 f88f 	bl	80a1284 <digitalRead>

	if (startGame == FALSE)
 80a0166:	4fbc      	ldr	r7, [pc, #752]	; (80a0458 <loop+0x304>)
	int curB = digitalRead(buttonB);
 80a0168:	4605      	mov	r5, r0
	if (startGame == FALSE)
 80a016a:	783b      	ldrb	r3, [r7, #0]
 80a016c:	4ebb      	ldr	r6, [pc, #748]	; (80a045c <loop+0x308>)
 80a016e:	2b00      	cmp	r3, #0
 80a0170:	f040 80b5 	bne.w	80a02de <loop+0x18a>
	{ // the idle light sequence while a game is not being played.
		if (currentTime > timeToToggleLED)
 80a0174:	4cba      	ldr	r4, [pc, #744]	; (80a0460 <loop+0x30c>)
 80a0176:	6823      	ldr	r3, [r4, #0]
 80a0178:	4543      	cmp	r3, r8
 80a017a:	d227      	bcs.n	80a01cc <loop+0x78>
		{
			// Time to Toggle!
			LED_stateB = !LED_stateB;
 80a017c:	4bb9      	ldr	r3, [pc, #740]	; (80a0464 <loop+0x310>)
 80a017e:	7819      	ldrb	r1, [r3, #0]
 80a0180:	f081 0101 	eor.w	r1, r1, #1
 80a0184:	7019      	strb	r1, [r3, #0]
			digitalWrite(ledB, LED_stateB);
 80a0186:	4bb8      	ldr	r3, [pc, #736]	; (80a0468 <loop+0x314>)
 80a0188:	8818      	ldrh	r0, [r3, #0]
 80a018a:	f001 f862 	bl	80a1252 <digitalWrite>
			LED_stateG = !LED_stateG;
 80a018e:	4bb7      	ldr	r3, [pc, #732]	; (80a046c <loop+0x318>)
 80a0190:	7819      	ldrb	r1, [r3, #0]
 80a0192:	f081 0101 	eor.w	r1, r1, #1
 80a0196:	7019      	strb	r1, [r3, #0]
			digitalWrite(ledG, LED_stateG);
 80a0198:	4bb5      	ldr	r3, [pc, #724]	; (80a0470 <loop+0x31c>)
 80a019a:	8818      	ldrh	r0, [r3, #0]
 80a019c:	f001 f859 	bl	80a1252 <digitalWrite>
			LED_stateY = !LED_stateY;
 80a01a0:	4bb4      	ldr	r3, [pc, #720]	; (80a0474 <loop+0x320>)
 80a01a2:	7819      	ldrb	r1, [r3, #0]
 80a01a4:	f081 0101 	eor.w	r1, r1, #1
 80a01a8:	7019      	strb	r1, [r3, #0]
			digitalWrite(ledY, LED_stateY);
 80a01aa:	4bb3      	ldr	r3, [pc, #716]	; (80a0478 <loop+0x324>)
 80a01ac:	8818      	ldrh	r0, [r3, #0]
 80a01ae:	f001 f850 	bl	80a1252 <digitalWrite>
			LED_stateR = !LED_stateR;
 80a01b2:	4bb2      	ldr	r3, [pc, #712]	; (80a047c <loop+0x328>)
 80a01b4:	7819      	ldrb	r1, [r3, #0]
 80a01b6:	f081 0101 	eor.w	r1, r1, #1
 80a01ba:	7019      	strb	r1, [r3, #0]
			digitalWrite(ledR, LED_stateR);
 80a01bc:	4bb0      	ldr	r3, [pc, #704]	; (80a0480 <loop+0x32c>)
 80a01be:	8818      	ldrh	r0, [r3, #0]
 80a01c0:	f001 f847 	bl	80a1252 <digitalWrite>

			// Calculate and store the next time to toggle the LED
			timeToToggleLED += change;
 80a01c4:	6823      	ldr	r3, [r4, #0]
 80a01c6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80a01ca:	6023      	str	r3, [r4, #0]
		}
		if (curB == HIGH && prevBlue == LOW)
 80a01cc:	2d01      	cmp	r5, #1
 80a01ce:	d16a      	bne.n	80a02a6 <loop+0x152>
 80a01d0:	6834      	ldr	r4, [r6, #0]
 80a01d2:	2c00      	cmp	r4, #0
 80a01d4:	d167      	bne.n	80a02a6 <loop+0x152>
		{
			// a transition happened -- the user has just pressed the button
			Serial.println("Blue button press detected. Start the game!"); // Debugging printout
 80a01d6:	f000 fe73 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a01da:	49aa      	ldr	r1, [pc, #680]	; (80a0484 <loop+0x330>)
 80a01dc:	f000 fd5b 	bl	80a0c96 <_ZN5Print7printlnEPKc>
			startGame = !startGame;
 80a01e0:	783b      	ldrb	r3, [r7, #0]
			prevBlue = curB;

			digitalWrite(ledB, LOW); // signals the start of the game, watch LEDS
 80a01e2:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80a0468 <loop+0x314>
			startGame = !startGame;
 80a01e6:	f083 0301 	eor.w	r3, r3, #1
			digitalWrite(ledG, HIGH);
 80a01ea:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80a0470 <loop+0x31c>
			startGame = !startGame;
 80a01ee:	703b      	strb	r3, [r7, #0]
			digitalWrite(ledB, LOW); // signals the start of the game, watch LEDS
 80a01f0:	4621      	mov	r1, r4
			digitalWrite(ledY, LOW);
 80a01f2:	4fa1      	ldr	r7, [pc, #644]	; (80a0478 <loop+0x324>)
			digitalWrite(ledB, LOW); // signals the start of the game, watch LEDS
 80a01f4:	f8b9 0000 	ldrh.w	r0, [r9]
			prevBlue = curB;
 80a01f8:	6035      	str	r5, [r6, #0]
			digitalWrite(ledR, LOW);
 80a01fa:	4ea1      	ldr	r6, [pc, #644]	; (80a0480 <loop+0x32c>)
			digitalWrite(ledB, LOW); // signals the start of the game, watch LEDS
 80a01fc:	f001 f829 	bl	80a1252 <digitalWrite>
			digitalWrite(ledG, HIGH);
 80a0200:	4629      	mov	r1, r5
 80a0202:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0206:	f001 f824 	bl	80a1252 <digitalWrite>
			digitalWrite(ledY, LOW);
 80a020a:	4621      	mov	r1, r4
 80a020c:	8838      	ldrh	r0, [r7, #0]
 80a020e:	f001 f820 	bl	80a1252 <digitalWrite>
			digitalWrite(ledR, LOW);
 80a0212:	4621      	mov	r1, r4
 80a0214:	8830      	ldrh	r0, [r6, #0]
 80a0216:	f001 f81c 	bl	80a1252 <digitalWrite>
			delay(1000);
 80a021a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a021e:	f000 fbe9 	bl	80a09f4 <delay>
			digitalWrite(ledB, LOW);
 80a0222:	4621      	mov	r1, r4
 80a0224:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0228:	f001 f813 	bl	80a1252 <digitalWrite>
			digitalWrite(ledG, LOW);
 80a022c:	4621      	mov	r1, r4
 80a022e:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0232:	f001 f80e 	bl	80a1252 <digitalWrite>
			digitalWrite(ledY, HIGH);
 80a0236:	4629      	mov	r1, r5
 80a0238:	8838      	ldrh	r0, [r7, #0]
 80a023a:	f001 f80a 	bl	80a1252 <digitalWrite>
			digitalWrite(ledR, LOW);
 80a023e:	4621      	mov	r1, r4
 80a0240:	8830      	ldrh	r0, [r6, #0]
 80a0242:	f001 f806 	bl	80a1252 <digitalWrite>
			delay(1000);
 80a0246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a024a:	f000 fbd3 	bl	80a09f4 <delay>
			digitalWrite(ledB, LOW);
 80a024e:	4621      	mov	r1, r4
 80a0250:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0254:	f000 fffd 	bl	80a1252 <digitalWrite>
			digitalWrite(ledG, LOW);
 80a0258:	4621      	mov	r1, r4
 80a025a:	f8b8 0000 	ldrh.w	r0, [r8]
 80a025e:	f000 fff8 	bl	80a1252 <digitalWrite>
			digitalWrite(ledY, LOW);
 80a0262:	4621      	mov	r1, r4
 80a0264:	8838      	ldrh	r0, [r7, #0]
 80a0266:	f000 fff4 	bl	80a1252 <digitalWrite>
			digitalWrite(ledR, HIGH);
 80a026a:	4629      	mov	r1, r5
 80a026c:	8830      	ldrh	r0, [r6, #0]
 80a026e:	f000 fff0 	bl	80a1252 <digitalWrite>
			delay(1000);
 80a0272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0276:	f000 fbbd 	bl	80a09f4 <delay>
			digitalWrite(ledB, LOW);
 80a027a:	4621      	mov	r1, r4
 80a027c:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0280:	f000 ffe7 	bl	80a1252 <digitalWrite>
			digitalWrite(ledG, HIGH);
 80a0284:	4629      	mov	r1, r5
 80a0286:	f8b8 0000 	ldrh.w	r0, [r8]
 80a028a:	f000 ffe2 	bl	80a1252 <digitalWrite>
			digitalWrite(ledY, HIGH);
 80a028e:	4629      	mov	r1, r5
 80a0290:	8838      	ldrh	r0, [r7, #0]
 80a0292:	f000 ffde 	bl	80a1252 <digitalWrite>
			digitalWrite(ledR, HIGH);
 80a0296:	8830      	ldrh	r0, [r6, #0]
 80a0298:	4629      	mov	r1, r5
 80a029a:	f000 ffda 	bl	80a1252 <digitalWrite>
			delay(1000);
 80a029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02a2:	f000 fba7 	bl	80a09f4 <delay>
		prevGreen = curG;
		prevYellow = curY;
		prevRed = curR;
	}

	curB = digitalRead(buttonB);
 80a02a6:	4b6b      	ldr	r3, [pc, #428]	; (80a0454 <loop+0x300>)
 80a02a8:	4d6c      	ldr	r5, [pc, #432]	; (80a045c <loop+0x308>)
 80a02aa:	8818      	ldrh	r0, [r3, #0]
 80a02ac:	f000 ffea 	bl	80a1284 <digitalRead>
	if (curB == HIGH && prevBlue == LOW) // Push the blue button to switch to idle mode
 80a02b0:	2801      	cmp	r0, #1
	curB = digitalRead(buttonB);
 80a02b2:	4604      	mov	r4, r0
	if (curB == HIGH && prevBlue == LOW) // Push the blue button to switch to idle mode
 80a02b4:	d10b      	bne.n	80a02ce <loop+0x17a>
 80a02b6:	682b      	ldr	r3, [r5, #0]
 80a02b8:	b94b      	cbnz	r3, 80a02ce <loop+0x17a>
	{
		// a transition happened -- the user has just pressed the blue button
		Serial.println("Blue button press detected. Enter idle mode"); // Debugging printout
 80a02ba:	f000 fe01 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a02be:	4972      	ldr	r1, [pc, #456]	; (80a0488 <loop+0x334>)
 80a02c0:	f000 fce9 	bl	80a0c96 <_ZN5Print7printlnEPKc>
		startGame = !startGame;
 80a02c4:	4a64      	ldr	r2, [pc, #400]	; (80a0458 <loop+0x304>)
 80a02c6:	7813      	ldrb	r3, [r2, #0]
 80a02c8:	f083 0301 	eor.w	r3, r3, #1
 80a02cc:	7013      	strb	r3, [r2, #0]
	}

	delay(1000);
 80a02ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02d2:	f000 fb8f 	bl	80a09f4 <delay>
	prevBlue = curB;
 80a02d6:	602c      	str	r4, [r5, #0]
 80a02d8:	b003      	add	sp, #12
 80a02da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prevBlue = FALSE;				 // to make sure that the if statement directs here when it initially enters this part of the if statement
 80a02de:	2700      	movs	r7, #0
		int curG = digitalRead(buttonG); // reading button inputs
 80a02e0:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 80a048c <loop+0x338>
		prevBlue = FALSE;				 // to make sure that the if statement directs here when it initially enters this part of the if statement
 80a02e4:	6037      	str	r7, [r6, #0]
		int curG = digitalRead(buttonG); // reading button inputs
 80a02e6:	f8ba 0000 	ldrh.w	r0, [sl]
 80a02ea:	f000 ffcb 	bl	80a1284 <digitalRead>
		int curY = digitalRead(buttonY);
 80a02ee:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80a0490 <loop+0x33c>
		int curG = digitalRead(buttonG); // reading button inputs
 80a02f2:	4606      	mov	r6, r0
		int curY = digitalRead(buttonY);
 80a02f4:	f8b9 0000 	ldrh.w	r0, [r9]
 80a02f8:	f000 ffc4 	bl	80a1284 <digitalRead>
		int curR = digitalRead(buttonR);
 80a02fc:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80a0494 <loop+0x340>
		int curY = digitalRead(buttonY);
 80a0300:	4605      	mov	r5, r0
		int curR = digitalRead(buttonR);
 80a0302:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0306:	f000 ffbd 	bl	80a1284 <digitalRead>
		digitalWrite(ledB, LOW); // keeps all LEDs off for the game to work
 80a030a:	f8df b15c 	ldr.w	fp, [pc, #348]	; 80a0468 <loop+0x314>
 80a030e:	4639      	mov	r1, r7
		int curR = digitalRead(buttonR);
 80a0310:	4604      	mov	r4, r0
		digitalWrite(ledB, LOW); // keeps all LEDs off for the game to work
 80a0312:	f8bb 0000 	ldrh.w	r0, [fp]
 80a0316:	f000 ff9c 	bl	80a1252 <digitalWrite>
		digitalWrite(ledG, LOW);
 80a031a:	4a55      	ldr	r2, [pc, #340]	; (80a0470 <loop+0x31c>)
 80a031c:	4639      	mov	r1, r7
 80a031e:	8810      	ldrh	r0, [r2, #0]
 80a0320:	f000 ff97 	bl	80a1252 <digitalWrite>
		digitalWrite(ledY, LOW);
 80a0324:	4b54      	ldr	r3, [pc, #336]	; (80a0478 <loop+0x324>)
 80a0326:	4639      	mov	r1, r7
 80a0328:	8818      	ldrh	r0, [r3, #0]
 80a032a:	f000 ff92 	bl	80a1252 <digitalWrite>
		digitalWrite(ledR, LOW);
 80a032e:	4b54      	ldr	r3, [pc, #336]	; (80a0480 <loop+0x32c>)
 80a0330:	4639      	mov	r1, r7
 80a0332:	8818      	ldrh	r0, [r3, #0]
 80a0334:	f000 ff8d 	bl	80a1252 <digitalWrite>
		delay(500);
 80a0338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a033c:	f000 fb5a 	bl	80a09f4 <delay>
		int simon = rand() % 2; // if simon = 0, then simon does not say. Otherwise, he does.
 80a0340:	f001 f888 	bl	80a1454 <rand>
 80a0344:	9000      	str	r0, [sp, #0]
		int light = rand() % 3; // determines which light will be the focus of the round. 0 = green, 1 = yellow, 2 = red
 80a0346:	f001 f885 	bl	80a1454 <rand>
 80a034a:	2103      	movs	r1, #3
 80a034c:	fb90 f1f1 	sdiv	r1, r0, r1
 80a0350:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0354:	1a41      	subs	r1, r0, r1
		switch (light)
 80a0356:	2901      	cmp	r1, #1
 80a0358:	4b47      	ldr	r3, [pc, #284]	; (80a0478 <loop+0x324>)
 80a035a:	f000 80af 	beq.w	80a04bc <loop+0x368>
 80a035e:	2902      	cmp	r1, #2
 80a0360:	f000 810c 	beq.w	80a057c <loop+0x428>
 80a0364:	4a42      	ldr	r2, [pc, #264]	; (80a0470 <loop+0x31c>)
 80a0366:	2900      	cmp	r1, #0
 80a0368:	f040 815e 	bne.w	80a0628 <loop+0x4d4>
			digitalWrite(ledG, HIGH); // turn on the green LED
 80a036c:	8810      	ldrh	r0, [r2, #0]
 80a036e:	2101      	movs	r1, #1
 80a0370:	f000 ff6f 	bl	80a1252 <digitalWrite>
			delay(50);
 80a0374:	2032      	movs	r0, #50	; 0x32
 80a0376:	f000 fb3d 	bl	80a09f4 <delay>
			if (simon == 0) // simon does not say
 80a037a:	9b00      	ldr	r3, [sp, #0]
 80a037c:	07da      	lsls	r2, r3, #31
 80a037e:	d439      	bmi.n	80a03f4 <loop+0x2a0>
				Serial.println("Hold the green button.");
 80a0380:	f000 fd9e 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0384:	4944      	ldr	r1, [pc, #272]	; (80a0498 <loop+0x344>)
 80a0386:	f000 fc86 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				delay(2500); // Gives time for the user to make an appropriate input
 80a038a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a038e:	f000 fb31 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0392:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0396:	f000 ff75 	bl	80a1284 <digitalRead>
 80a039a:	4606      	mov	r6, r0
				curY = digitalRead(buttonY);
 80a039c:	f8b9 0000 	ldrh.w	r0, [r9]
 80a03a0:	f000 ff70 	bl	80a1284 <digitalRead>
 80a03a4:	4605      	mov	r5, r0
				curR = digitalRead(buttonR);
 80a03a6:	f8b8 0000 	ldrh.w	r0, [r8]
 80a03aa:	f000 ff6b 	bl	80a1284 <digitalRead>
				if (curG == HIGH || curY == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a03ae:	2e01      	cmp	r6, #1
				curR = digitalRead(buttonR);
 80a03b0:	4604      	mov	r4, r0
				if (curG == HIGH || curY == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a03b2:	d003      	beq.n	80a03bc <loop+0x268>
 80a03b4:	2d01      	cmp	r5, #1
 80a03b6:	d001      	beq.n	80a03bc <loop+0x268>
 80a03b8:	2801      	cmp	r0, #1
 80a03ba:	d117      	bne.n	80a03ec <loop+0x298>
					Serial.println(" No points awarded"); // Debugging printout
 80a03bc:	f000 fd80 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a03c0:	4936      	ldr	r1, [pc, #216]	; (80a049c <loop+0x348>)
					Serial.println(" Restraint point awarded");
 80a03c2:	f000 fc68 	bl	80a0c96 <_ZN5Print7printlnEPKc>
			delay(50);
 80a03c6:	2032      	movs	r0, #50	; 0x32
			delay(100);
 80a03c8:	f000 fb14 	bl	80a09f4 <delay>
		Serial.println("");
 80a03cc:	f000 fd78 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a03d0:	4933      	ldr	r1, [pc, #204]	; (80a04a0 <loop+0x34c>)
 80a03d2:	f000 fc60 	bl	80a0c96 <_ZN5Print7printlnEPKc>
		delay(1000); // A pause in between rounds.
 80a03d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a03da:	f000 fb0b 	bl	80a09f4 <delay>
		prevGreen = curG;
 80a03de:	4b31      	ldr	r3, [pc, #196]	; (80a04a4 <loop+0x350>)
 80a03e0:	601e      	str	r6, [r3, #0]
		prevYellow = curY;
 80a03e2:	4b31      	ldr	r3, [pc, #196]	; (80a04a8 <loop+0x354>)
 80a03e4:	601d      	str	r5, [r3, #0]
		prevRed = curR;
 80a03e6:	4b31      	ldr	r3, [pc, #196]	; (80a04ac <loop+0x358>)
 80a03e8:	601c      	str	r4, [r3, #0]
 80a03ea:	e75c      	b.n	80a02a6 <loop+0x152>
					Serial.println(" Restraint point awarded");
 80a03ec:	f000 fd68 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a03f0:	492f      	ldr	r1, [pc, #188]	; (80a04b0 <loop+0x35c>)
 80a03f2:	e7e6      	b.n	80a03c2 <loop+0x26e>
				Serial.println("Simon says hold the green button.");
 80a03f4:	f000 fd64 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a03f8:	492e      	ldr	r1, [pc, #184]	; (80a04b4 <loop+0x360>)
 80a03fa:	f000 fc4c 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				digitalWrite(ledB, HIGH); // turn on the simon LED
 80a03fe:	2101      	movs	r1, #1
 80a0400:	f8bb 0000 	ldrh.w	r0, [fp]
 80a0404:	f000 ff25 	bl	80a1252 <digitalWrite>
				delay(2500);				 // Gives time for the user to make an appropriate input
 80a0408:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a040c:	f000 faf2 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0410:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0414:	f000 ff36 	bl	80a1284 <digitalRead>
 80a0418:	4606      	mov	r6, r0
				curY = digitalRead(buttonY);
 80a041a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a041e:	f000 ff31 	bl	80a1284 <digitalRead>
 80a0422:	4607      	mov	r7, r0
				curR = digitalRead(buttonR);
 80a0424:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0428:	f000 ff2c 	bl	80a1284 <digitalRead>
				if (curG == HIGH && curY == LOW && curR == LOW)
 80a042c:	2e01      	cmp	r6, #1
				curR = digitalRead(buttonR);
 80a042e:	4604      	mov	r4, r0
				if (curG == HIGH && curY == LOW && curR == LOW)
 80a0430:	d109      	bne.n	80a0446 <loop+0x2f2>
 80a0432:	ea57 0500 	orrs.w	r5, r7, r0
 80a0436:	d106      	bne.n	80a0446 <loop+0x2f2>
					Serial.println(" 1 point awarded"); // Debugging printout
 80a0438:	f000 fd42 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a043c:	491e      	ldr	r1, [pc, #120]	; (80a04b8 <loop+0x364>)
 80a043e:	f000 fc2a 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				curR = digitalRead(buttonR);
 80a0442:	462c      	mov	r4, r5
					points++;
 80a0444:	e7bf      	b.n	80a03c6 <loop+0x272>
					Serial.println(" No points awarded"); // Debugging printout
 80a0446:	f000 fd3b 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a044a:	4914      	ldr	r1, [pc, #80]	; (80a049c <loop+0x348>)
 80a044c:	f000 fc23 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				curY = digitalRead(buttonY);
 80a0450:	463d      	mov	r5, r7
 80a0452:	e7b8      	b.n	80a03c6 <loop+0x272>
 80a0454:	2000008c 	.word	0x2000008c
 80a0458:	200000a0 	.word	0x200000a0
 80a045c:	20000090 	.word	0x20000090
 80a0460:	200000a4 	.word	0x200000a4
 80a0464:	20000088 	.word	0x20000088
 80a0468:	2000000c 	.word	0x2000000c
 80a046c:	20000089 	.word	0x20000089
 80a0470:	20000010 	.word	0x20000010
 80a0474:	2000008b 	.word	0x2000008b
 80a0478:	20000018 	.word	0x20000018
 80a047c:	2000008a 	.word	0x2000008a
 80a0480:	20000014 	.word	0x20000014
 80a0484:	080a15c4 	.word	0x080a15c4
 80a0488:	080a16d2 	.word	0x080a16d2
 80a048c:	20000000 	.word	0x20000000
 80a0490:	20000008 	.word	0x20000008
 80a0494:	20000004 	.word	0x20000004
 80a0498:	080a15f0 	.word	0x080a15f0
 80a049c:	080a1607 	.word	0x080a1607
 80a04a0:	080a15ef 	.word	0x080a15ef
 80a04a4:	20000094 	.word	0x20000094
 80a04a8:	2000009c 	.word	0x2000009c
 80a04ac:	20000098 	.word	0x20000098
 80a04b0:	080a161a 	.word	0x080a161a
 80a04b4:	080a1633 	.word	0x080a1633
 80a04b8:	080a1655 	.word	0x080a1655
			digitalWrite(ledY, HIGH);
 80a04bc:	8818      	ldrh	r0, [r3, #0]
 80a04be:	9101      	str	r1, [sp, #4]
 80a04c0:	f000 fec7 	bl	80a1252 <digitalWrite>
			delay(50);
 80a04c4:	2032      	movs	r0, #50	; 0x32
 80a04c6:	f000 fa95 	bl	80a09f4 <delay>
			if (simon == 0)
 80a04ca:	9b00      	ldr	r3, [sp, #0]
 80a04cc:	9901      	ldr	r1, [sp, #4]
 80a04ce:	f013 0f01 	tst.w	r3, #1
 80a04d2:	d123      	bne.n	80a051c <loop+0x3c8>
				Serial.println("hold the yellow button.");
 80a04d4:	f000 fcf4 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a04d8:	4960      	ldr	r1, [pc, #384]	; (80a065c <loop+0x508>)
 80a04da:	f000 fbdc 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				delay(2500);
 80a04de:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a04e2:	f000 fa87 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a04e6:	f8ba 0000 	ldrh.w	r0, [sl]
 80a04ea:	f000 fecb 	bl	80a1284 <digitalRead>
 80a04ee:	4606      	mov	r6, r0
				curY = digitalRead(buttonY);
 80a04f0:	f8b9 0000 	ldrh.w	r0, [r9]
 80a04f4:	f000 fec6 	bl	80a1284 <digitalRead>
 80a04f8:	4605      	mov	r5, r0
				curR = digitalRead(buttonR);
 80a04fa:	f8b8 0000 	ldrh.w	r0, [r8]
 80a04fe:	f000 fec1 	bl	80a1284 <digitalRead>
				if (curY == HIGH || curG == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a0502:	2d01      	cmp	r5, #1
				curR = digitalRead(buttonR);
 80a0504:	4604      	mov	r4, r0
				if (curY == HIGH || curG == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a0506:	d003      	beq.n	80a0510 <loop+0x3bc>
 80a0508:	2e01      	cmp	r6, #1
 80a050a:	d001      	beq.n	80a0510 <loop+0x3bc>
 80a050c:	2801      	cmp	r0, #1
				if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a050e:	d15e      	bne.n	80a05ce <loop+0x47a>
					Serial.println(" No points awarded"); // Debugging printout
 80a0510:	f000 fcd6 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0514:	4952      	ldr	r1, [pc, #328]	; (80a0660 <loop+0x50c>)
					Serial.println(" Restraint point awarded");
 80a0516:	f000 fbbe 	bl	80a0c96 <_ZN5Print7printlnEPKc>
 80a051a:	e026      	b.n	80a056a <loop+0x416>
				digitalWrite(ledB, HIGH); // turn on the simon LED
 80a051c:	f8bb 0000 	ldrh.w	r0, [fp]
 80a0520:	f000 fe97 	bl	80a1252 <digitalWrite>
				Serial.println("Simon says hold the yellow button.");
 80a0524:	f000 fccc 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0528:	494e      	ldr	r1, [pc, #312]	; (80a0664 <loop+0x510>)
 80a052a:	f000 fbb4 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				delay(2500);				 // Gives time for the user to make an appropriate input
 80a052e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a0532:	f000 fa5f 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0536:	f8ba 0000 	ldrh.w	r0, [sl]
 80a053a:	f000 fea3 	bl	80a1284 <digitalRead>
 80a053e:	4607      	mov	r7, r0
				curY = digitalRead(buttonY);
 80a0540:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0544:	f000 fe9e 	bl	80a1284 <digitalRead>
 80a0548:	4605      	mov	r5, r0
				curR = digitalRead(buttonR);
 80a054a:	f8b8 0000 	ldrh.w	r0, [r8]
 80a054e:	f000 fe99 	bl	80a1284 <digitalRead>
				if (curY == HIGH && curG == LOW && curR == LOW)
 80a0552:	2d01      	cmp	r5, #1
				curR = digitalRead(buttonR);
 80a0554:	4604      	mov	r4, r0
				if (curY == HIGH && curG == LOW && curR == LOW)
 80a0556:	d10a      	bne.n	80a056e <loop+0x41a>
 80a0558:	ea57 0600 	orrs.w	r6, r7, r0
 80a055c:	d107      	bne.n	80a056e <loop+0x41a>
					Serial.println(" 1 point awarded"); // Debugging printout
 80a055e:	f000 fcaf 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0562:	4941      	ldr	r1, [pc, #260]	; (80a0668 <loop+0x514>)
 80a0564:	f000 fb97 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				curR = digitalRead(buttonR);
 80a0568:	4634      	mov	r4, r6
			delay(100);
 80a056a:	2064      	movs	r0, #100	; 0x64
 80a056c:	e72c      	b.n	80a03c8 <loop+0x274>
					Serial.println(" No points awarded"); // Debugging printout
 80a056e:	f000 fca7 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0572:	493b      	ldr	r1, [pc, #236]	; (80a0660 <loop+0x50c>)
 80a0574:	f000 fb8f 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0578:	463e      	mov	r6, r7
 80a057a:	e7f6      	b.n	80a056a <loop+0x416>
			digitalWrite(ledR, HIGH);
 80a057c:	4b3b      	ldr	r3, [pc, #236]	; (80a066c <loop+0x518>)
 80a057e:	2101      	movs	r1, #1
 80a0580:	8818      	ldrh	r0, [r3, #0]
 80a0582:	f000 fe66 	bl	80a1252 <digitalWrite>
			delay(50);
 80a0586:	2032      	movs	r0, #50	; 0x32
 80a0588:	f000 fa34 	bl	80a09f4 <delay>
			if (simon == 0)
 80a058c:	9b00      	ldr	r3, [sp, #0]
 80a058e:	07db      	lsls	r3, r3, #31
 80a0590:	d421      	bmi.n	80a05d6 <loop+0x482>
				Serial.println("Press the red button");
 80a0592:	f000 fc95 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a0596:	4936      	ldr	r1, [pc, #216]	; (80a0670 <loop+0x51c>)
 80a0598:	f000 fb7d 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				delay(2500);				 // Gives time for the user to make an appropriate input
 80a059c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a05a0:	f000 fa28 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a05a4:	f8ba 0000 	ldrh.w	r0, [sl]
 80a05a8:	f000 fe6c 	bl	80a1284 <digitalRead>
 80a05ac:	4606      	mov	r6, r0
				curY = digitalRead(buttonY);
 80a05ae:	f8b9 0000 	ldrh.w	r0, [r9]
 80a05b2:	f000 fe67 	bl	80a1284 <digitalRead>
 80a05b6:	4605      	mov	r5, r0
				curR = digitalRead(buttonR);
 80a05b8:	f8b8 0000 	ldrh.w	r0, [r8]
 80a05bc:	f000 fe62 	bl	80a1284 <digitalRead>
				if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a05c0:	2801      	cmp	r0, #1
				curR = digitalRead(buttonR);
 80a05c2:	4604      	mov	r4, r0
				if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a05c4:	d0a4      	beq.n	80a0510 <loop+0x3bc>
 80a05c6:	2e01      	cmp	r6, #1
 80a05c8:	d0a2      	beq.n	80a0510 <loop+0x3bc>
 80a05ca:	2d01      	cmp	r5, #1
 80a05cc:	e79f      	b.n	80a050e <loop+0x3ba>
					Serial.println(" Restraint point awarded");
 80a05ce:	f000 fc77 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a05d2:	4928      	ldr	r1, [pc, #160]	; (80a0674 <loop+0x520>)
 80a05d4:	e79f      	b.n	80a0516 <loop+0x3c2>
				digitalWrite(ledB, HIGH); // turning on the simon led
 80a05d6:	2101      	movs	r1, #1
 80a05d8:	f8bb 0000 	ldrh.w	r0, [fp]
 80a05dc:	f000 fe39 	bl	80a1252 <digitalWrite>
				Serial.println("Simon says hold the red button");
 80a05e0:	f000 fc6e 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a05e4:	4924      	ldr	r1, [pc, #144]	; (80a0678 <loop+0x524>)
 80a05e6:	f000 fb56 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				delay(2500);				 // Gives time for the user to make an appropriate input
 80a05ea:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a05ee:	f000 fa01 	bl	80a09f4 <delay>
				curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a05f2:	f8ba 0000 	ldrh.w	r0, [sl]
 80a05f6:	f000 fe45 	bl	80a1284 <digitalRead>
 80a05fa:	4607      	mov	r7, r0
				curY = digitalRead(buttonY);
 80a05fc:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0600:	f000 fe40 	bl	80a1284 <digitalRead>
 80a0604:	4605      	mov	r5, r0
				curR = digitalRead(buttonR);
 80a0606:	f8b8 0000 	ldrh.w	r0, [r8]
 80a060a:	f000 fe3b 	bl	80a1284 <digitalRead>
				if (curR == HIGH && curG == LOW && curY == LOW)
 80a060e:	2801      	cmp	r0, #1
				curR = digitalRead(buttonR);
 80a0610:	4604      	mov	r4, r0
				if (curR == HIGH && curG == LOW && curY == LOW)
 80a0612:	d1ac      	bne.n	80a056e <loop+0x41a>
 80a0614:	ea57 0605 	orrs.w	r6, r7, r5
 80a0618:	d1a9      	bne.n	80a056e <loop+0x41a>
					Serial.println(" 1 point awarded"); // Debugging printout
 80a061a:	f000 fc51 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a061e:	4912      	ldr	r1, [pc, #72]	; (80a0668 <loop+0x514>)
 80a0620:	f000 fb39 	bl	80a0c96 <_ZN5Print7printlnEPKc>
				curY = digitalRead(buttonY);
 80a0624:	4635      	mov	r5, r6
					points++;
 80a0626:	e7a0      	b.n	80a056a <loop+0x416>
			Serial.println("Something went wrong");
 80a0628:	f000 fc4a 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a062c:	4913      	ldr	r1, [pc, #76]	; (80a067c <loop+0x528>)
 80a062e:	f000 fb32 	bl	80a0c96 <_ZN5Print7printlnEPKc>
			digitalWrite(ledB, LOW);
 80a0632:	4639      	mov	r1, r7
 80a0634:	f8bb 0000 	ldrh.w	r0, [fp]
 80a0638:	f000 fe0b 	bl	80a1252 <digitalWrite>
			digitalWrite(ledG, LOW);
 80a063c:	4a10      	ldr	r2, [pc, #64]	; (80a0680 <loop+0x52c>)
 80a063e:	4639      	mov	r1, r7
 80a0640:	8810      	ldrh	r0, [r2, #0]
 80a0642:	f000 fe06 	bl	80a1252 <digitalWrite>
			digitalWrite(ledY, LOW);
 80a0646:	4b0f      	ldr	r3, [pc, #60]	; (80a0684 <loop+0x530>)
 80a0648:	4639      	mov	r1, r7
 80a064a:	8818      	ldrh	r0, [r3, #0]
 80a064c:	f000 fe01 	bl	80a1252 <digitalWrite>
			digitalWrite(ledR, LOW);
 80a0650:	4b06      	ldr	r3, [pc, #24]	; (80a066c <loop+0x518>)
 80a0652:	4639      	mov	r1, r7
 80a0654:	8818      	ldrh	r0, [r3, #0]
 80a0656:	f000 fdfc 	bl	80a1252 <digitalWrite>
			break;
 80a065a:	e6b7      	b.n	80a03cc <loop+0x278>
 80a065c:	080a1671 	.word	0x080a1671
 80a0660:	080a1607 	.word	0x080a1607
 80a0664:	080a1666 	.word	0x080a1666
 80a0668:	080a1655 	.word	0x080a1655
 80a066c:	20000014 	.word	0x20000014
 80a0670:	080a1689 	.word	0x080a1689
 80a0674:	080a161a 	.word	0x080a161a
 80a0678:	080a169e 	.word	0x080a169e
 80a067c:	080a16bd 	.word	0x080a16bd
 80a0680:	20000010 	.word	0x20000010
 80a0684:	20000018 	.word	0x20000018

080a0688 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <os_mutex_recursive_create+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601d0 	.word	0x080601d0

080a0698 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <os_mutex_recursive_destroy+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601d0 	.word	0x080601d0

080a06a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <HAL_RNG_GetRandomNumber+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	685b      	ldr	r3, [r3, #4]
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	0806019c 	.word	0x0806019c

080a06b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	695b      	ldr	r3, [r3, #20]
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	0806019c 	.word	0x0806019c

080a06c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <HAL_Pin_Mode+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	689b      	ldr	r3, [r3, #8]
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601b0 	.word	0x080601b0

080a06d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <HAL_Get_Pin_Mode+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	68db      	ldr	r3, [r3, #12]
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601b0 	.word	0x080601b0

080a06e8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <HAL_GPIO_Write+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	691b      	ldr	r3, [r3, #16]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601b0 	.word	0x080601b0

080a06f8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <HAL_GPIO_Read+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	695b      	ldr	r3, [r3, #20]
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601b0 	.word	0x080601b0

080a0708 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <hal_i2c_write+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601ac 	.word	0x080601ac

080a0718 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <hal_i2c_available+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601ac 	.word	0x080601ac

080a0728 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0728:	b508      	push	{r3, lr}
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <hal_i2c_read+0xc>)
 80a072c:	681b      	ldr	r3, [r3, #0]
 80a072e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0730:	9301      	str	r3, [sp, #4]
 80a0732:	bd08      	pop	{r3, pc}
 80a0734:	080601ac 	.word	0x080601ac

080a0738 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0738:	b508      	push	{r3, lr}
 80a073a:	4b02      	ldr	r3, [pc, #8]	; (80a0744 <hal_i2c_peek+0xc>)
 80a073c:	681b      	ldr	r3, [r3, #0]
 80a073e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0740:	9301      	str	r3, [sp, #4]
 80a0742:	bd08      	pop	{r3, pc}
 80a0744:	080601ac 	.word	0x080601ac

080a0748 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <hal_i2c_flush+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601ac 	.word	0x080601ac

080a0758 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <hal_i2c_is_enabled+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601ac 	.word	0x080601ac

080a0768 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b03      	ldr	r3, [pc, #12]	; (80a0778 <hal_i2c_init+0x10>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0772:	9301      	str	r3, [sp, #4]
 80a0774:	bd08      	pop	{r3, pc}
 80a0776:	0000      	.short	0x0000
 80a0778:	080601ac 	.word	0x080601ac

080a077c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <hal_spi_init+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	69db      	ldr	r3, [r3, #28]
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601b4 	.word	0x080601b4

080a078c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <hal_spi_is_enabled+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	6a1b      	ldr	r3, [r3, #32]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601b4 	.word	0x080601b4

080a079c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <hal_usart_write+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601c4 	.word	0x080601c4

080a07ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <hal_usart_available+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601c4 	.word	0x080601c4

080a07bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <hal_usart_read+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601c4 	.word	0x080601c4

080a07cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <hal_usart_peek+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601c4 	.word	0x080601c4

080a07dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <hal_usart_flush+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601c4 	.word	0x080601c4

080a07ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <hal_usart_is_enabled+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601c4 	.word	0x080601c4

080a07fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <hal_usart_available_data_for_write+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601c4 	.word	0x080601c4

080a080c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <hal_usart_init_ex+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601c4 	.word	0x080601c4

080a081c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <HAL_USB_USART_Init+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	681b      	ldr	r3, [r3, #0]
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601d8 	.word	0x080601d8

080a082c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <HAL_USB_USART_Begin+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	685b      	ldr	r3, [r3, #4]
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601d8 	.word	0x080601d8

080a083c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <HAL_USB_USART_Available_Data+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	691b      	ldr	r3, [r3, #16]
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601d8 	.word	0x080601d8

080a084c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	695b      	ldr	r3, [r3, #20]
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	080601d8 	.word	0x080601d8

080a085c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <HAL_USB_USART_Receive_Data+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	699b      	ldr	r3, [r3, #24]
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	080601d8 	.word	0x080601d8

080a086c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <HAL_USB_USART_Send_Data+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	69db      	ldr	r3, [r3, #28]
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	080601d8 	.word	0x080601d8

080a087c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <HAL_USB_USART_Flush_Data+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	6a1b      	ldr	r3, [r3, #32]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601d8 	.word	0x080601d8

080a088c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <inet_gethostbyname+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601c0 	.word	0x080601c0

080a089c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <set_system_mode+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	685b      	ldr	r3, [r3, #4]
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601a4 	.word	0x080601a4

080a08ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <system_delay_ms+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	695b      	ldr	r3, [r3, #20]
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	080601a4 	.word	0x080601a4

080a08bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b03      	ldr	r3, [pc, #12]	; (80a08cc <system_ctrl_set_app_request_handler+0x10>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08c6:	9301      	str	r3, [sp, #4]
 80a08c8:	bd08      	pop	{r3, pc}
 80a08ca:	0000      	.short	0x0000
 80a08cc:	080601a4 	.word	0x080601a4

080a08d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b03      	ldr	r3, [pc, #12]	; (80a08e0 <system_ctrl_set_result+0x10>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08da:	9301      	str	r3, [sp, #4]
 80a08dc:	bd08      	pop	{r3, pc}
 80a08de:	0000      	.short	0x0000
 80a08e0:	080601a4 	.word	0x080601a4

080a08e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601cc 	.word	0x080601cc

080a08f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <network_connect+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	685b      	ldr	r3, [r3, #4]
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601c8 	.word	0x080601c8

080a0904 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <network_connecting+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	689b      	ldr	r3, [r3, #8]
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c8 	.word	0x080601c8

080a0914 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <network_disconnect+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	68db      	ldr	r3, [r3, #12]
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c8 	.word	0x080601c8

080a0924 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <network_ready+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	691b      	ldr	r3, [r3, #16]
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c8 	.word	0x080601c8

080a0934 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <network_on+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	695b      	ldr	r3, [r3, #20]
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c8 	.word	0x080601c8

080a0944 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <network_off+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	699b      	ldr	r3, [r3, #24]
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601c8 	.word	0x080601c8

080a0954 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <network_listen+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	69db      	ldr	r3, [r3, #28]
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601c8 	.word	0x080601c8

080a0964 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <network_listening+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6a1b      	ldr	r3, [r3, #32]
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c8 	.word	0x080601c8

080a0974 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <network_set_listen_timeout+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601c8 	.word	0x080601c8

080a0984 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <network_get_listen_timeout+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601c8 	.word	0x080601c8

080a0994 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <network_is_on+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601c8 	.word	0x080601c8

080a09a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <network_is_off+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601c8 	.word	0x080601c8

080a09b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <malloc+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	681b      	ldr	r3, [r3, #0]
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601a0 	.word	0x080601a0

080a09c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <free+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	685b      	ldr	r3, [r3, #4]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601a0 	.word	0x080601a0

080a09d4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <__assert_func+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601a0 	.word	0x080601a0

080a09e4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <newlib_impure_ptr_callback+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601a0 	.word	0x080601a0

080a09f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a09f4:	2100      	movs	r1, #0
 80a09f6:	f7ff bf59 	b.w	80a08ac <system_delay_ms>

080a09fa <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a09fa:	4770      	bx	lr

080a09fc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a09fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09fe:	4606      	mov	r6, r0
 80a0a00:	4615      	mov	r5, r2
 80a0a02:	460c      	mov	r4, r1
 80a0a04:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a06:	42bc      	cmp	r4, r7
 80a0a08:	d006      	beq.n	80a0a18 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a0a:	6833      	ldr	r3, [r6, #0]
 80a0a0c:	4630      	mov	r0, r6
 80a0a0e:	689b      	ldr	r3, [r3, #8]
 80a0a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a14:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0a16:	e7f6      	b.n	80a0a06 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0a18:	4628      	mov	r0, r5
 80a0a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a1c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0a1c:	2200      	movs	r2, #0
 80a0a1e:	7c00      	ldrb	r0, [r0, #16]
 80a0a20:	f7ff be72 	b.w	80a0708 <hal_i2c_write>

080a0a24 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0a24:	2100      	movs	r1, #0
 80a0a26:	7c00      	ldrb	r0, [r0, #16]
 80a0a28:	f7ff be76 	b.w	80a0718 <hal_i2c_available>

080a0a2c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0a2c:	2100      	movs	r1, #0
 80a0a2e:	7c00      	ldrb	r0, [r0, #16]
 80a0a30:	f7ff be7a 	b.w	80a0728 <hal_i2c_read>

080a0a34 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0a34:	2100      	movs	r1, #0
 80a0a36:	7c00      	ldrb	r0, [r0, #16]
 80a0a38:	f7ff be7e 	b.w	80a0738 <hal_i2c_peek>

080a0a3c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0a3c:	2100      	movs	r1, #0
 80a0a3e:	7c00      	ldrb	r0, [r0, #16]
 80a0a40:	f7ff be82 	b.w	80a0748 <hal_i2c_flush>

080a0a44 <_ZN7TwoWireD0Ev>:
 80a0a44:	b510      	push	{r4, lr}
 80a0a46:	4604      	mov	r4, r0
 80a0a48:	2114      	movs	r1, #20
 80a0a4a:	f7ff fb26 	bl	80a009a <_ZdlPvj>
 80a0a4e:	4620      	mov	r0, r4
 80a0a50:	bd10      	pop	{r4, pc}
	...

080a0a54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a5a:	4604      	mov	r4, r0
 80a0a5c:	4608      	mov	r0, r1
 80a0a5e:	2100      	movs	r1, #0
 80a0a60:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a64:	4b03      	ldr	r3, [pc, #12]	; (80a0a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0a66:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a68:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0a6a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0a6c:	f7ff fe7c 	bl	80a0768 <hal_i2c_init>
}
 80a0a70:	4620      	mov	r0, r4
 80a0a72:	bd10      	pop	{r4, pc}
 80a0a74:	080a1708 	.word	0x080a1708

080a0a78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0a78:	4770      	bx	lr

080a0a7a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a7c:	460e      	mov	r6, r1
 80a0a7e:	2400      	movs	r4, #0
 80a0a80:	f100 0708 	add.w	r7, r0, #8
 80a0a84:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0a86:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0a8a:	220a      	movs	r2, #10
 80a0a8c:	4630      	mov	r0, r6
 80a0a8e:	f000 f90c 	bl	80a0caa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a92:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a94:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0a96:	d101      	bne.n	80a0a9c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0a98:	4620      	mov	r0, r4
 80a0a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0a9c:	2c00      	cmp	r4, #0
 80a0a9e:	d0f2      	beq.n	80a0a86 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0aa0:	212e      	movs	r1, #46	; 0x2e
 80a0aa2:	4630      	mov	r0, r6
 80a0aa4:	f000 f8e8 	bl	80a0c78 <_ZN5Print5printEc>
 80a0aa8:	4404      	add	r4, r0
 80a0aaa:	e7ec      	b.n	80a0a86 <_ZNK9IPAddress7printToER5Print+0xc>

080a0aac <_ZN9IPAddressD0Ev>:
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	4604      	mov	r4, r0
 80a0ab0:	2118      	movs	r1, #24
 80a0ab2:	f7ff faf2 	bl	80a009a <_ZdlPvj>
 80a0ab6:	4620      	mov	r0, r4
 80a0ab8:	bd10      	pop	{r4, pc}
	...

080a0abc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0abc:	b510      	push	{r4, lr}
 80a0abe:	4604      	mov	r4, r0
 80a0ac0:	4b04      	ldr	r3, [pc, #16]	; (80a0ad4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0ac2:	2211      	movs	r2, #17
 80a0ac4:	2100      	movs	r1, #0
 80a0ac6:	f840 3b04 	str.w	r3, [r0], #4
 80a0aca:	f000 fc8d 	bl	80a13e8 <memset>
}
 80a0ace:	4620      	mov	r0, r4
 80a0ad0:	bd10      	pop	{r4, pc}
 80a0ad2:	bf00      	nop
 80a0ad4:	080a1730 	.word	0x080a1730

080a0ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ad8:	4603      	mov	r3, r0
 80a0ada:	4a07      	ldr	r2, [pc, #28]	; (80a0af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0adc:	b510      	push	{r4, lr}
 80a0ade:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0ae2:	f101 0210 	add.w	r2, r1, #16
 80a0ae6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0aea:	4291      	cmp	r1, r2
 80a0aec:	f843 4b04 	str.w	r4, [r3], #4
 80a0af0:	d1f9      	bne.n	80a0ae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0af2:	780a      	ldrb	r2, [r1, #0]
 80a0af4:	701a      	strb	r2, [r3, #0]
}
 80a0af6:	bd10      	pop	{r4, pc}
 80a0af8:	080a1730 	.word	0x080a1730

080a0afc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0afc:	4a02      	ldr	r2, [pc, #8]	; (80a0b08 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0afe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0b02:	2204      	movs	r2, #4
 80a0b04:	7502      	strb	r2, [r0, #20]
}
 80a0b06:	4770      	bx	lr
 80a0b08:	080a1730 	.word	0x080a1730

080a0b0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0b0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b12:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0b16:	2304      	movs	r3, #4
 80a0b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0b1c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0b20:	6044      	str	r4, [r0, #4]
 80a0b22:	7503      	strb	r3, [r0, #20]
}
 80a0b24:	bd10      	pop	{r4, pc}
	...

080a0b28 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0b28:	b513      	push	{r0, r1, r4, lr}
 80a0b2a:	4c04      	ldr	r4, [pc, #16]	; (80a0b3c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0b2c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0b2e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a0b32:	9400      	str	r4, [sp, #0]
 80a0b34:	f7ff ffea 	bl	80a0b0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b38:	b002      	add	sp, #8
 80a0b3a:	bd10      	pop	{r4, pc}
 80a0b3c:	080a1730 	.word	0x080a1730

080a0b40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b40:	4b01      	ldr	r3, [pc, #4]	; (80a0b48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b42:	4a02      	ldr	r2, [pc, #8]	; (80a0b4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b44:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0b46:	4770      	bx	lr
 80a0b48:	200000a8 	.word	0x200000a8
 80a0b4c:	080a173c 	.word	0x080a173c

080a0b50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b50:	2300      	movs	r3, #0
 80a0b52:	6840      	ldr	r0, [r0, #4]
 80a0b54:	461a      	mov	r2, r3
 80a0b56:	f7ff becd 	b.w	80a08f4 <network_connect>

080a0b5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b5a:	2200      	movs	r2, #0
 80a0b5c:	2102      	movs	r1, #2
 80a0b5e:	6840      	ldr	r0, [r0, #4]
 80a0b60:	f7ff bed8 	b.w	80a0914 <network_disconnect>

080a0b64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b64:	2200      	movs	r2, #0
 80a0b66:	6840      	ldr	r0, [r0, #4]
 80a0b68:	4611      	mov	r1, r2
 80a0b6a:	f7ff becb 	b.w	80a0904 <network_connecting>

080a0b6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0b6e:	2200      	movs	r2, #0
 80a0b70:	6840      	ldr	r0, [r0, #4]
 80a0b72:	4611      	mov	r1, r2
 80a0b74:	f7ff bed6 	b.w	80a0924 <network_ready>

080a0b78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0b78:	2300      	movs	r3, #0
 80a0b7a:	6840      	ldr	r0, [r0, #4]
 80a0b7c:	461a      	mov	r2, r3
 80a0b7e:	4619      	mov	r1, r3
 80a0b80:	f7ff bed8 	b.w	80a0934 <network_on>

080a0b84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0b84:	2300      	movs	r3, #0
 80a0b86:	6840      	ldr	r0, [r0, #4]
 80a0b88:	461a      	mov	r2, r3
 80a0b8a:	4619      	mov	r1, r3
 80a0b8c:	f7ff beda 	b.w	80a0944 <network_off>

080a0b90 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0b90:	2100      	movs	r1, #0
 80a0b92:	6840      	ldr	r0, [r0, #4]
 80a0b94:	f7ff befe 	b.w	80a0994 <network_is_on>

080a0b98 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0b98:	2100      	movs	r1, #0
 80a0b9a:	6840      	ldr	r0, [r0, #4]
 80a0b9c:	f7ff bf02 	b.w	80a09a4 <network_is_off>

080a0ba0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0ba0:	2200      	movs	r2, #0
 80a0ba2:	6840      	ldr	r0, [r0, #4]
 80a0ba4:	f081 0101 	eor.w	r1, r1, #1
 80a0ba8:	f7ff bed4 	b.w	80a0954 <network_listen>

080a0bac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0bac:	2200      	movs	r2, #0
 80a0bae:	6840      	ldr	r0, [r0, #4]
 80a0bb0:	f7ff bee0 	b.w	80a0974 <network_set_listen_timeout>

080a0bb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0bb4:	2200      	movs	r2, #0
 80a0bb6:	6840      	ldr	r0, [r0, #4]
 80a0bb8:	4611      	mov	r1, r2
 80a0bba:	f7ff bee3 	b.w	80a0984 <network_get_listen_timeout>

080a0bbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0bbe:	2200      	movs	r2, #0
 80a0bc0:	6840      	ldr	r0, [r0, #4]
 80a0bc2:	4611      	mov	r1, r2
 80a0bc4:	f7ff bece 	b.w	80a0964 <network_listening>

080a0bc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0bc8:	b570      	push	{r4, r5, r6, lr}
 80a0bca:	4615      	mov	r5, r2
 80a0bcc:	b08e      	sub	sp, #56	; 0x38
 80a0bce:	4604      	mov	r4, r0
    IPAddress addr;
 80a0bd0:	a808      	add	r0, sp, #32
 80a0bd2:	f7ff ff73 	bl	80a0abc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0bd6:	2211      	movs	r2, #17
 80a0bd8:	2100      	movs	r1, #0
 80a0bda:	a803      	add	r0, sp, #12
 80a0bdc:	f000 fc04 	bl	80a13e8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0be0:	2600      	movs	r6, #0
 80a0be2:	4628      	mov	r0, r5
 80a0be4:	f000 fc74 	bl	80a14d0 <strlen>
 80a0be8:	4b0a      	ldr	r3, [pc, #40]	; (80a0c14 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0bea:	9600      	str	r6, [sp, #0]
 80a0bec:	b281      	uxth	r1, r0
 80a0bee:	685b      	ldr	r3, [r3, #4]
 80a0bf0:	4628      	mov	r0, r5
 80a0bf2:	aa03      	add	r2, sp, #12
 80a0bf4:	f7ff fe4a 	bl	80a088c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0bf8:	b130      	cbz	r0, 80a0c08 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0bfa:	4631      	mov	r1, r6
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f7ff ff7d 	bl	80a0afc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0c02:	4620      	mov	r0, r4
 80a0c04:	b00e      	add	sp, #56	; 0x38
 80a0c06:	bd70      	pop	{r4, r5, r6, pc}
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	a903      	add	r1, sp, #12
 80a0c0c:	f7ff ff64 	bl	80a0ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0c10:	e7f7      	b.n	80a0c02 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0c12:	bf00      	nop
 80a0c14:	2000040c 	.word	0x2000040c

080a0c18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0c18:	4b02      	ldr	r3, [pc, #8]	; (80a0c24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0c1a:	4a03      	ldr	r2, [pc, #12]	; (80a0c28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0c1c:	601a      	str	r2, [r3, #0]
 80a0c1e:	2200      	movs	r2, #0
 80a0c20:	605a      	str	r2, [r3, #4]

} // spark
 80a0c22:	4770      	bx	lr
 80a0c24:	200000ac 	.word	0x200000ac
 80a0c28:	080a1748 	.word	0x080a1748

080a0c2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c2e:	4606      	mov	r6, r0
 80a0c30:	460d      	mov	r5, r1
  size_t n = 0;
 80a0c32:	2400      	movs	r4, #0
 80a0c34:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0c36:	42bd      	cmp	r5, r7
 80a0c38:	d00c      	beq.n	80a0c54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0c3a:	6833      	ldr	r3, [r6, #0]
 80a0c3c:	4630      	mov	r0, r6
 80a0c3e:	689b      	ldr	r3, [r3, #8]
 80a0c40:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0c44:	4798      	blx	r3
     if (chunk>=0)
 80a0c46:	1e03      	subs	r3, r0, #0
 80a0c48:	db01      	blt.n	80a0c4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0c4a:	441c      	add	r4, r3
  while (size--) {
 80a0c4c:	e7f3      	b.n	80a0c36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0c4e:	2c00      	cmp	r4, #0
 80a0c50:	bf08      	it	eq
 80a0c52:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0c54:	4620      	mov	r0, r4
 80a0c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c58 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0c58:	b570      	push	{r4, r5, r6, lr}
 80a0c5a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0c5c:	460c      	mov	r4, r1
    }
 80a0c5e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0c60:	b149      	cbz	r1, 80a0c76 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0c62:	f000 fc35 	bl	80a14d0 <strlen>
 80a0c66:	682b      	ldr	r3, [r5, #0]
 80a0c68:	4602      	mov	r2, r0
 80a0c6a:	4621      	mov	r1, r4
 80a0c6c:	4628      	mov	r0, r5
    }
 80a0c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0c72:	68db      	ldr	r3, [r3, #12]
 80a0c74:	4718      	bx	r3
    }
 80a0c76:	bd70      	pop	{r4, r5, r6, pc}

080a0c78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0c78:	6803      	ldr	r3, [r0, #0]
 80a0c7a:	689b      	ldr	r3, [r3, #8]
 80a0c7c:	4718      	bx	r3

080a0c7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0c7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0c80:	210d      	movs	r1, #13
{
 80a0c82:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0c84:	f7ff fff8 	bl	80a0c78 <_ZN5Print5printEc>
  n += print('\n');
 80a0c88:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0c8a:	4604      	mov	r4, r0
  n += print('\n');
 80a0c8c:	4628      	mov	r0, r5
 80a0c8e:	f7ff fff3 	bl	80a0c78 <_ZN5Print5printEc>
  return n;
}
 80a0c92:	4420      	add	r0, r4
 80a0c94:	bd38      	pop	{r3, r4, r5, pc}

080a0c96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0c96:	b538      	push	{r3, r4, r5, lr}
 80a0c98:	4605      	mov	r5, r0
  return write(str);
 80a0c9a:	f7ff ffdd 	bl	80a0c58 <_ZN5Print5writeEPKc>
 80a0c9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0ca0:	4628      	mov	r0, r5
 80a0ca2:	f7ff ffec 	bl	80a0c7e <_ZN5Print7printlnEv>
  return n;
}
 80a0ca6:	4420      	add	r0, r4
 80a0ca8:	bd38      	pop	{r3, r4, r5, pc}

080a0caa <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0caa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0cac:	2a01      	cmp	r2, #1
 80a0cae:	bf98      	it	ls
 80a0cb0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0cb2:	b530      	push	{r4, r5, lr}
 80a0cb4:	b08b      	sub	sp, #44	; 0x2c
 80a0cb6:	460c      	mov	r4, r1
  *str = '\0';
 80a0cb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0cbc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0cbe:	4625      	mov	r5, r4
 80a0cc0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0cc4:	fb04 5312 	mls	r3, r4, r2, r5
 80a0cc8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0cca:	2b09      	cmp	r3, #9
 80a0ccc:	bf94      	ite	ls
 80a0cce:	3330      	addls	r3, #48	; 0x30
 80a0cd0:	3337      	addhi	r3, #55	; 0x37
 80a0cd2:	b2db      	uxtb	r3, r3
  } while(n);
 80a0cd4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0cd6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0cda:	d9f0      	bls.n	80a0cbe <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0cdc:	f7ff ffbc 	bl	80a0c58 <_ZN5Print5writeEPKc>
}
 80a0ce0:	b00b      	add	sp, #44	; 0x2c
 80a0ce2:	bd30      	pop	{r4, r5, pc}

080a0ce4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ce4:	2200      	movs	r2, #0
 80a0ce6:	4b01      	ldr	r3, [pc, #4]	; (80a0cec <_GLOBAL__sub_I_RGB+0x8>)
 80a0ce8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0cea:	4770      	bx	lr
 80a0cec:	200000b4 	.word	0x200000b4

080a0cf0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0cf0:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0cf2:	2600      	movs	r6, #0
 80a0cf4:	4604      	mov	r4, r0
 80a0cf6:	460d      	mov	r5, r1
 80a0cf8:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0cfc:	f7ff fcc4 	bl	80a0688 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0d00:	4628      	mov	r0, r5
    _spi = spi;
 80a0d02:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0d04:	f7ff fd3a 	bl	80a077c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0d08:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0d0a:	6066      	str	r6, [r4, #4]
}
 80a0d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0d10 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0d10:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0d12:	2000      	movs	r0, #0
 80a0d14:	4b04      	ldr	r3, [pc, #16]	; (80a0d28 <_GLOBAL__sub_I_System+0x18>)
 80a0d16:	601a      	str	r2, [r3, #0]
 80a0d18:	4b04      	ldr	r3, [pc, #16]	; (80a0d2c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0d1a:	4a05      	ldr	r2, [pc, #20]	; (80a0d30 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0d1c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a0d20:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d22:	f7ff bdbb 	b.w	80a089c <set_system_mode>
 80a0d26:	bf00      	nop
 80a0d28:	200000d0 	.word	0x200000d0
 80a0d2c:	200000c4 	.word	0x200000c4
 80a0d30:	ffff0000 	.word	0xffff0000

080a0d34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d34:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d36:	681a      	ldr	r2, [r3, #0]
 80a0d38:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d3a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0d3c:	4770      	bx	lr
 80a0d3e:	bf00      	nop
 80a0d40:	2000001c 	.word	0x2000001c
 80a0d44:	200000d4 	.word	0x200000d4

080a0d48 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0d48:	4770      	bx	lr

080a0d4a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d4a:	7441      	strb	r1, [r0, #17]
}
 80a0d4c:	4770      	bx	lr

080a0d4e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0d4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0d50:	7c00      	ldrb	r0, [r0, #16]
 80a0d52:	f7ff fd53 	bl	80a07fc <hal_usart_available_data_for_write>
}
 80a0d56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d5a:	bd08      	pop	{r3, pc}

080a0d5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0d5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0d5e:	7c00      	ldrb	r0, [r0, #16]
 80a0d60:	f7ff fd24 	bl	80a07ac <hal_usart_available>
}
 80a0d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d68:	bd08      	pop	{r3, pc}

080a0d6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0d6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0d6c:	7c00      	ldrb	r0, [r0, #16]
 80a0d6e:	f7ff fd2d 	bl	80a07cc <hal_usart_peek>
}
 80a0d72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0d76:	bd08      	pop	{r3, pc}

080a0d78 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0d78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0d7a:	7c00      	ldrb	r0, [r0, #16]
 80a0d7c:	f7ff fd1e 	bl	80a07bc <hal_usart_read>
}
 80a0d80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0d84:	bd08      	pop	{r3, pc}

080a0d86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0d86:	7c00      	ldrb	r0, [r0, #16]
 80a0d88:	f7ff bd28 	b.w	80a07dc <hal_usart_flush>

080a0d8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d8c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0d8e:	7c46      	ldrb	r6, [r0, #17]
{
 80a0d90:	4604      	mov	r4, r0
 80a0d92:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0d94:	b12e      	cbz	r6, 80a0da2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0d96:	4629      	mov	r1, r5
 80a0d98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0d9e:	f7ff bcfd 	b.w	80a079c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0da2:	7c00      	ldrb	r0, [r0, #16]
 80a0da4:	f7ff fd2a 	bl	80a07fc <hal_usart_available_data_for_write>
 80a0da8:	2800      	cmp	r0, #0
 80a0daa:	dcf4      	bgt.n	80a0d96 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0dac:	4630      	mov	r0, r6
 80a0dae:	bd70      	pop	{r4, r5, r6, pc}

080a0db0 <_ZN11USARTSerialD0Ev>:
 80a0db0:	b510      	push	{r4, lr}
 80a0db2:	4604      	mov	r4, r0
 80a0db4:	2114      	movs	r1, #20
 80a0db6:	f7ff f970 	bl	80a009a <_ZdlPvj>
 80a0dba:	4620      	mov	r0, r4
 80a0dbc:	bd10      	pop	{r4, pc}
	...

080a0dc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0dc0:	b510      	push	{r4, lr}
 80a0dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0dc6:	4604      	mov	r4, r0
 80a0dc8:	4608      	mov	r0, r1
 80a0dca:	4611      	mov	r1, r2
 80a0dcc:	2200      	movs	r2, #0
 80a0dce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a0dd2:	4b04      	ldr	r3, [pc, #16]	; (80a0de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a0dd4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0dd6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0dd8:	2301      	movs	r3, #1
 80a0dda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a0ddc:	f7ff fd16 	bl	80a080c <hal_usart_init_ex>
}
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	bd10      	pop	{r4, pc}
 80a0de4:	080a17a0 	.word	0x080a17a0

080a0de8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0de8:	7441      	strb	r1, [r0, #17]
}
 80a0dea:	4770      	bx	lr

080a0dec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0dec:	4770      	bx	lr

080a0dee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0dee:	4770      	bx	lr

080a0df0 <_ZN9USBSerial4readEv>:
{
 80a0df0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0df2:	2100      	movs	r1, #0
 80a0df4:	7c00      	ldrb	r0, [r0, #16]
 80a0df6:	f7ff fd31 	bl	80a085c <HAL_USB_USART_Receive_Data>
}
 80a0dfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0dfe:	bd08      	pop	{r3, pc}

080a0e00 <_ZN9USBSerial4peekEv>:
{
 80a0e00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0e02:	2101      	movs	r1, #1
 80a0e04:	7c00      	ldrb	r0, [r0, #16]
 80a0e06:	f7ff fd29 	bl	80a085c <HAL_USB_USART_Receive_Data>
}
 80a0e0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e0e:	bd08      	pop	{r3, pc}

080a0e10 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0e10:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0e12:	7c00      	ldrb	r0, [r0, #16]
 80a0e14:	f7ff fd1a 	bl	80a084c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e1c:	bd08      	pop	{r3, pc}

080a0e1e <_ZN9USBSerial9availableEv>:
{
 80a0e1e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0e20:	7c00      	ldrb	r0, [r0, #16]
 80a0e22:	f7ff fd0b 	bl	80a083c <HAL_USB_USART_Available_Data>
}
 80a0e26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e2a:	bd08      	pop	{r3, pc}

080a0e2c <_ZN9USBSerial5writeEh>:
{
 80a0e2c:	b538      	push	{r3, r4, r5, lr}
 80a0e2e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e30:	7c00      	ldrb	r0, [r0, #16]
{
 80a0e32:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e34:	f7ff fd0a 	bl	80a084c <HAL_USB_USART_Available_Data_For_Write>
 80a0e38:	2800      	cmp	r0, #0
 80a0e3a:	dc01      	bgt.n	80a0e40 <_ZN9USBSerial5writeEh+0x14>
 80a0e3c:	7c60      	ldrb	r0, [r4, #17]
 80a0e3e:	b128      	cbz	r0, 80a0e4c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e40:	4629      	mov	r1, r5
 80a0e42:	7c20      	ldrb	r0, [r4, #16]
 80a0e44:	f7ff fd12 	bl	80a086c <HAL_USB_USART_Send_Data>
 80a0e48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0e4c:	bd38      	pop	{r3, r4, r5, pc}

080a0e4e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0e4e:	7c00      	ldrb	r0, [r0, #16]
 80a0e50:	f7ff bd14 	b.w	80a087c <HAL_USB_USART_Flush_Data>

080a0e54 <_ZN9USBSerialD0Ev>:
 80a0e54:	b510      	push	{r4, lr}
 80a0e56:	4604      	mov	r4, r0
 80a0e58:	2114      	movs	r1, #20
 80a0e5a:	f7ff f91e 	bl	80a009a <_ZdlPvj>
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	bd10      	pop	{r4, pc}

080a0e62 <__tcf_1>:
 80a0e62:	4770      	bx	lr

080a0e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e64:	b510      	push	{r4, lr}
 80a0e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e6a:	4604      	mov	r4, r0
 80a0e6c:	4608      	mov	r0, r1
 80a0e6e:	2100      	movs	r1, #0
 80a0e70:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0e74:	4b04      	ldr	r3, [pc, #16]	; (80a0e88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0e76:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e78:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0e7a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0e7c:	4611      	mov	r1, r2
  _blocking = true;
 80a0e7e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0e80:	f7ff fccc 	bl	80a081c <HAL_USB_USART_Init>
}
 80a0e84:	4620      	mov	r0, r4
 80a0e86:	bd10      	pop	{r4, pc}
 80a0e88:	080a17d0 	.word	0x080a17d0

080a0e8c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0e8c:	2200      	movs	r2, #0
 80a0e8e:	7c00      	ldrb	r0, [r0, #16]
 80a0e90:	f7ff bccc 	b.w	80a082c <HAL_USB_USART_Begin>

080a0e94 <_Z19acquireSerialBufferv>:
{
 80a0e94:	b510      	push	{r4, lr}
 80a0e96:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0e98:	2214      	movs	r2, #20
 80a0e9a:	2100      	movs	r1, #0
 80a0e9c:	f000 faa4 	bl	80a13e8 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0ea0:	4b05      	ldr	r3, [pc, #20]	; (80a0eb8 <_Z19acquireSerialBufferv+0x24>)
}
 80a0ea2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0ea4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0ea6:	4b05      	ldr	r3, [pc, #20]	; (80a0ebc <_Z19acquireSerialBufferv+0x28>)
 80a0ea8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0eaa:	f240 1301 	movw	r3, #257	; 0x101
 80a0eae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0eb0:	2381      	movs	r3, #129	; 0x81
 80a0eb2:	8223      	strh	r3, [r4, #16]
}
 80a0eb4:	bd10      	pop	{r4, pc}
 80a0eb6:	bf00      	nop
 80a0eb8:	20000108 	.word	0x20000108
 80a0ebc:	20000209 	.word	0x20000209

080a0ec0 <_Z16_fetch_usbserialv>:
{
 80a0ec0:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ec2:	4d0e      	ldr	r5, [pc, #56]	; (80a0efc <_Z16_fetch_usbserialv+0x3c>)
{
 80a0ec4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0ec6:	a801      	add	r0, sp, #4
 80a0ec8:	f7ff ffe4 	bl	80a0e94 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ecc:	7829      	ldrb	r1, [r5, #0]
 80a0ece:	f3bf 8f5b 	dmb	ish
 80a0ed2:	f011 0401 	ands.w	r4, r1, #1
 80a0ed6:	d10e      	bne.n	80a0ef6 <_Z16_fetch_usbserialv+0x36>
 80a0ed8:	4628      	mov	r0, r5
 80a0eda:	f7ff f8e0 	bl	80a009e <__cxa_guard_acquire>
 80a0ede:	b150      	cbz	r0, 80a0ef6 <_Z16_fetch_usbserialv+0x36>
 80a0ee0:	4621      	mov	r1, r4
 80a0ee2:	aa01      	add	r2, sp, #4
 80a0ee4:	4806      	ldr	r0, [pc, #24]	; (80a0f00 <_Z16_fetch_usbserialv+0x40>)
 80a0ee6:	f7ff ffbd 	bl	80a0e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0eea:	4628      	mov	r0, r5
 80a0eec:	f7ff f8dc 	bl	80a00a8 <__cxa_guard_release>
 80a0ef0:	4804      	ldr	r0, [pc, #16]	; (80a0f04 <_Z16_fetch_usbserialv+0x44>)
 80a0ef2:	f000 fa65 	bl	80a13c0 <atexit>
	return _usbserial;
}
 80a0ef6:	4802      	ldr	r0, [pc, #8]	; (80a0f00 <_Z16_fetch_usbserialv+0x40>)
 80a0ef8:	b007      	add	sp, #28
 80a0efa:	bd30      	pop	{r4, r5, pc}
 80a0efc:	200000d8 	.word	0x200000d8
 80a0f00:	200000e0 	.word	0x200000e0
 80a0f04:	080a0ded 	.word	0x080a0ded

080a0f08 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0f08:	b510      	push	{r4, lr}
 80a0f0a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0f0c:	2214      	movs	r2, #20
 80a0f0e:	2100      	movs	r1, #0
 80a0f10:	f000 fa6a 	bl	80a13e8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f14:	4b05      	ldr	r3, [pc, #20]	; (80a0f2c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f16:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f18:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0f1a:	4b05      	ldr	r3, [pc, #20]	; (80a0f30 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0f1c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f1e:	f240 1301 	movw	r3, #257	; 0x101
 80a0f22:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f24:	2381      	movs	r3, #129	; 0x81
 80a0f26:	8223      	strh	r3, [r4, #16]
}
 80a0f28:	bd10      	pop	{r4, pc}
 80a0f2a:	bf00      	nop
 80a0f2c:	2000028a 	.word	0x2000028a
 80a0f30:	2000038b 	.word	0x2000038b

080a0f34 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0f34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f36:	4c0e      	ldr	r4, [pc, #56]	; (80a0f70 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0f38:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f3a:	a801      	add	r0, sp, #4
 80a0f3c:	f7ff ffe4 	bl	80a0f08 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f40:	7823      	ldrb	r3, [r4, #0]
 80a0f42:	f3bf 8f5b 	dmb	ish
 80a0f46:	07db      	lsls	r3, r3, #31
 80a0f48:	d40e      	bmi.n	80a0f68 <_Z17_fetch_usbserial1v+0x34>
 80a0f4a:	4620      	mov	r0, r4
 80a0f4c:	f7ff f8a7 	bl	80a009e <__cxa_guard_acquire>
 80a0f50:	b150      	cbz	r0, 80a0f68 <_Z17_fetch_usbserial1v+0x34>
 80a0f52:	2101      	movs	r1, #1
 80a0f54:	aa01      	add	r2, sp, #4
 80a0f56:	4807      	ldr	r0, [pc, #28]	; (80a0f74 <_Z17_fetch_usbserial1v+0x40>)
 80a0f58:	f7ff ff84 	bl	80a0e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f5c:	4620      	mov	r0, r4
 80a0f5e:	f7ff f8a3 	bl	80a00a8 <__cxa_guard_release>
 80a0f62:	4805      	ldr	r0, [pc, #20]	; (80a0f78 <_Z17_fetch_usbserial1v+0x44>)
 80a0f64:	f000 fa2c 	bl	80a13c0 <atexit>
  return _usbserial1;
}
 80a0f68:	4802      	ldr	r0, [pc, #8]	; (80a0f74 <_Z17_fetch_usbserial1v+0x40>)
 80a0f6a:	b006      	add	sp, #24
 80a0f6c:	bd10      	pop	{r4, pc}
 80a0f6e:	bf00      	nop
 80a0f70:	200000dc 	.word	0x200000dc
 80a0f74:	200000f4 	.word	0x200000f4
 80a0f78:	080a0e63 	.word	0x080a0e63

080a0f7c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0f7c:	2200      	movs	r2, #0
 80a0f7e:	6840      	ldr	r0, [r0, #4]
 80a0f80:	4611      	mov	r1, r2
 80a0f82:	f7ff bccf 	b.w	80a0924 <network_ready>

080a0f86 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a0f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f88:	4615      	mov	r5, r2
 80a0f8a:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a0f8c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0f8e:	460e      	mov	r6, r1
 80a0f90:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0f92:	2100      	movs	r1, #0
 80a0f94:	a803      	add	r0, sp, #12
 80a0f96:	f000 fa27 	bl	80a13e8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0f9a:	4628      	mov	r0, r5
 80a0f9c:	f000 fa98 	bl	80a14d0 <strlen>
 80a0fa0:	2700      	movs	r7, #0
 80a0fa2:	b281      	uxth	r1, r0
 80a0fa4:	6873      	ldr	r3, [r6, #4]
 80a0fa6:	4628      	mov	r0, r5
 80a0fa8:	9700      	str	r7, [sp, #0]
 80a0faa:	aa03      	add	r2, sp, #12
 80a0fac:	f7ff fc6e 	bl	80a088c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0fb0:	b130      	cbz	r0, 80a0fc0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0fb2:	4639      	mov	r1, r7
 80a0fb4:	4620      	mov	r0, r4
 80a0fb6:	f7ff fda1 	bl	80a0afc <_ZN9IPAddressC1Em>
    }
 80a0fba:	4620      	mov	r0, r4
 80a0fbc:	b009      	add	sp, #36	; 0x24
 80a0fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0fc0:	4620      	mov	r0, r4
 80a0fc2:	a903      	add	r1, sp, #12
 80a0fc4:	f7ff fd88 	bl	80a0ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0fc8:	e7f7      	b.n	80a0fba <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0fca <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0fca:	2200      	movs	r2, #0
 80a0fcc:	6840      	ldr	r0, [r0, #4]
 80a0fce:	4611      	mov	r1, r2
 80a0fd0:	f7ff bcc8 	b.w	80a0964 <network_listening>

080a0fd4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0fd4:	2200      	movs	r2, #0
 80a0fd6:	6840      	ldr	r0, [r0, #4]
 80a0fd8:	4611      	mov	r1, r2
 80a0fda:	f7ff bcd3 	b.w	80a0984 <network_get_listen_timeout>

080a0fde <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0fde:	2200      	movs	r2, #0
 80a0fe0:	6840      	ldr	r0, [r0, #4]
 80a0fe2:	f7ff bcc7 	b.w	80a0974 <network_set_listen_timeout>

080a0fe6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0fe6:	2200      	movs	r2, #0
 80a0fe8:	6840      	ldr	r0, [r0, #4]
 80a0fea:	f081 0101 	eor.w	r1, r1, #1
 80a0fee:	f7ff bcb1 	b.w	80a0954 <network_listen>

080a0ff2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0ff2:	2300      	movs	r3, #0
 80a0ff4:	6840      	ldr	r0, [r0, #4]
 80a0ff6:	461a      	mov	r2, r3
 80a0ff8:	4619      	mov	r1, r3
 80a0ffa:	f7ff bca3 	b.w	80a0944 <network_off>

080a0ffe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0ffe:	2300      	movs	r3, #0
 80a1000:	6840      	ldr	r0, [r0, #4]
 80a1002:	461a      	mov	r2, r3
 80a1004:	4619      	mov	r1, r3
 80a1006:	f7ff bc95 	b.w	80a0934 <network_on>

080a100a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a100a:	2200      	movs	r2, #0
 80a100c:	6840      	ldr	r0, [r0, #4]
 80a100e:	4611      	mov	r1, r2
 80a1010:	f7ff bc78 	b.w	80a0904 <network_connecting>

080a1014 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1014:	2200      	movs	r2, #0
 80a1016:	2102      	movs	r1, #2
 80a1018:	6840      	ldr	r0, [r0, #4]
 80a101a:	f7ff bc7b 	b.w	80a0914 <network_disconnect>

080a101e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a101e:	2300      	movs	r3, #0
 80a1020:	6840      	ldr	r0, [r0, #4]
 80a1022:	461a      	mov	r2, r3
 80a1024:	f7ff bc66 	b.w	80a08f4 <network_connect>

080a1028 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1028:	2204      	movs	r2, #4
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a102c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a102e:	4a02      	ldr	r2, [pc, #8]	; (80a1038 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1030:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1032:	4770      	bx	lr
 80a1034:	2000040c 	.word	0x2000040c
 80a1038:	080a1800 	.word	0x080a1800

080a103c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a103c:	4b01      	ldr	r3, [pc, #4]	; (80a1044 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a103e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1040:	4770      	bx	lr
 80a1042:	bf00      	nop
 80a1044:	20000020 	.word	0x20000020

080a1048 <serialEventRun>:
{
 80a1048:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a104a:	4b13      	ldr	r3, [pc, #76]	; (80a1098 <serialEventRun+0x50>)
 80a104c:	b143      	cbz	r3, 80a1060 <serialEventRun+0x18>
 80a104e:	f7ff ff37 	bl	80a0ec0 <_Z16_fetch_usbserialv>
 80a1052:	6803      	ldr	r3, [r0, #0]
 80a1054:	691b      	ldr	r3, [r3, #16]
 80a1056:	4798      	blx	r3
 80a1058:	2800      	cmp	r0, #0
 80a105a:	dd01      	ble.n	80a1060 <serialEventRun+0x18>
        serialEvent();
 80a105c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1060:	4b0e      	ldr	r3, [pc, #56]	; (80a109c <serialEventRun+0x54>)
 80a1062:	b143      	cbz	r3, 80a1076 <serialEventRun+0x2e>
 80a1064:	f000 f986 	bl	80a1374 <_Z22__fetch_global_Serial1v>
 80a1068:	6803      	ldr	r3, [r0, #0]
 80a106a:	691b      	ldr	r3, [r3, #16]
 80a106c:	4798      	blx	r3
 80a106e:	2800      	cmp	r0, #0
 80a1070:	dd01      	ble.n	80a1076 <serialEventRun+0x2e>
        serialEvent1();
 80a1072:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1076:	4b0a      	ldr	r3, [pc, #40]	; (80a10a0 <serialEventRun+0x58>)
 80a1078:	b10b      	cbz	r3, 80a107e <serialEventRun+0x36>
 80a107a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a107e:	4b09      	ldr	r3, [pc, #36]	; (80a10a4 <serialEventRun+0x5c>)
 80a1080:	b143      	cbz	r3, 80a1094 <serialEventRun+0x4c>
 80a1082:	f7ff ff57 	bl	80a0f34 <_Z17_fetch_usbserial1v>
 80a1086:	6803      	ldr	r3, [r0, #0]
 80a1088:	691b      	ldr	r3, [r3, #16]
 80a108a:	4798      	blx	r3
 80a108c:	2800      	cmp	r0, #0
 80a108e:	dd01      	ble.n	80a1094 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1090:	f3af 8000 	nop.w
}
 80a1094:	bd08      	pop	{r3, pc}
 80a1096:	bf00      	nop
	...

080a10a8 <_post_loop>:
{
 80a10a8:	b508      	push	{r3, lr}
	serialEventRun();
 80a10aa:	f7ff ffcd 	bl	80a1048 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a10ae:	f7ff fb03 	bl	80a06b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a10b2:	4b01      	ldr	r3, [pc, #4]	; (80a10b8 <_post_loop+0x10>)
 80a10b4:	6018      	str	r0, [r3, #0]
}
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	2000042c 	.word	0x2000042c

080a10bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a10bc:	4805      	ldr	r0, [pc, #20]	; (80a10d4 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a10be:	4a06      	ldr	r2, [pc, #24]	; (80a10d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a10c0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a10c2:	1a12      	subs	r2, r2, r0
 80a10c4:	4905      	ldr	r1, [pc, #20]	; (80a10dc <_Z33system_initialize_user_backup_ramv+0x20>)
 80a10c6:	f000 f981 	bl	80a13cc <memcpy>
    __backup_sram_signature = signature;
 80a10ca:	4b05      	ldr	r3, [pc, #20]	; (80a10e0 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a10cc:	4a05      	ldr	r2, [pc, #20]	; (80a10e4 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a10ce:	601a      	str	r2, [r3, #0]
}
 80a10d0:	bd08      	pop	{r3, pc}
 80a10d2:	bf00      	nop
 80a10d4:	40024000 	.word	0x40024000
 80a10d8:	40024004 	.word	0x40024004
 80a10dc:	080a18d0 	.word	0x080a18d0
 80a10e0:	40024000 	.word	0x40024000
 80a10e4:	9a271c1e 	.word	0x9a271c1e

080a10e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10e8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a10ea:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10ec:	461a      	mov	r2, r3
 80a10ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10f2:	9300      	str	r3, [sp, #0]
 80a10f4:	f7ff fbec 	bl	80a08d0 <system_ctrl_set_result>
}
 80a10f8:	b003      	add	sp, #12
 80a10fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1100 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1100:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1102:	8843      	ldrh	r3, [r0, #2]
 80a1104:	2b0a      	cmp	r3, #10
 80a1106:	d008      	beq.n	80a111a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1108:	2b50      	cmp	r3, #80	; 0x50
 80a110a:	d10b      	bne.n	80a1124 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a110c:	4b09      	ldr	r3, [pc, #36]	; (80a1134 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a110e:	681b      	ldr	r3, [r3, #0]
 80a1110:	b14b      	cbz	r3, 80a1126 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1112:	b003      	add	sp, #12
 80a1114:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1118:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a111a:	f7ff ffe5 	bl	80a10e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a111e:	b003      	add	sp, #12
 80a1120:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1124:	2300      	movs	r3, #0
 80a1126:	461a      	mov	r2, r3
 80a1128:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a112c:	9300      	str	r3, [sp, #0]
 80a112e:	f7ff fbcf 	bl	80a08d0 <system_ctrl_set_result>
}
 80a1132:	e7f4      	b.n	80a111e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1134:	20000418 	.word	0x20000418

080a1138 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1138:	2100      	movs	r1, #0
{
 80a113a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a113c:	4811      	ldr	r0, [pc, #68]	; (80a1184 <module_user_init_hook+0x4c>)
 80a113e:	f7ff fc51 	bl	80a09e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1142:	4b11      	ldr	r3, [pc, #68]	; (80a1188 <module_user_init_hook+0x50>)
 80a1144:	681a      	ldr	r2, [r3, #0]
 80a1146:	4b11      	ldr	r3, [pc, #68]	; (80a118c <module_user_init_hook+0x54>)
 80a1148:	429a      	cmp	r2, r3
 80a114a:	bf0c      	ite	eq
 80a114c:	2201      	moveq	r2, #1
 80a114e:	2200      	movne	r2, #0
 80a1150:	4b0f      	ldr	r3, [pc, #60]	; (80a1190 <module_user_init_hook+0x58>)
 80a1152:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1154:	d001      	beq.n	80a115a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1156:	f7ff ffb1 	bl	80a10bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a115a:	f7ff faa5 	bl	80a06a8 <HAL_RNG_GetRandomNumber>
 80a115e:	4604      	mov	r4, r0
    srand(seed);
 80a1160:	f000 f94a 	bl	80a13f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1164:	4b0b      	ldr	r3, [pc, #44]	; (80a1194 <module_user_init_hook+0x5c>)
 80a1166:	b113      	cbz	r3, 80a116e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1168:	4620      	mov	r0, r4
 80a116a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a116e:	2100      	movs	r1, #0
 80a1170:	4808      	ldr	r0, [pc, #32]	; (80a1194 <module_user_init_hook+0x5c>)
 80a1172:	f7ff fbb7 	bl	80a08e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a117a:	2100      	movs	r1, #0
 80a117c:	4806      	ldr	r0, [pc, #24]	; (80a1198 <module_user_init_hook+0x60>)
 80a117e:	f7ff bb9d 	b.w	80a08bc <system_ctrl_set_app_request_handler>
 80a1182:	bf00      	nop
 80a1184:	080a103d 	.word	0x080a103d
 80a1188:	40024000 	.word	0x40024000
 80a118c:	9a271c1e 	.word	0x9a271c1e
 80a1190:	20000414 	.word	0x20000414
 80a1194:	00000000 	.word	0x00000000
 80a1198:	080a1101 	.word	0x080a1101

080a119c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a119c:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <__tcf_0+0xc>)
 80a119e:	6898      	ldr	r0, [r3, #8]
 80a11a0:	b108      	cbz	r0, 80a11a6 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a11a2:	f7ff ba79 	b.w	80a0698 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a11a6:	4770      	bx	lr
 80a11a8:	20000420 	.word	0x20000420

080a11ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a11ac:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a11ae:	b570      	push	{r4, r5, r6, lr}
 80a11b0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a11b2:	d901      	bls.n	80a11b8 <pinAvailable+0xc>
    return false;
 80a11b4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a11b6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a11b8:	f1a0 030d 	sub.w	r3, r0, #13
 80a11bc:	2b02      	cmp	r3, #2
 80a11be:	d90b      	bls.n	80a11d8 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a11c0:	2801      	cmp	r0, #1
 80a11c2:	d824      	bhi.n	80a120e <pinAvailable+0x62>
 80a11c4:	f000 f888 	bl	80a12d8 <_Z19__fetch_global_Wirev>
 80a11c8:	2100      	movs	r1, #0
 80a11ca:	7c00      	ldrb	r0, [r0, #16]
 80a11cc:	f7ff fac4 	bl	80a0758 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a11d0:	f080 0001 	eor.w	r0, r0, #1
 80a11d4:	b2c0      	uxtb	r0, r0
 80a11d6:	e7ee      	b.n	80a11b6 <pinAvailable+0xa>
 80a11d8:	4e12      	ldr	r6, [pc, #72]	; (80a1224 <pinAvailable+0x78>)
 80a11da:	7831      	ldrb	r1, [r6, #0]
 80a11dc:	f3bf 8f5b 	dmb	ish
 80a11e0:	f011 0501 	ands.w	r5, r1, #1
 80a11e4:	d10d      	bne.n	80a1202 <pinAvailable+0x56>
 80a11e6:	4630      	mov	r0, r6
 80a11e8:	f7fe ff59 	bl	80a009e <__cxa_guard_acquire>
 80a11ec:	b148      	cbz	r0, 80a1202 <pinAvailable+0x56>
 80a11ee:	4629      	mov	r1, r5
 80a11f0:	480d      	ldr	r0, [pc, #52]	; (80a1228 <pinAvailable+0x7c>)
 80a11f2:	f7ff fd7d 	bl	80a0cf0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a11f6:	4630      	mov	r0, r6
 80a11f8:	f7fe ff56 	bl	80a00a8 <__cxa_guard_release>
 80a11fc:	480b      	ldr	r0, [pc, #44]	; (80a122c <pinAvailable+0x80>)
 80a11fe:	f000 f8df 	bl	80a13c0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1202:	4b09      	ldr	r3, [pc, #36]	; (80a1228 <pinAvailable+0x7c>)
 80a1204:	7818      	ldrb	r0, [r3, #0]
 80a1206:	f7ff fac1 	bl	80a078c <hal_spi_is_enabled>
 80a120a:	2800      	cmp	r0, #0
 80a120c:	d1d2      	bne.n	80a11b4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a120e:	3c12      	subs	r4, #18
 80a1210:	2c01      	cmp	r4, #1
 80a1212:	d805      	bhi.n	80a1220 <pinAvailable+0x74>
 80a1214:	f000 f8ae 	bl	80a1374 <_Z22__fetch_global_Serial1v>
 80a1218:	7c00      	ldrb	r0, [r0, #16]
 80a121a:	f7ff fae7 	bl	80a07ec <hal_usart_is_enabled>
 80a121e:	e7d7      	b.n	80a11d0 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1220:	2001      	movs	r0, #1
 80a1222:	e7c8      	b.n	80a11b6 <pinAvailable+0xa>
 80a1224:	2000041c 	.word	0x2000041c
 80a1228:	20000420 	.word	0x20000420
 80a122c:	080a119d 	.word	0x080a119d

080a1230 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1230:	2817      	cmp	r0, #23
{
 80a1232:	b538      	push	{r3, r4, r5, lr}
 80a1234:	4604      	mov	r4, r0
 80a1236:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1238:	d80a      	bhi.n	80a1250 <pinMode+0x20>
 80a123a:	29ff      	cmp	r1, #255	; 0xff
 80a123c:	d008      	beq.n	80a1250 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a123e:	f7ff ffb5 	bl	80a11ac <pinAvailable>
 80a1242:	b128      	cbz	r0, 80a1250 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1244:	4629      	mov	r1, r5
 80a1246:	4620      	mov	r0, r4
}
 80a1248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a124c:	f7ff ba3c 	b.w	80a06c8 <HAL_Pin_Mode>
}
 80a1250:	bd38      	pop	{r3, r4, r5, pc}

080a1252 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1252:	b538      	push	{r3, r4, r5, lr}
 80a1254:	4604      	mov	r4, r0
 80a1256:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1258:	f7ff fa3e 	bl	80a06d8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a125c:	28ff      	cmp	r0, #255	; 0xff
 80a125e:	d010      	beq.n	80a1282 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1260:	2806      	cmp	r0, #6
 80a1262:	d804      	bhi.n	80a126e <digitalWrite+0x1c>
 80a1264:	234d      	movs	r3, #77	; 0x4d
 80a1266:	fa23 f000 	lsr.w	r0, r3, r0
 80a126a:	07c3      	lsls	r3, r0, #31
 80a126c:	d409      	bmi.n	80a1282 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff ff9c 	bl	80a11ac <pinAvailable>
 80a1274:	b128      	cbz	r0, 80a1282 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1276:	4629      	mov	r1, r5
 80a1278:	4620      	mov	r0, r4
}
 80a127a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a127e:	f7ff ba33 	b.w	80a06e8 <HAL_GPIO_Write>
}
 80a1282:	bd38      	pop	{r3, r4, r5, pc}

080a1284 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1284:	b510      	push	{r4, lr}
 80a1286:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1288:	f7ff fa26 	bl	80a06d8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a128c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a128e:	b2db      	uxtb	r3, r3
 80a1290:	2b01      	cmp	r3, #1
 80a1292:	d908      	bls.n	80a12a6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1294:	4620      	mov	r0, r4
 80a1296:	f7ff ff89 	bl	80a11ac <pinAvailable>
 80a129a:	b120      	cbz	r0, 80a12a6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a129c:	4620      	mov	r0, r4
}
 80a129e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a12a2:	f7ff ba29 	b.w	80a06f8 <HAL_GPIO_Read>
}
 80a12a6:	2000      	movs	r0, #0
 80a12a8:	bd10      	pop	{r4, pc}

080a12aa <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12aa:	4770      	bx	lr

080a12ac <_Z17acquireWireBufferv>:
{
 80a12ac:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a12ae:	2314      	movs	r3, #20
 80a12b0:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12b2:	4e08      	ldr	r6, [pc, #32]	; (80a12d4 <_Z17acquireWireBufferv+0x28>)
{
 80a12b4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a12b6:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12b8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a12ba:	6085      	str	r5, [r0, #8]
 80a12bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12be:	4628      	mov	r0, r5
 80a12c0:	f000 f87c 	bl	80a13bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12c4:	4631      	mov	r1, r6
	};
 80a12c6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12c8:	4628      	mov	r0, r5
 80a12ca:	f000 f877 	bl	80a13bc <_ZnajRKSt9nothrow_t>
	};
 80a12ce:	60e0      	str	r0, [r4, #12]
}
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	bd70      	pop	{r4, r5, r6, pc}
 80a12d4:	080a1834 	.word	0x080a1834

080a12d8 <_Z19__fetch_global_Wirev>:
{
 80a12d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12da:	4d0e      	ldr	r5, [pc, #56]	; (80a1314 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a12dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12de:	7829      	ldrb	r1, [r5, #0]
 80a12e0:	f3bf 8f5b 	dmb	ish
 80a12e4:	f011 0401 	ands.w	r4, r1, #1
 80a12e8:	d111      	bne.n	80a130e <_Z19__fetch_global_Wirev+0x36>
 80a12ea:	4628      	mov	r0, r5
 80a12ec:	f7fe fed7 	bl	80a009e <__cxa_guard_acquire>
 80a12f0:	b168      	cbz	r0, 80a130e <_Z19__fetch_global_Wirev+0x36>
 80a12f2:	a801      	add	r0, sp, #4
 80a12f4:	f7ff ffda 	bl	80a12ac <_Z17acquireWireBufferv>
 80a12f8:	4621      	mov	r1, r4
 80a12fa:	aa01      	add	r2, sp, #4
 80a12fc:	4806      	ldr	r0, [pc, #24]	; (80a1318 <_Z19__fetch_global_Wirev+0x40>)
 80a12fe:	f7ff fba9 	bl	80a0a54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1302:	4628      	mov	r0, r5
 80a1304:	f7fe fed0 	bl	80a00a8 <__cxa_guard_release>
 80a1308:	4804      	ldr	r0, [pc, #16]	; (80a131c <_Z19__fetch_global_Wirev+0x44>)
 80a130a:	f000 f859 	bl	80a13c0 <atexit>
	return wire;
}
 80a130e:	4802      	ldr	r0, [pc, #8]	; (80a1318 <_Z19__fetch_global_Wirev+0x40>)
 80a1310:	b007      	add	sp, #28
 80a1312:	bd30      	pop	{r4, r5, pc}
 80a1314:	20000430 	.word	0x20000430
 80a1318:	20000434 	.word	0x20000434
 80a131c:	080a12ab 	.word	0x080a12ab

080a1320 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1320:	2300      	movs	r3, #0
 80a1322:	b507      	push	{r0, r1, r2, lr}
 80a1324:	461a      	mov	r2, r3
 80a1326:	4619      	mov	r1, r3
 80a1328:	9300      	str	r3, [sp, #0]
 80a132a:	4803      	ldr	r0, [pc, #12]	; (80a1338 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a132c:	f7ff fbfc 	bl	80a0b28 <_ZN9IPAddressC1Ehhhh>
 80a1330:	b003      	add	sp, #12
 80a1332:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1336:	bf00      	nop
 80a1338:	20000448 	.word	0x20000448

080a133c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a133c:	4770      	bx	lr
	...

080a1340 <_Z20acquireSerial1Bufferv>:
{
 80a1340:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1342:	2514      	movs	r5, #20
{
 80a1344:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1346:	462a      	mov	r2, r5
 80a1348:	2100      	movs	r1, #0
 80a134a:	f000 f84d 	bl	80a13e8 <memset>
 80a134e:	8025      	strh	r5, [r4, #0]
 80a1350:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1352:	4e07      	ldr	r6, [pc, #28]	; (80a1370 <_Z20acquireSerial1Bufferv+0x30>)
 80a1354:	4628      	mov	r0, r5
 80a1356:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1358:	8125      	strh	r5, [r4, #8]
 80a135a:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a135c:	f000 f82e 	bl	80a13bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1360:	4631      	mov	r1, r6
    };
 80a1362:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1364:	4628      	mov	r0, r5
 80a1366:	f000 f829 	bl	80a13bc <_ZnajRKSt9nothrow_t>
    };
 80a136a:	60e0      	str	r0, [r4, #12]
}
 80a136c:	4620      	mov	r0, r4
 80a136e:	bd70      	pop	{r4, r5, r6, pc}
 80a1370:	080a1834 	.word	0x080a1834

080a1374 <_Z22__fetch_global_Serial1v>:
{
 80a1374:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1376:	4d0e      	ldr	r5, [pc, #56]	; (80a13b0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1378:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a137a:	7829      	ldrb	r1, [r5, #0]
 80a137c:	f3bf 8f5b 	dmb	ish
 80a1380:	f011 0401 	ands.w	r4, r1, #1
 80a1384:	d111      	bne.n	80a13aa <_Z22__fetch_global_Serial1v+0x36>
 80a1386:	4628      	mov	r0, r5
 80a1388:	f7fe fe89 	bl	80a009e <__cxa_guard_acquire>
 80a138c:	b168      	cbz	r0, 80a13aa <_Z22__fetch_global_Serial1v+0x36>
 80a138e:	a801      	add	r0, sp, #4
 80a1390:	f7ff ffd6 	bl	80a1340 <_Z20acquireSerial1Bufferv>
 80a1394:	4621      	mov	r1, r4
 80a1396:	aa01      	add	r2, sp, #4
 80a1398:	4806      	ldr	r0, [pc, #24]	; (80a13b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a139a:	f7ff fd11 	bl	80a0dc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a139e:	4628      	mov	r0, r5
 80a13a0:	f7fe fe82 	bl	80a00a8 <__cxa_guard_release>
 80a13a4:	4804      	ldr	r0, [pc, #16]	; (80a13b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a13a6:	f000 f80b 	bl	80a13c0 <atexit>
    return serial1;
}
 80a13aa:	4802      	ldr	r0, [pc, #8]	; (80a13b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a13ac:	b007      	add	sp, #28
 80a13ae:	bd30      	pop	{r4, r5, pc}
 80a13b0:	20000460 	.word	0x20000460
 80a13b4:	20000464 	.word	0x20000464
 80a13b8:	080a133d 	.word	0x080a133d

080a13bc <_ZnajRKSt9nothrow_t>:
 80a13bc:	f7fe be6b 	b.w	80a0096 <_Znaj>

080a13c0 <atexit>:
 80a13c0:	2300      	movs	r3, #0
 80a13c2:	4601      	mov	r1, r0
 80a13c4:	461a      	mov	r2, r3
 80a13c6:	4618      	mov	r0, r3
 80a13c8:	f000 b88a 	b.w	80a14e0 <__register_exitproc>

080a13cc <memcpy>:
 80a13cc:	440a      	add	r2, r1
 80a13ce:	4291      	cmp	r1, r2
 80a13d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a13d4:	d100      	bne.n	80a13d8 <memcpy+0xc>
 80a13d6:	4770      	bx	lr
 80a13d8:	b510      	push	{r4, lr}
 80a13da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a13de:	4291      	cmp	r1, r2
 80a13e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a13e4:	d1f9      	bne.n	80a13da <memcpy+0xe>
 80a13e6:	bd10      	pop	{r4, pc}

080a13e8 <memset>:
 80a13e8:	4603      	mov	r3, r0
 80a13ea:	4402      	add	r2, r0
 80a13ec:	4293      	cmp	r3, r2
 80a13ee:	d100      	bne.n	80a13f2 <memset+0xa>
 80a13f0:	4770      	bx	lr
 80a13f2:	f803 1b01 	strb.w	r1, [r3], #1
 80a13f6:	e7f9      	b.n	80a13ec <memset+0x4>

080a13f8 <srand>:
 80a13f8:	b538      	push	{r3, r4, r5, lr}
 80a13fa:	4b10      	ldr	r3, [pc, #64]	; (80a143c <srand+0x44>)
 80a13fc:	4604      	mov	r4, r0
 80a13fe:	681d      	ldr	r5, [r3, #0]
 80a1400:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1402:	b9b3      	cbnz	r3, 80a1432 <srand+0x3a>
 80a1404:	2018      	movs	r0, #24
 80a1406:	f7ff fad5 	bl	80a09b4 <malloc>
 80a140a:	4602      	mov	r2, r0
 80a140c:	63a8      	str	r0, [r5, #56]	; 0x38
 80a140e:	b920      	cbnz	r0, 80a141a <srand+0x22>
 80a1410:	2142      	movs	r1, #66	; 0x42
 80a1412:	4b0b      	ldr	r3, [pc, #44]	; (80a1440 <srand+0x48>)
 80a1414:	480b      	ldr	r0, [pc, #44]	; (80a1444 <srand+0x4c>)
 80a1416:	f7ff fadd 	bl	80a09d4 <__assert_func>
 80a141a:	490b      	ldr	r1, [pc, #44]	; (80a1448 <srand+0x50>)
 80a141c:	4b0b      	ldr	r3, [pc, #44]	; (80a144c <srand+0x54>)
 80a141e:	e9c0 1300 	strd	r1, r3, [r0]
 80a1422:	4b0b      	ldr	r3, [pc, #44]	; (80a1450 <srand+0x58>)
 80a1424:	2100      	movs	r1, #0
 80a1426:	6083      	str	r3, [r0, #8]
 80a1428:	230b      	movs	r3, #11
 80a142a:	8183      	strh	r3, [r0, #12]
 80a142c:	2001      	movs	r0, #1
 80a142e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a1432:	2200      	movs	r2, #0
 80a1434:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1436:	611c      	str	r4, [r3, #16]
 80a1438:	615a      	str	r2, [r3, #20]
 80a143a:	bd38      	pop	{r3, r4, r5, pc}
 80a143c:	20000020 	.word	0x20000020
 80a1440:	080a1835 	.word	0x080a1835
 80a1444:	080a184c 	.word	0x080a184c
 80a1448:	abcd330e 	.word	0xabcd330e
 80a144c:	e66d1234 	.word	0xe66d1234
 80a1450:	0005deec 	.word	0x0005deec

080a1454 <rand>:
 80a1454:	4b16      	ldr	r3, [pc, #88]	; (80a14b0 <rand+0x5c>)
 80a1456:	b510      	push	{r4, lr}
 80a1458:	681c      	ldr	r4, [r3, #0]
 80a145a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a145c:	b9b3      	cbnz	r3, 80a148c <rand+0x38>
 80a145e:	2018      	movs	r0, #24
 80a1460:	f7ff faa8 	bl	80a09b4 <malloc>
 80a1464:	4602      	mov	r2, r0
 80a1466:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1468:	b920      	cbnz	r0, 80a1474 <rand+0x20>
 80a146a:	214e      	movs	r1, #78	; 0x4e
 80a146c:	4b11      	ldr	r3, [pc, #68]	; (80a14b4 <rand+0x60>)
 80a146e:	4812      	ldr	r0, [pc, #72]	; (80a14b8 <rand+0x64>)
 80a1470:	f7ff fab0 	bl	80a09d4 <__assert_func>
 80a1474:	4911      	ldr	r1, [pc, #68]	; (80a14bc <rand+0x68>)
 80a1476:	4b12      	ldr	r3, [pc, #72]	; (80a14c0 <rand+0x6c>)
 80a1478:	e9c0 1300 	strd	r1, r3, [r0]
 80a147c:	4b11      	ldr	r3, [pc, #68]	; (80a14c4 <rand+0x70>)
 80a147e:	2100      	movs	r1, #0
 80a1480:	6083      	str	r3, [r0, #8]
 80a1482:	230b      	movs	r3, #11
 80a1484:	8183      	strh	r3, [r0, #12]
 80a1486:	2001      	movs	r0, #1
 80a1488:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a148c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a148e:	4a0e      	ldr	r2, [pc, #56]	; (80a14c8 <rand+0x74>)
 80a1490:	6920      	ldr	r0, [r4, #16]
 80a1492:	6963      	ldr	r3, [r4, #20]
 80a1494:	4342      	muls	r2, r0
 80a1496:	490d      	ldr	r1, [pc, #52]	; (80a14cc <rand+0x78>)
 80a1498:	fb01 2203 	mla	r2, r1, r3, r2
 80a149c:	fba0 0101 	umull	r0, r1, r0, r1
 80a14a0:	1c43      	adds	r3, r0, #1
 80a14a2:	eb42 0001 	adc.w	r0, r2, r1
 80a14a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80a14aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a14ae:	bd10      	pop	{r4, pc}
 80a14b0:	20000020 	.word	0x20000020
 80a14b4:	080a1835 	.word	0x080a1835
 80a14b8:	080a184c 	.word	0x080a184c
 80a14bc:	abcd330e 	.word	0xabcd330e
 80a14c0:	e66d1234 	.word	0xe66d1234
 80a14c4:	0005deec 	.word	0x0005deec
 80a14c8:	5851f42d 	.word	0x5851f42d
 80a14cc:	4c957f2d 	.word	0x4c957f2d

080a14d0 <strlen>:
 80a14d0:	4603      	mov	r3, r0
 80a14d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a14d6:	2a00      	cmp	r2, #0
 80a14d8:	d1fb      	bne.n	80a14d2 <strlen+0x2>
 80a14da:	1a18      	subs	r0, r3, r0
 80a14dc:	3801      	subs	r0, #1
 80a14de:	4770      	bx	lr

080a14e0 <__register_exitproc>:
 80a14e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a14e4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a1594 <__register_exitproc+0xb4>
 80a14e8:	4606      	mov	r6, r0
 80a14ea:	f8d8 0000 	ldr.w	r0, [r8]
 80a14ee:	461f      	mov	r7, r3
 80a14f0:	460d      	mov	r5, r1
 80a14f2:	4691      	mov	r9, r2
 80a14f4:	f000 f858 	bl	80a15a8 <__retarget_lock_acquire_recursive>
 80a14f8:	4b27      	ldr	r3, [pc, #156]	; (80a1598 <__register_exitproc+0xb8>)
 80a14fa:	681c      	ldr	r4, [r3, #0]
 80a14fc:	b934      	cbnz	r4, 80a150c <__register_exitproc+0x2c>
 80a14fe:	4c27      	ldr	r4, [pc, #156]	; (80a159c <__register_exitproc+0xbc>)
 80a1500:	601c      	str	r4, [r3, #0]
 80a1502:	4b27      	ldr	r3, [pc, #156]	; (80a15a0 <__register_exitproc+0xc0>)
 80a1504:	b113      	cbz	r3, 80a150c <__register_exitproc+0x2c>
 80a1506:	681b      	ldr	r3, [r3, #0]
 80a1508:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a150c:	6863      	ldr	r3, [r4, #4]
 80a150e:	2b1f      	cmp	r3, #31
 80a1510:	dd07      	ble.n	80a1522 <__register_exitproc+0x42>
 80a1512:	f8d8 0000 	ldr.w	r0, [r8]
 80a1516:	f000 f849 	bl	80a15ac <__retarget_lock_release_recursive>
 80a151a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a151e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1522:	b35e      	cbz	r6, 80a157c <__register_exitproc+0x9c>
 80a1524:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1528:	b988      	cbnz	r0, 80a154e <__register_exitproc+0x6e>
 80a152a:	4b1e      	ldr	r3, [pc, #120]	; (80a15a4 <__register_exitproc+0xc4>)
 80a152c:	b923      	cbnz	r3, 80a1538 <__register_exitproc+0x58>
 80a152e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1532:	f000 f83a 	bl	80a15aa <__retarget_lock_release>
 80a1536:	e7f0      	b.n	80a151a <__register_exitproc+0x3a>
 80a1538:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a153c:	f7ff fa3a 	bl	80a09b4 <malloc>
 80a1540:	2800      	cmp	r0, #0
 80a1542:	d0f4      	beq.n	80a152e <__register_exitproc+0x4e>
 80a1544:	2300      	movs	r3, #0
 80a1546:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a154a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a154e:	2201      	movs	r2, #1
 80a1550:	6863      	ldr	r3, [r4, #4]
 80a1552:	2e02      	cmp	r6, #2
 80a1554:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1558:	fa02 f203 	lsl.w	r2, r2, r3
 80a155c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1560:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1564:	ea43 0302 	orr.w	r3, r3, r2
 80a1568:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a156c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1570:	bf02      	ittt	eq
 80a1572:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1576:	4313      	orreq	r3, r2
 80a1578:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a157c:	6863      	ldr	r3, [r4, #4]
 80a157e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1582:	1c5a      	adds	r2, r3, #1
 80a1584:	3302      	adds	r3, #2
 80a1586:	6062      	str	r2, [r4, #4]
 80a1588:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a158c:	f000 f80e 	bl	80a15ac <__retarget_lock_release_recursive>
 80a1590:	2000      	movs	r0, #0
 80a1592:	e7c4      	b.n	80a151e <__register_exitproc+0x3e>
 80a1594:	20000084 	.word	0x20000084
 80a1598:	20000504 	.word	0x20000504
 80a159c:	20000478 	.word	0x20000478
 80a15a0:	00000000 	.word	0x00000000
 80a15a4:	080a09b5 	.word	0x080a09b5

080a15a8 <__retarget_lock_acquire_recursive>:
 80a15a8:	4770      	bx	lr

080a15aa <__retarget_lock_release>:
 80a15aa:	4770      	bx	lr

080a15ac <__retarget_lock_release_recursive>:
 80a15ac:	4770      	bx	lr

080a15ae <link_code_end>:
	...

080a15b0 <dynalib_user>:
 80a15b0:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a15c0:	0000 0000 6c42 6575 6220 7475 6f74 206e     ....Blue button 
 80a15d0:	7270 7365 2073 6564 6574 7463 6465 202e     press detected. 
 80a15e0:	7453 7261 2074 6874 2065 6167 656d 0021     Start the game!.
 80a15f0:	6f48 646c 7420 6568 6720 6572 6e65 6220     Hold the green b
 80a1600:	7475 6f74 2e6e 2000 6f4e 7020 696f 746e     utton.. No point
 80a1610:	2073 7761 7261 6564 0064 5220 7365 7274     s awarded. Restr
 80a1620:	6961 746e 7020 696f 746e 6120 6177 6472     aint point award
 80a1630:	6465 5300 6d69 6e6f 7320 7961 2073 6f68     ed.Simon says ho
 80a1640:	646c 7420 6568 6720 6572 6e65 6220 7475     ld the green but
 80a1650:	6f74 2e6e 2000 2031 6f70 6e69 2074 7761     ton.. 1 point aw
 80a1660:	7261 6564 0064 6953 6f6d 206e 6173 7379     arded.Simon says
 80a1670:	6820 6c6f 2064 6874 2065 6579 6c6c 776f      hold the yellow
 80a1680:	6220 7475 6f74 2e6e 5000 6572 7373 7420      button..Press t
 80a1690:	6568 7220 6465 6220 7475 6f74 006e 6953     he red button.Si
 80a16a0:	6f6d 206e 6173 7379 6820 6c6f 2064 6874     mon says hold th
 80a16b0:	2065 6572 2064 7562 7474 6e6f 5300 6d6f     e red button.Som
 80a16c0:	7465 6968 676e 7720 6e65 2074 7277 6e6f     ething went wron
 80a16d0:	0067 6c42 6575 6220 7475 6f74 206e 7270     g.Blue button pr
 80a16e0:	7365 2073 6564 6574 7463 6465 202e 6e45     ess detected. En
 80a16f0:	6574 2072 6469 656c 6d20 646f 0065 0000     ter idle mode...

080a1700 <_ZTV7TwoWire>:
	...
 80a1708:	09fb 080a 0a45 080a 0a1d 080a 09fd 080a     ....E...........
 80a1718:	0a25 080a 0a2d 080a 0a35 080a 0a3d 080a     %...-...5...=...

080a1728 <_ZTV9IPAddress>:
	...
 80a1730:	0a7b 080a 0a79 080a 0aad 080a 7061 0070     {...y.......app.

080a1740 <_ZTVN5spark12NetworkClassE>:
	...
 80a1748:	0b51 080a 0b5b 080a 0b65 080a 0b6f 080a     Q...[...e...o...
 80a1758:	0b79 080a 0b85 080a 0b91 080a 0b99 080a     y...............
 80a1768:	0ba1 080a 0bad 080a 0bb5 080a 0bbf 080a     ................
 80a1778:	0bc9 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a1788:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1798 <_ZTV11USARTSerial>:
	...
 80a17a0:	0d49 080a 0db1 080a 0d8d 080a 0c2d 080a     I...........-...
 80a17b0:	0d5d 080a 0d79 080a 0d6b 080a 0d87 080a     ]...y...k.......
 80a17c0:	0d4b 080a 0d4f 080a                         K...O...

080a17c8 <_ZTV9USBSerial>:
	...
 80a17d0:	0def 080a 0e55 080a 0e2d 080a 0c2d 080a     ....U...-...-...
 80a17e0:	0e1f 080a 0df1 080a 0e01 080a 0e4f 080a     ............O...
 80a17f0:	0e11 080a 0de9 080a                         ........

080a17f8 <_ZTVN5spark9WiFiClassE>:
	...
 80a1800:	101f 080a 1015 080a 100b 080a 0f7d 080a     ............}...
 80a1810:	0fff 080a 0ff3 080a 0b91 080a 0b99 080a     ................
 80a1820:	0fe7 080a 0fdf 080a 0fd5 080a 0fcb 080a     ................
 80a1830:	0f87 080a                                   ....

080a1834 <_ZSt7nothrow>:
 80a1834:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a1844:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 80a1854:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80a1864:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80a1874:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 80a1884:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80a1894:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

080a18a5 <link_const_variable_data_end>:
 80a18a5:	00          	.byte	0x00
	...

080a18a8 <link_constructors_location>:
 80a18a8:	080a0b41 	.word	0x080a0b41
 80a18ac:	080a0c19 	.word	0x080a0c19
 80a18b0:	080a0ce5 	.word	0x080a0ce5
 80a18b4:	080a0d11 	.word	0x080a0d11
 80a18b8:	080a0d35 	.word	0x080a0d35
 80a18bc:	080a1029 	.word	0x080a1029
 80a18c0:	080a1321 	.word	0x080a1321

080a18c4 <link_constructors_end>:
	...
