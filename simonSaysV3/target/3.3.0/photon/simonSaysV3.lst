
/Users/parttimeidiot/EE1301/simonSaysV3/target/3.3.0/photon/simonSaysV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ad4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1af0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a1af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000488  20000088  20000088  00030088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1b7c  080a1b7c  00021b7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1ba4  080a1ba4  00021ba4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00098afc  00000000  00000000  00021ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000dbf2  00000000  00000000  000ba6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000121ea  00000000  00000000  000c8296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001af8  00000000  00000000  000da480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003b00  00000000  00000000  000dbf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000247e9  00000000  00000000  000dfa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000252ce  00000000  00000000  00104261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000afec3  00000000  00000000  0012952f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004208  00000000  00000000  001d93f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fadb 	bl	80a15e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fae3 	bl	80a1604 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1af4 	.word	0x080a1af4
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	2000050d 	.word	0x2000050d
 80a0058:	2000050d 	.word	0x2000050d

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f979 	bl	80a1354 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1ad0 	.word	0x080a1ad0
 80a0080:	080a1aec 	.word	0x080a1aec

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f94f 	bl	80a032c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 b917 	b.w	80a12c4 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bd97 	b.w	80a0bc8 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 bd9d 	b.w	80a0bd8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
unsigned long int timeToToggleLED;
bool startGame = FALSE;

// setup() runs once, when the device is first turned on.
void setup()
{
 80a00b0:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Particle.variable("intVal", points);

  pinMode(ledB, OUTPUT);
 80a00b2:	4c23      	ldr	r4, [pc, #140]	; (80a0140 <setup+0x90>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a00b4:	2202      	movs	r2, #2
 80a00b6:	2300      	movs	r3, #0
 80a00b8:	4922      	ldr	r1, [pc, #136]	; (80a0144 <setup+0x94>)
 80a00ba:	4823      	ldr	r0, [pc, #140]	; (80a0148 <setup+0x98>)
 80a00bc:	f000 fd14 	bl	80a0ae8 <spark_variable>
 80a00c0:	8820      	ldrh	r0, [r4, #0]
 80a00c2:	2101      	movs	r1, #1
 80a00c4:	f001 f9c2 	bl	80a144c <pinMode>
  digitalWrite(ledB, LOW);
 80a00c8:	8820      	ldrh	r0, [r4, #0]
  pinMode(ledG, OUTPUT);
 80a00ca:	4c20      	ldr	r4, [pc, #128]	; (80a014c <setup+0x9c>)
  digitalWrite(ledB, LOW);
 80a00cc:	2100      	movs	r1, #0
 80a00ce:	f001 f9ce 	bl	80a146e <digitalWrite>
  pinMode(ledG, OUTPUT);
 80a00d2:	8820      	ldrh	r0, [r4, #0]
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	f001 f9b9 	bl	80a144c <pinMode>
  digitalWrite(ledG, LOW);
 80a00da:	8820      	ldrh	r0, [r4, #0]
  pinMode(ledY, OUTPUT);
 80a00dc:	4c1c      	ldr	r4, [pc, #112]	; (80a0150 <setup+0xa0>)
  digitalWrite(ledG, LOW);
 80a00de:	2100      	movs	r1, #0
 80a00e0:	f001 f9c5 	bl	80a146e <digitalWrite>
  pinMode(ledY, OUTPUT);
 80a00e4:	8820      	ldrh	r0, [r4, #0]
 80a00e6:	2101      	movs	r1, #1
 80a00e8:	f001 f9b0 	bl	80a144c <pinMode>
  digitalWrite(ledY, LOW);
 80a00ec:	8820      	ldrh	r0, [r4, #0]
  pinMode(ledR, OUTPUT);
 80a00ee:	4c19      	ldr	r4, [pc, #100]	; (80a0154 <setup+0xa4>)
  digitalWrite(ledY, LOW);
 80a00f0:	2100      	movs	r1, #0
 80a00f2:	f001 f9bc 	bl	80a146e <digitalWrite>
  pinMode(ledR, OUTPUT);
 80a00f6:	8820      	ldrh	r0, [r4, #0]
 80a00f8:	2101      	movs	r1, #1
 80a00fa:	f001 f9a7 	bl	80a144c <pinMode>
  digitalWrite(ledR, LOW);
 80a00fe:	8820      	ldrh	r0, [r4, #0]
 80a0100:	2100      	movs	r1, #0
 80a0102:	f001 f9b4 	bl	80a146e <digitalWrite>

  // timeToToggleLED = millis() + 1000;
  pinMode(buttonB, INPUT_PULLDOWN);
 80a0106:	4b14      	ldr	r3, [pc, #80]	; (80a0158 <setup+0xa8>)
 80a0108:	2103      	movs	r1, #3
 80a010a:	8818      	ldrh	r0, [r3, #0]
 80a010c:	f001 f99e 	bl	80a144c <pinMode>
  pinMode(buttonG, INPUT_PULLDOWN); // INPUT mode with internal pull-down resistor
 80a0110:	4b12      	ldr	r3, [pc, #72]	; (80a015c <setup+0xac>)
 80a0112:	2103      	movs	r1, #3
 80a0114:	8818      	ldrh	r0, [r3, #0]
 80a0116:	f001 f999 	bl	80a144c <pinMode>
  pinMode(buttonY, INPUT_PULLDOWN);
 80a011a:	4b11      	ldr	r3, [pc, #68]	; (80a0160 <setup+0xb0>)
 80a011c:	2103      	movs	r1, #3
 80a011e:	8818      	ldrh	r0, [r3, #0]
 80a0120:	f001 f994 	bl	80a144c <pinMode>
  pinMode(buttonR, INPUT_PULLDOWN);
 80a0124:	4b0f      	ldr	r3, [pc, #60]	; (80a0164 <setup+0xb4>)
 80a0126:	2103      	movs	r1, #3
 80a0128:	8818      	ldrh	r0, [r3, #0]
 80a012a:	f001 f98f 	bl	80a144c <pinMode>

  Serial.begin(9600);
 80a012e:	f000 ffd5 	bl	80a10dc <_Z16_fetch_usbserialv>
}
 80a0132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.begin(9600);
 80a0136:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a013a:	f000 bfb5 	b.w	80a10a8 <_ZN9USBSerial5beginEl>
 80a013e:	bf00      	nop
 80a0140:	2000000c 	.word	0x2000000c
 80a0144:	20000090 	.word	0x20000090
 80a0148:	080a17e0 	.word	0x080a17e0
 80a014c:	20000010 	.word	0x20000010
 80a0150:	20000018 	.word	0x20000018
 80a0154:	20000014 	.word	0x20000014
 80a0158:	2000008c 	.word	0x2000008c
 80a015c:	20000000 	.word	0x20000000
 80a0160:	20000008 	.word	0x20000008
 80a0164:	20000004 	.word	0x20000004

080a0168 <_Z8gameOverv>:

void gameOver() // signals an incorrect input and the resulting game over mode
{
 80a0168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(ledB, HIGH);
 80a016a:	4f3c      	ldr	r7, [pc, #240]	; (80a025c <_Z8gameOverv+0xf4>)
  digitalWrite(ledG, HIGH);
 80a016c:	4e3c      	ldr	r6, [pc, #240]	; (80a0260 <_Z8gameOverv+0xf8>)
  digitalWrite(ledY, HIGH);
 80a016e:	4d3d      	ldr	r5, [pc, #244]	; (80a0264 <_Z8gameOverv+0xfc>)
  digitalWrite(ledB, HIGH);
 80a0170:	8838      	ldrh	r0, [r7, #0]
 80a0172:	2101      	movs	r1, #1
  digitalWrite(ledR, HIGH);
 80a0174:	4c3c      	ldr	r4, [pc, #240]	; (80a0268 <_Z8gameOverv+0x100>)
  digitalWrite(ledB, HIGH);
 80a0176:	f001 f97a 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, HIGH);
 80a017a:	8830      	ldrh	r0, [r6, #0]
 80a017c:	2101      	movs	r1, #1
 80a017e:	f001 f976 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, HIGH);
 80a0182:	8828      	ldrh	r0, [r5, #0]
 80a0184:	2101      	movs	r1, #1
 80a0186:	f001 f972 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, HIGH);
 80a018a:	2101      	movs	r1, #1
 80a018c:	8820      	ldrh	r0, [r4, #0]
 80a018e:	f001 f96e 	bl	80a146e <digitalWrite>
  delay(100);
 80a0192:	2064      	movs	r0, #100	; 0x64
 80a0194:	f000 fd38 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a0198:	8838      	ldrh	r0, [r7, #0]
 80a019a:	2100      	movs	r1, #0
 80a019c:	f001 f967 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, LOW);
 80a01a0:	8830      	ldrh	r0, [r6, #0]
 80a01a2:	2100      	movs	r1, #0
 80a01a4:	f001 f963 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, LOW);
 80a01a8:	8828      	ldrh	r0, [r5, #0]
 80a01aa:	2100      	movs	r1, #0
 80a01ac:	f001 f95f 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, LOW);
 80a01b0:	2100      	movs	r1, #0
 80a01b2:	8820      	ldrh	r0, [r4, #0]
 80a01b4:	f001 f95b 	bl	80a146e <digitalWrite>
  delay(100);
 80a01b8:	2064      	movs	r0, #100	; 0x64
 80a01ba:	f000 fd25 	bl	80a0c08 <delay>
  digitalWrite(ledB, HIGH);
 80a01be:	8838      	ldrh	r0, [r7, #0]
 80a01c0:	2101      	movs	r1, #1
 80a01c2:	f001 f954 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, HIGH);
 80a01c6:	8830      	ldrh	r0, [r6, #0]
 80a01c8:	2101      	movs	r1, #1
 80a01ca:	f001 f950 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, HIGH);
 80a01ce:	8828      	ldrh	r0, [r5, #0]
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	f001 f94c 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, HIGH);
 80a01d6:	2101      	movs	r1, #1
 80a01d8:	8820      	ldrh	r0, [r4, #0]
 80a01da:	f001 f948 	bl	80a146e <digitalWrite>
  delay(100);
 80a01de:	2064      	movs	r0, #100	; 0x64
 80a01e0:	f000 fd12 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a01e4:	8838      	ldrh	r0, [r7, #0]
 80a01e6:	2100      	movs	r1, #0
 80a01e8:	f001 f941 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, LOW);
 80a01ec:	8830      	ldrh	r0, [r6, #0]
 80a01ee:	2100      	movs	r1, #0
 80a01f0:	f001 f93d 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, LOW);
 80a01f4:	8828      	ldrh	r0, [r5, #0]
 80a01f6:	2100      	movs	r1, #0
 80a01f8:	f001 f939 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, LOW);
 80a01fc:	2100      	movs	r1, #0
 80a01fe:	8820      	ldrh	r0, [r4, #0]
 80a0200:	f001 f935 	bl	80a146e <digitalWrite>
  delay(100);
 80a0204:	2064      	movs	r0, #100	; 0x64
 80a0206:	f000 fcff 	bl	80a0c08 <delay>
  digitalWrite(ledB, HIGH);
 80a020a:	8838      	ldrh	r0, [r7, #0]
 80a020c:	2101      	movs	r1, #1
 80a020e:	f001 f92e 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, HIGH);
 80a0212:	8830      	ldrh	r0, [r6, #0]
 80a0214:	2101      	movs	r1, #1
 80a0216:	f001 f92a 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, HIGH);
 80a021a:	8828      	ldrh	r0, [r5, #0]
 80a021c:	2101      	movs	r1, #1
 80a021e:	f001 f926 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, HIGH);
 80a0222:	2101      	movs	r1, #1
 80a0224:	8820      	ldrh	r0, [r4, #0]
 80a0226:	f001 f922 	bl	80a146e <digitalWrite>
  delay(100);
 80a022a:	2064      	movs	r0, #100	; 0x64
 80a022c:	f000 fcec 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a0230:	8838      	ldrh	r0, [r7, #0]
 80a0232:	2100      	movs	r1, #0
 80a0234:	f001 f91b 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, LOW);
 80a0238:	8830      	ldrh	r0, [r6, #0]
 80a023a:	2100      	movs	r1, #0
 80a023c:	f001 f917 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, LOW);
 80a0240:	8828      	ldrh	r0, [r5, #0]
 80a0242:	2100      	movs	r1, #0
 80a0244:	f001 f913 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, LOW);
 80a0248:	8820      	ldrh	r0, [r4, #0]
 80a024a:	2100      	movs	r1, #0
 80a024c:	f001 f90f 	bl	80a146e <digitalWrite>
  delay(100);
}
 80a0250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(100);
 80a0254:	2064      	movs	r0, #100	; 0x64
 80a0256:	f000 bcd7 	b.w	80a0c08 <delay>
 80a025a:	bf00      	nop
 80a025c:	2000000c 	.word	0x2000000c
 80a0260:	20000010 	.word	0x20000010
 80a0264:	20000018 	.word	0x20000018
 80a0268:	20000014 	.word	0x20000014

080a026c <_Z14startingLightsv>:

void startingLights() // signals the start of the game, watch LEDS
{
 80a026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(ledB, LOW);
 80a026e:	4f2b      	ldr	r7, [pc, #172]	; (80a031c <_Z14startingLightsv+0xb0>)
  digitalWrite(ledG, HIGH);
 80a0270:	4e2b      	ldr	r6, [pc, #172]	; (80a0320 <_Z14startingLightsv+0xb4>)
  digitalWrite(ledY, LOW);
 80a0272:	4d2c      	ldr	r5, [pc, #176]	; (80a0324 <_Z14startingLightsv+0xb8>)
  digitalWrite(ledB, LOW);
 80a0274:	8838      	ldrh	r0, [r7, #0]
 80a0276:	2100      	movs	r1, #0
  digitalWrite(ledR, LOW);
 80a0278:	4c2b      	ldr	r4, [pc, #172]	; (80a0328 <_Z14startingLightsv+0xbc>)
  digitalWrite(ledB, LOW);
 80a027a:	f001 f8f8 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, HIGH);
 80a027e:	8830      	ldrh	r0, [r6, #0]
 80a0280:	2101      	movs	r1, #1
 80a0282:	f001 f8f4 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, LOW);
 80a0286:	8828      	ldrh	r0, [r5, #0]
 80a0288:	2100      	movs	r1, #0
 80a028a:	f001 f8f0 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, LOW);
 80a028e:	2100      	movs	r1, #0
 80a0290:	8820      	ldrh	r0, [r4, #0]
 80a0292:	f001 f8ec 	bl	80a146e <digitalWrite>
  delay(1000);
 80a0296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a029a:	f000 fcb5 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a029e:	8838      	ldrh	r0, [r7, #0]
 80a02a0:	2100      	movs	r1, #0
 80a02a2:	f001 f8e4 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, LOW);
 80a02a6:	8830      	ldrh	r0, [r6, #0]
 80a02a8:	2100      	movs	r1, #0
 80a02aa:	f001 f8e0 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, HIGH);
 80a02ae:	8828      	ldrh	r0, [r5, #0]
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	f001 f8dc 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, LOW);
 80a02b6:	2100      	movs	r1, #0
 80a02b8:	8820      	ldrh	r0, [r4, #0]
 80a02ba:	f001 f8d8 	bl	80a146e <digitalWrite>
  delay(1000);
 80a02be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02c2:	f000 fca1 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a02c6:	8838      	ldrh	r0, [r7, #0]
 80a02c8:	2100      	movs	r1, #0
 80a02ca:	f001 f8d0 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, LOW);
 80a02ce:	8830      	ldrh	r0, [r6, #0]
 80a02d0:	2100      	movs	r1, #0
 80a02d2:	f001 f8cc 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, LOW);
 80a02d6:	8828      	ldrh	r0, [r5, #0]
 80a02d8:	2100      	movs	r1, #0
 80a02da:	f001 f8c8 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, HIGH);
 80a02de:	2101      	movs	r1, #1
 80a02e0:	8820      	ldrh	r0, [r4, #0]
 80a02e2:	f001 f8c4 	bl	80a146e <digitalWrite>
  delay(1000);
 80a02e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02ea:	f000 fc8d 	bl	80a0c08 <delay>
  digitalWrite(ledB, LOW);
 80a02ee:	8838      	ldrh	r0, [r7, #0]
 80a02f0:	2100      	movs	r1, #0
 80a02f2:	f001 f8bc 	bl	80a146e <digitalWrite>
  digitalWrite(ledG, HIGH);
 80a02f6:	8830      	ldrh	r0, [r6, #0]
 80a02f8:	2101      	movs	r1, #1
 80a02fa:	f001 f8b8 	bl	80a146e <digitalWrite>
  digitalWrite(ledY, HIGH);
 80a02fe:	8828      	ldrh	r0, [r5, #0]
 80a0300:	2101      	movs	r1, #1
 80a0302:	f001 f8b4 	bl	80a146e <digitalWrite>
  digitalWrite(ledR, HIGH);
 80a0306:	8820      	ldrh	r0, [r4, #0]
 80a0308:	2101      	movs	r1, #1
 80a030a:	f001 f8b0 	bl	80a146e <digitalWrite>
  delay(1000);
}
 80a030e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 80a0312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0316:	f000 bc77 	b.w	80a0c08 <delay>
 80a031a:	bf00      	nop
 80a031c:	2000000c 	.word	0x2000000c
 80a0320:	20000010 	.word	0x20000010
 80a0324:	20000018 	.word	0x20000018
 80a0328:	20000014 	.word	0x20000014

080a032c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a032c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0330:	f000 fac4 	bl	80a08bc <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.

  unsigned long int currentTime = millis();
  int change = 1000;
  int curB = digitalRead(buttonB);
 80a0334:	4bb6      	ldr	r3, [pc, #728]	; (80a0610 <loop+0x2e4>)
 80a0336:	4682      	mov	sl, r0
 80a0338:	8818      	ldrh	r0, [r3, #0]
 80a033a:	f001 f8b1 	bl	80a14a0 <digitalRead>

  if (startGame == FALSE)
 80a033e:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80a0614 <loop+0x2e8>
  int curB = digitalRead(buttonB);
 80a0342:	4604      	mov	r4, r0
  if (startGame == FALSE)
 80a0344:	f899 3000 	ldrb.w	r3, [r9]
 80a0348:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80a0618 <loop+0x2ec>
 80a034c:	4db3      	ldr	r5, [pc, #716]	; (80a061c <loop+0x2f0>)
 80a034e:	2b00      	cmp	r3, #0
 80a0350:	f040 808d 	bne.w	80a046e <loop+0x142>
  {                                  // the idle light sequence while a game is not being played.
    int curG = digitalRead(buttonG); // reading button inputs
 80a0354:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0358:	f001 f8a2 	bl	80a14a0 <digitalRead>
    int curY = digitalRead(buttonY);
 80a035c:	4bb0      	ldr	r3, [pc, #704]	; (80a0620 <loop+0x2f4>)
    int curG = digitalRead(buttonG); // reading button inputs
 80a035e:	4680      	mov	r8, r0
    int curY = digitalRead(buttonY);
 80a0360:	8818      	ldrh	r0, [r3, #0]
 80a0362:	f001 f89d 	bl	80a14a0 <digitalRead>
    int curR = digitalRead(buttonR);
 80a0366:	4baf      	ldr	r3, [pc, #700]	; (80a0624 <loop+0x2f8>)
    int curY = digitalRead(buttonY);
 80a0368:	4607      	mov	r7, r0
    int curR = digitalRead(buttonR);
 80a036a:	8818      	ldrh	r0, [r3, #0]
 80a036c:	f001 f898 	bl	80a14a0 <digitalRead>

    if (currentTime > timeToToggleLED)
 80a0370:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 80a0628 <loop+0x2fc>
    int curR = digitalRead(buttonR);
 80a0374:	4606      	mov	r6, r0
    if (currentTime > timeToToggleLED)
 80a0376:	f8db 3000 	ldr.w	r3, [fp]
 80a037a:	4553      	cmp	r3, sl
 80a037c:	d229      	bcs.n	80a03d2 <loop+0xa6>
    {
      // Time to Toggle!
      LED_stateB = !LED_stateB;
 80a037e:	4bab      	ldr	r3, [pc, #684]	; (80a062c <loop+0x300>)
 80a0380:	7819      	ldrb	r1, [r3, #0]
 80a0382:	f081 0101 	eor.w	r1, r1, #1
 80a0386:	7019      	strb	r1, [r3, #0]
      digitalWrite(ledB, LED_stateB);
 80a0388:	4ba9      	ldr	r3, [pc, #676]	; (80a0630 <loop+0x304>)
 80a038a:	8818      	ldrh	r0, [r3, #0]
 80a038c:	f001 f86f 	bl	80a146e <digitalWrite>
      LED_stateG = !LED_stateG;
 80a0390:	4ba8      	ldr	r3, [pc, #672]	; (80a0634 <loop+0x308>)
 80a0392:	7819      	ldrb	r1, [r3, #0]
 80a0394:	f081 0101 	eor.w	r1, r1, #1
 80a0398:	7019      	strb	r1, [r3, #0]
      digitalWrite(ledG, LED_stateG);
 80a039a:	4ba7      	ldr	r3, [pc, #668]	; (80a0638 <loop+0x30c>)
 80a039c:	8818      	ldrh	r0, [r3, #0]
 80a039e:	f001 f866 	bl	80a146e <digitalWrite>
      LED_stateY = !LED_stateY;
 80a03a2:	4ba6      	ldr	r3, [pc, #664]	; (80a063c <loop+0x310>)
 80a03a4:	7819      	ldrb	r1, [r3, #0]
 80a03a6:	f081 0101 	eor.w	r1, r1, #1
 80a03aa:	7019      	strb	r1, [r3, #0]
      digitalWrite(ledY, LED_stateY);
 80a03ac:	4ba4      	ldr	r3, [pc, #656]	; (80a0640 <loop+0x314>)
 80a03ae:	8818      	ldrh	r0, [r3, #0]
 80a03b0:	f001 f85d 	bl	80a146e <digitalWrite>
      LED_stateR = !LED_stateR;
 80a03b4:	4ba3      	ldr	r3, [pc, #652]	; (80a0644 <loop+0x318>)
 80a03b6:	7819      	ldrb	r1, [r3, #0]
 80a03b8:	f081 0101 	eor.w	r1, r1, #1
 80a03bc:	7019      	strb	r1, [r3, #0]
      digitalWrite(ledR, LED_stateR);
 80a03be:	4ba2      	ldr	r3, [pc, #648]	; (80a0648 <loop+0x31c>)
 80a03c0:	8818      	ldrh	r0, [r3, #0]
 80a03c2:	f001 f854 	bl	80a146e <digitalWrite>

      // Calculate and store the next time to toggle the LED
      timeToToggleLED += change;
 80a03c6:	f8db 3000 	ldr.w	r3, [fp]
 80a03ca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80a03ce:	f8cb 3000 	str.w	r3, [fp]
    }
    if (curB == HIGH && prevBlue == LOW)
 80a03d2:	2c01      	cmp	r4, #1
 80a03d4:	d10f      	bne.n	80a03f6 <loop+0xca>
 80a03d6:	682b      	ldr	r3, [r5, #0]
 80a03d8:	b96b      	cbnz	r3, 80a03f6 <loop+0xca>
    {
      // a transition happened -- the user has just pressed the button
      Serial.println("Blue button press detected. Start the game!"); // Debugging printout
 80a03da:	f000 fe7f 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a03de:	499b      	ldr	r1, [pc, #620]	; (80a064c <loop+0x320>)
 80a03e0:	f000 fd67 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
      startGame = !startGame;
 80a03e4:	f899 3000 	ldrb.w	r3, [r9]
      prevBlue = curB;
 80a03e8:	602c      	str	r4, [r5, #0]
      startGame = !startGame;
 80a03ea:	f083 0301 	eor.w	r3, r3, #1
 80a03ee:	f889 3000 	strb.w	r3, [r9]

      startingLights();
 80a03f2:	f7ff ff3b 	bl	80a026c <_Z14startingLightsv>
    }
    if (curG == HIGH || curY == HIGH || curR == HIGH)
 80a03f6:	f1b8 0f01 	cmp.w	r8, #1
 80a03fa:	d003      	beq.n	80a0404 <loop+0xd8>
 80a03fc:	2f01      	cmp	r7, #1
 80a03fe:	d001      	beq.n	80a0404 <loop+0xd8>
 80a0400:	2e01      	cmp	r6, #1
 80a0402:	d116      	bne.n	80a0432 <loop+0x106>
    {
      Serial.print("Points = ");
 80a0404:	f000 fe6a 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0408:	4991      	ldr	r1, [pc, #580]	; (80a0650 <loop+0x324>)
 80a040a:	f000 fd3f 	bl	80a0e8c <_ZN5Print5printEPKc>
      Serial.println(points);
 80a040e:	f000 fe65 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0412:	4b90      	ldr	r3, [pc, #576]	; (80a0654 <loop+0x328>)
 80a0414:	4605      	mov	r5, r0
 80a0416:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0418:	2c00      	cmp	r4, #0
 80a041a:	da26      	bge.n	80a046a <loop+0x13e>
            t = print('-');
 80a041c:	212d      	movs	r1, #45	; 0x2d
 80a041e:	f000 fd39 	bl	80a0e94 <_ZN5Print5printEc>
            val = -n;
 80a0422:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0424:	220a      	movs	r2, #10
 80a0426:	4628      	mov	r0, r5
 80a0428:	f000 fd4d 	bl	80a0ec6 <_ZN5Print11printNumberEmh>
        n += println();
 80a042c:	4628      	mov	r0, r5
 80a042e:	f000 fd34 	bl	80a0e9a <_ZN5Print7printlnEv>
    prevGreen = curG;
    prevYellow = curY;
    prevRed = curR;
  }

  curB = digitalRead(buttonB);
 80a0432:	4b77      	ldr	r3, [pc, #476]	; (80a0610 <loop+0x2e4>)
 80a0434:	4d79      	ldr	r5, [pc, #484]	; (80a061c <loop+0x2f0>)
 80a0436:	8818      	ldrh	r0, [r3, #0]
 80a0438:	f001 f832 	bl	80a14a0 <digitalRead>
  if (curB == HIGH && prevBlue == LOW) // Push the blue button to switch to idle mode
 80a043c:	2801      	cmp	r0, #1
  curB = digitalRead(buttonB);
 80a043e:	4604      	mov	r4, r0
  if (curB == HIGH && prevBlue == LOW) // Push the blue button to switch to idle mode
 80a0440:	d10b      	bne.n	80a045a <loop+0x12e>
 80a0442:	682b      	ldr	r3, [r5, #0]
 80a0444:	b94b      	cbnz	r3, 80a045a <loop+0x12e>
  {
    // a transition happened -- the user has just pressed the blue button
    Serial.println("Blue button press detected. Enter idle mode"); // Debugging printout
 80a0446:	f000 fe49 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a044a:	4983      	ldr	r1, [pc, #524]	; (80a0658 <loop+0x32c>)
 80a044c:	f000 fd31 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
    startGame = !startGame;
 80a0450:	4a70      	ldr	r2, [pc, #448]	; (80a0614 <loop+0x2e8>)
 80a0452:	7813      	ldrb	r3, [r2, #0]
 80a0454:	f083 0301 	eor.w	r3, r3, #1
 80a0458:	7013      	strb	r3, [r2, #0]
  }

  delay(1000);
 80a045a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a045e:	f000 fbd3 	bl	80a0c08 <delay>
  prevBlue = curB;
 80a0462:	602c      	str	r4, [r5, #0]
 80a0464:	b003      	add	sp, #12
 80a0466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            val = n;
 80a046a:	4621      	mov	r1, r4
 80a046c:	e7da      	b.n	80a0424 <loop+0xf8>
    prevBlue = FALSE;                // to make sure that the if statement directs here when it initially enters this part of the if statement
 80a046e:	2700      	movs	r7, #0
    int curG = digitalRead(buttonG); // reading button inputs
 80a0470:	f8b8 0000 	ldrh.w	r0, [r8]
    prevBlue = FALSE;                // to make sure that the if statement directs here when it initially enters this part of the if statement
 80a0474:	602f      	str	r7, [r5, #0]
    int curG = digitalRead(buttonG); // reading button inputs
 80a0476:	f001 f813 	bl	80a14a0 <digitalRead>
    int curY = digitalRead(buttonY);
 80a047a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80a0620 <loop+0x2f4>
    int curG = digitalRead(buttonG); // reading button inputs
 80a047e:	4606      	mov	r6, r0
    int curY = digitalRead(buttonY);
 80a0480:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0484:	f001 f80c 	bl	80a14a0 <digitalRead>
    int curR = digitalRead(buttonR);
 80a0488:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80a0624 <loop+0x2f8>
    int curY = digitalRead(buttonY);
 80a048c:	4605      	mov	r5, r0
    int curR = digitalRead(buttonR);
 80a048e:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0492:	f001 f805 	bl	80a14a0 <digitalRead>
    digitalWrite(ledB, LOW); // keeps all LEDs off for the game to work
 80a0496:	f8df b198 	ldr.w	fp, [pc, #408]	; 80a0630 <loop+0x304>
 80a049a:	4639      	mov	r1, r7
    int curR = digitalRead(buttonR);
 80a049c:	4604      	mov	r4, r0
    digitalWrite(ledB, LOW); // keeps all LEDs off for the game to work
 80a049e:	f8bb 0000 	ldrh.w	r0, [fp]
 80a04a2:	f000 ffe4 	bl	80a146e <digitalWrite>
    digitalWrite(ledG, LOW);
 80a04a6:	4a64      	ldr	r2, [pc, #400]	; (80a0638 <loop+0x30c>)
 80a04a8:	4639      	mov	r1, r7
 80a04aa:	8810      	ldrh	r0, [r2, #0]
 80a04ac:	f000 ffdf 	bl	80a146e <digitalWrite>
    digitalWrite(ledY, LOW);
 80a04b0:	4b63      	ldr	r3, [pc, #396]	; (80a0640 <loop+0x314>)
 80a04b2:	4639      	mov	r1, r7
 80a04b4:	8818      	ldrh	r0, [r3, #0]
 80a04b6:	f000 ffda 	bl	80a146e <digitalWrite>
    digitalWrite(ledR, LOW);
 80a04ba:	4b63      	ldr	r3, [pc, #396]	; (80a0648 <loop+0x31c>)
 80a04bc:	4639      	mov	r1, r7
 80a04be:	8818      	ldrh	r0, [r3, #0]
 80a04c0:	f000 ffd5 	bl	80a146e <digitalWrite>
    delay(500);
 80a04c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a04c8:	f000 fb9e 	bl	80a0c08 <delay>
    int simon = rand() % 2; // if simon = 0, then simon does not say. Otherwise, he does.
 80a04cc:	f001 f8d0 	bl	80a1670 <rand>
 80a04d0:	9000      	str	r0, [sp, #0]
    int light = rand() % 3; // determines which light will be the focus of the round. 0 = green, 1 = yellow, 2 = red
 80a04d2:	f001 f8cd 	bl	80a1670 <rand>
 80a04d6:	2103      	movs	r1, #3
 80a04d8:	fb90 f1f1 	sdiv	r1, r0, r1
 80a04dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a04e0:	1a41      	subs	r1, r0, r1
    switch (light)
 80a04e2:	2901      	cmp	r1, #1
 80a04e4:	4b56      	ldr	r3, [pc, #344]	; (80a0640 <loop+0x314>)
 80a04e6:	f000 80cb 	beq.w	80a0680 <loop+0x354>
 80a04ea:	2902      	cmp	r1, #2
 80a04ec:	f000 813a 	beq.w	80a0764 <loop+0x438>
 80a04f0:	4a51      	ldr	r2, [pc, #324]	; (80a0638 <loop+0x30c>)
 80a04f2:	2900      	cmp	r1, #0
 80a04f4:	f040 8196 	bne.w	80a0824 <loop+0x4f8>
      digitalWrite(ledG, HIGH); // turn on the green LED
 80a04f8:	8810      	ldrh	r0, [r2, #0]
 80a04fa:	2101      	movs	r1, #1
 80a04fc:	f000 ffb7 	bl	80a146e <digitalWrite>
      delay(50);
 80a0500:	2032      	movs	r0, #50	; 0x32
 80a0502:	f000 fb81 	bl	80a0c08 <delay>
      if (simon == 0) // simon does not say
 80a0506:	9b00      	ldr	r3, [sp, #0]
 80a0508:	07da      	lsls	r2, r3, #31
 80a050a:	d446      	bmi.n	80a059a <loop+0x26e>
        Serial.println("Hold the green button.");
 80a050c:	f000 fde6 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0510:	4952      	ldr	r1, [pc, #328]	; (80a065c <loop+0x330>)
 80a0512:	f000 fcce 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        delay(2500); // Gives time for the user to make an appropriate input
 80a0516:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a051a:	f000 fb75 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a051e:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0522:	f000 ffbd 	bl	80a14a0 <digitalRead>
 80a0526:	4606      	mov	r6, r0
        curY = digitalRead(buttonY);
 80a0528:	f8ba 0000 	ldrh.w	r0, [sl]
 80a052c:	f000 ffb8 	bl	80a14a0 <digitalRead>
 80a0530:	4605      	mov	r5, r0
        curR = digitalRead(buttonR);
 80a0532:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0536:	f000 ffb3 	bl	80a14a0 <digitalRead>
        if (curG == HIGH || curY == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a053a:	2e01      	cmp	r6, #1
        curR = digitalRead(buttonR);
 80a053c:	4604      	mov	r4, r0
        if (curG == HIGH || curY == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a053e:	d003      	beq.n	80a0548 <loop+0x21c>
 80a0540:	2d01      	cmp	r5, #1
 80a0542:	d001      	beq.n	80a0548 <loop+0x21c>
 80a0544:	2801      	cmp	r0, #1
 80a0546:	d11e      	bne.n	80a0586 <loop+0x25a>
          Serial.println(" No points awarded"); // Debugging printout
 80a0548:	f000 fdc8 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a054c:	4944      	ldr	r1, [pc, #272]	; (80a0660 <loop+0x334>)
 80a054e:	f000 fcb0 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          gameOver();
 80a0552:	f7ff fe09 	bl	80a0168 <_Z8gameOverv>
          startGame = !startGame;
 80a0556:	4a2f      	ldr	r2, [pc, #188]	; (80a0614 <loop+0x2e8>)
 80a0558:	7813      	ldrb	r3, [r2, #0]
 80a055a:	f083 0301 	eor.w	r3, r3, #1
 80a055e:	7013      	strb	r3, [r2, #0]
      delay(50);
 80a0560:	2032      	movs	r0, #50	; 0x32
      delay(100);
 80a0562:	f000 fb51 	bl	80a0c08 <delay>
    Serial.println("");
 80a0566:	f000 fdb9 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a056a:	493e      	ldr	r1, [pc, #248]	; (80a0664 <loop+0x338>)
 80a056c:	f000 fca1 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
    delay(1000); // A pause in between rounds.
 80a0570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0574:	f000 fb48 	bl	80a0c08 <delay>
    prevGreen = curG;
 80a0578:	4b3b      	ldr	r3, [pc, #236]	; (80a0668 <loop+0x33c>)
 80a057a:	601e      	str	r6, [r3, #0]
    prevYellow = curY;
 80a057c:	4b3b      	ldr	r3, [pc, #236]	; (80a066c <loop+0x340>)
 80a057e:	601d      	str	r5, [r3, #0]
    prevRed = curR;
 80a0580:	4b3b      	ldr	r3, [pc, #236]	; (80a0670 <loop+0x344>)
 80a0582:	601c      	str	r4, [r3, #0]
 80a0584:	e755      	b.n	80a0432 <loop+0x106>
          Serial.println(" One point awarded");
 80a0586:	f000 fda9 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a058a:	493a      	ldr	r1, [pc, #232]	; (80a0674 <loop+0x348>)
 80a058c:	f000 fc91 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          points++;
 80a0590:	4a30      	ldr	r2, [pc, #192]	; (80a0654 <loop+0x328>)
 80a0592:	6813      	ldr	r3, [r2, #0]
 80a0594:	3301      	adds	r3, #1
 80a0596:	6013      	str	r3, [r2, #0]
 80a0598:	e7e2      	b.n	80a0560 <loop+0x234>
        Serial.println("Simon says hold the green button.");
 80a059a:	f000 fd9f 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a059e:	4936      	ldr	r1, [pc, #216]	; (80a0678 <loop+0x34c>)
 80a05a0:	f000 fc87 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        digitalWrite(ledB, HIGH); // turn on the simon LED
 80a05a4:	2101      	movs	r1, #1
 80a05a6:	f8bb 0000 	ldrh.w	r0, [fp]
 80a05aa:	f000 ff60 	bl	80a146e <digitalWrite>
        delay(2500);                 // Gives time for the user to make an appropriate input
 80a05ae:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a05b2:	f000 fb29 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a05b6:	f8b8 0000 	ldrh.w	r0, [r8]
 80a05ba:	f000 ff71 	bl	80a14a0 <digitalRead>
 80a05be:	4606      	mov	r6, r0
        curY = digitalRead(buttonY);
 80a05c0:	f8ba 0000 	ldrh.w	r0, [sl]
 80a05c4:	f000 ff6c 	bl	80a14a0 <digitalRead>
 80a05c8:	4607      	mov	r7, r0
        curR = digitalRead(buttonR);
 80a05ca:	f8b9 0000 	ldrh.w	r0, [r9]
 80a05ce:	f000 ff67 	bl	80a14a0 <digitalRead>
        if (curG == HIGH && curY == LOW && curR == LOW)
 80a05d2:	2e01      	cmp	r6, #1
        curR = digitalRead(buttonR);
 80a05d4:	4604      	mov	r4, r0
        if (curG == HIGH && curY == LOW && curR == LOW)
 80a05d6:	d10d      	bne.n	80a05f4 <loop+0x2c8>
 80a05d8:	ea57 0500 	orrs.w	r5, r7, r0
 80a05dc:	d10a      	bne.n	80a05f4 <loop+0x2c8>
          Serial.println(" 1 point awarded"); // Debugging printout
 80a05de:	f000 fd7d 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a05e2:	4926      	ldr	r1, [pc, #152]	; (80a067c <loop+0x350>)
 80a05e4:	f000 fc65 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          points++;
 80a05e8:	4a1a      	ldr	r2, [pc, #104]	; (80a0654 <loop+0x328>)
        curR = digitalRead(buttonR);
 80a05ea:	462c      	mov	r4, r5
          points++;
 80a05ec:	6813      	ldr	r3, [r2, #0]
 80a05ee:	3301      	adds	r3, #1
 80a05f0:	6013      	str	r3, [r2, #0]
 80a05f2:	e7b5      	b.n	80a0560 <loop+0x234>
          Serial.println(" No points awarded"); // Debugging printout
 80a05f4:	f000 fd72 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a05f8:	4919      	ldr	r1, [pc, #100]	; (80a0660 <loop+0x334>)
 80a05fa:	f000 fc5a 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          gameOver();
 80a05fe:	f7ff fdb3 	bl	80a0168 <_Z8gameOverv>
          startGame = !startGame;
 80a0602:	4a04      	ldr	r2, [pc, #16]	; (80a0614 <loop+0x2e8>)
        curY = digitalRead(buttonY);
 80a0604:	463d      	mov	r5, r7
          startGame = !startGame;
 80a0606:	7813      	ldrb	r3, [r2, #0]
 80a0608:	f083 0301 	eor.w	r3, r3, #1
 80a060c:	7013      	strb	r3, [r2, #0]
 80a060e:	e7a7      	b.n	80a0560 <loop+0x234>
 80a0610:	2000008c 	.word	0x2000008c
 80a0614:	200000a4 	.word	0x200000a4
 80a0618:	20000000 	.word	0x20000000
 80a061c:	20000094 	.word	0x20000094
 80a0620:	20000008 	.word	0x20000008
 80a0624:	20000004 	.word	0x20000004
 80a0628:	200000a8 	.word	0x200000a8
 80a062c:	20000088 	.word	0x20000088
 80a0630:	2000000c 	.word	0x2000000c
 80a0634:	20000089 	.word	0x20000089
 80a0638:	20000010 	.word	0x20000010
 80a063c:	2000008b 	.word	0x2000008b
 80a0640:	20000018 	.word	0x20000018
 80a0644:	2000008a 	.word	0x2000008a
 80a0648:	20000014 	.word	0x20000014
 80a064c:	080a17e7 	.word	0x080a17e7
 80a0650:	080a1813 	.word	0x080a1813
 80a0654:	20000090 	.word	0x20000090
 80a0658:	080a18f9 	.word	0x080a18f9
 80a065c:	080a181d 	.word	0x080a181d
 80a0660:	080a1834 	.word	0x080a1834
 80a0664:	080a181c 	.word	0x080a181c
 80a0668:	20000098 	.word	0x20000098
 80a066c:	200000a0 	.word	0x200000a0
 80a0670:	2000009c 	.word	0x2000009c
 80a0674:	080a1847 	.word	0x080a1847
 80a0678:	080a185a 	.word	0x080a185a
 80a067c:	080a187c 	.word	0x080a187c
      digitalWrite(ledY, HIGH);
 80a0680:	8818      	ldrh	r0, [r3, #0]
 80a0682:	9101      	str	r1, [sp, #4]
 80a0684:	f000 fef3 	bl	80a146e <digitalWrite>
      delay(50);
 80a0688:	2032      	movs	r0, #50	; 0x32
 80a068a:	f000 fabd 	bl	80a0c08 <delay>
      if (simon == 0)
 80a068e:	9b00      	ldr	r3, [sp, #0]
 80a0690:	9901      	ldr	r1, [sp, #4]
 80a0692:	f013 0f01 	tst.w	r3, #1
 80a0696:	d12a      	bne.n	80a06ee <loop+0x3c2>
        Serial.println("hold the yellow button.");
 80a0698:	f000 fd20 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a069c:	496e      	ldr	r1, [pc, #440]	; (80a0858 <loop+0x52c>)
 80a069e:	f000 fc08 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        delay(2500);
 80a06a2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a06a6:	f000 faaf 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a06aa:	f8b8 0000 	ldrh.w	r0, [r8]
 80a06ae:	f000 fef7 	bl	80a14a0 <digitalRead>
 80a06b2:	4606      	mov	r6, r0
        curY = digitalRead(buttonY);
 80a06b4:	f8ba 0000 	ldrh.w	r0, [sl]
 80a06b8:	f000 fef2 	bl	80a14a0 <digitalRead>
 80a06bc:	4605      	mov	r5, r0
        curR = digitalRead(buttonR);
 80a06be:	f8b9 0000 	ldrh.w	r0, [r9]
 80a06c2:	f000 feed 	bl	80a14a0 <digitalRead>
        if (curY == HIGH || curG == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a06c6:	2d01      	cmp	r5, #1
        curR = digitalRead(buttonR);
 80a06c8:	4604      	mov	r4, r0
        if (curY == HIGH || curG == HIGH || curR == HIGH) // user presses any button (they currently should not)
 80a06ca:	d003      	beq.n	80a06d4 <loop+0x3a8>
 80a06cc:	2e01      	cmp	r6, #1
 80a06ce:	d001      	beq.n	80a06d4 <loop+0x3a8>
 80a06d0:	2801      	cmp	r0, #1
        if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a06d2:	d170      	bne.n	80a07b6 <loop+0x48a>
          Serial.println(" No points awarded"); // Debugging printout
 80a06d4:	f000 fd02 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a06d8:	4960      	ldr	r1, [pc, #384]	; (80a085c <loop+0x530>)
 80a06da:	f000 fbea 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          gameOver();
 80a06de:	f7ff fd43 	bl	80a0168 <_Z8gameOverv>
          startGame = !startGame;
 80a06e2:	4a5f      	ldr	r2, [pc, #380]	; (80a0860 <loop+0x534>)
 80a06e4:	7813      	ldrb	r3, [r2, #0]
 80a06e6:	f083 0301 	eor.w	r3, r3, #1
 80a06ea:	7013      	strb	r3, [r2, #0]
 80a06ec:	e02a      	b.n	80a0744 <loop+0x418>
        digitalWrite(ledB, HIGH); // turn on the simon LED
 80a06ee:	f8bb 0000 	ldrh.w	r0, [fp]
 80a06f2:	f000 febc 	bl	80a146e <digitalWrite>
        Serial.println("Simon says hold the yellow button.");
 80a06f6:	f000 fcf1 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a06fa:	495a      	ldr	r1, [pc, #360]	; (80a0864 <loop+0x538>)
 80a06fc:	f000 fbd9 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        delay(2500);                 // Gives time for the user to make an appropriate input
 80a0700:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a0704:	f000 fa80 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0708:	f8b8 0000 	ldrh.w	r0, [r8]
 80a070c:	f000 fec8 	bl	80a14a0 <digitalRead>
 80a0710:	4607      	mov	r7, r0
        curY = digitalRead(buttonY);
 80a0712:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0716:	f000 fec3 	bl	80a14a0 <digitalRead>
 80a071a:	4605      	mov	r5, r0
        curR = digitalRead(buttonR);
 80a071c:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0720:	f000 febe 	bl	80a14a0 <digitalRead>
        if (curY == HIGH && curG == LOW && curR == LOW)
 80a0724:	2d01      	cmp	r5, #1
        curR = digitalRead(buttonR);
 80a0726:	4604      	mov	r4, r0
        if (curY == HIGH && curG == LOW && curR == LOW)
 80a0728:	d10e      	bne.n	80a0748 <loop+0x41c>
 80a072a:	ea57 0600 	orrs.w	r6, r7, r0
 80a072e:	d10b      	bne.n	80a0748 <loop+0x41c>
        curR = digitalRead(buttonR);
 80a0730:	4634      	mov	r4, r6
          Serial.println(" 1 point awarded"); // Debugging printout
 80a0732:	f000 fcd3 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0736:	494c      	ldr	r1, [pc, #304]	; (80a0868 <loop+0x53c>)
 80a0738:	f000 fbbb 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          points++;
 80a073c:	4a4b      	ldr	r2, [pc, #300]	; (80a086c <loop+0x540>)
 80a073e:	6813      	ldr	r3, [r2, #0]
 80a0740:	3301      	adds	r3, #1
 80a0742:	6013      	str	r3, [r2, #0]
      delay(100);
 80a0744:	2064      	movs	r0, #100	; 0x64
 80a0746:	e70c      	b.n	80a0562 <loop+0x236>
          Serial.println(" No points awarded"); // Debugging printout
 80a0748:	f000 fcc8 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a074c:	4943      	ldr	r1, [pc, #268]	; (80a085c <loop+0x530>)
 80a074e:	f000 fbb0 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          gameOver();
 80a0752:	f7ff fd09 	bl	80a0168 <_Z8gameOverv>
          startGame = !startGame;
 80a0756:	4a42      	ldr	r2, [pc, #264]	; (80a0860 <loop+0x534>)
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a0758:	463e      	mov	r6, r7
          startGame = !startGame;
 80a075a:	7813      	ldrb	r3, [r2, #0]
 80a075c:	f083 0301 	eor.w	r3, r3, #1
 80a0760:	7013      	strb	r3, [r2, #0]
 80a0762:	e7ef      	b.n	80a0744 <loop+0x418>
      digitalWrite(ledR, HIGH);
 80a0764:	4b42      	ldr	r3, [pc, #264]	; (80a0870 <loop+0x544>)
 80a0766:	2101      	movs	r1, #1
 80a0768:	8818      	ldrh	r0, [r3, #0]
 80a076a:	f000 fe80 	bl	80a146e <digitalWrite>
      delay(50);
 80a076e:	2032      	movs	r0, #50	; 0x32
 80a0770:	f000 fa4a 	bl	80a0c08 <delay>
      if (simon == 0)
 80a0774:	9b00      	ldr	r3, [sp, #0]
 80a0776:	07db      	lsls	r3, r3, #31
 80a0778:	d427      	bmi.n	80a07ca <loop+0x49e>
        Serial.println("Press the red button");
 80a077a:	f000 fcaf 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a077e:	493d      	ldr	r1, [pc, #244]	; (80a0874 <loop+0x548>)
 80a0780:	f000 fb97 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        delay(2500);                 // Gives time for the user to make an appropriate input
 80a0784:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a0788:	f000 fa3e 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a078c:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0790:	f000 fe86 	bl	80a14a0 <digitalRead>
 80a0794:	4606      	mov	r6, r0
        curY = digitalRead(buttonY);
 80a0796:	f8ba 0000 	ldrh.w	r0, [sl]
 80a079a:	f000 fe81 	bl	80a14a0 <digitalRead>
 80a079e:	4605      	mov	r5, r0
        curR = digitalRead(buttonR);
 80a07a0:	f8b9 0000 	ldrh.w	r0, [r9]
 80a07a4:	f000 fe7c 	bl	80a14a0 <digitalRead>
        if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a07a8:	2801      	cmp	r0, #1
        curR = digitalRead(buttonR);
 80a07aa:	4604      	mov	r4, r0
        if (curR == HIGH || curG == HIGH || curY == HIGH)
 80a07ac:	d092      	beq.n	80a06d4 <loop+0x3a8>
 80a07ae:	2e01      	cmp	r6, #1
 80a07b0:	d090      	beq.n	80a06d4 <loop+0x3a8>
 80a07b2:	2d01      	cmp	r5, #1
 80a07b4:	e78d      	b.n	80a06d2 <loop+0x3a6>
          Serial.println(" One point awarded");
 80a07b6:	f000 fc91 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a07ba:	492f      	ldr	r1, [pc, #188]	; (80a0878 <loop+0x54c>)
 80a07bc:	f000 fb79 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          points++;
 80a07c0:	4a2a      	ldr	r2, [pc, #168]	; (80a086c <loop+0x540>)
 80a07c2:	6813      	ldr	r3, [r2, #0]
 80a07c4:	3301      	adds	r3, #1
 80a07c6:	6013      	str	r3, [r2, #0]
 80a07c8:	e7bc      	b.n	80a0744 <loop+0x418>
        digitalWrite(ledB, HIGH); // turning on the simon led
 80a07ca:	2101      	movs	r1, #1
 80a07cc:	f8bb 0000 	ldrh.w	r0, [fp]
 80a07d0:	f000 fe4d 	bl	80a146e <digitalWrite>
        Serial.println("Simon says hold the red button");
 80a07d4:	f000 fc82 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a07d8:	4928      	ldr	r1, [pc, #160]	; (80a087c <loop+0x550>)
 80a07da:	f000 fb6a 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
        delay(2500);                 // Gives time for the user to make an appropriate input
 80a07de:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a07e2:	f000 fa11 	bl	80a0c08 <delay>
        curG = digitalRead(buttonG); // reads all button inputs to make sure only the correct button is/isnt pressed
 80a07e6:	f8b8 0000 	ldrh.w	r0, [r8]
 80a07ea:	f000 fe59 	bl	80a14a0 <digitalRead>
 80a07ee:	4607      	mov	r7, r0
        curY = digitalRead(buttonY);
 80a07f0:	f8ba 0000 	ldrh.w	r0, [sl]
 80a07f4:	f000 fe54 	bl	80a14a0 <digitalRead>
 80a07f8:	4605      	mov	r5, r0
        curR = digitalRead(buttonR);
 80a07fa:	f8b9 0000 	ldrh.w	r0, [r9]
 80a07fe:	f000 fe4f 	bl	80a14a0 <digitalRead>
        if (curR == HIGH && curG == LOW && curY == LOW)
 80a0802:	2801      	cmp	r0, #1
        curR = digitalRead(buttonR);
 80a0804:	4604      	mov	r4, r0
        if (curR == HIGH && curG == LOW && curY == LOW)
 80a0806:	d19f      	bne.n	80a0748 <loop+0x41c>
 80a0808:	ea57 0605 	orrs.w	r6, r7, r5
 80a080c:	d19c      	bne.n	80a0748 <loop+0x41c>
          Serial.println(" 1 point awarded"); // Debugging printout
 80a080e:	f000 fc65 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0812:	4915      	ldr	r1, [pc, #84]	; (80a0868 <loop+0x53c>)
 80a0814:	f000 fb4d 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
          points++;
 80a0818:	4a14      	ldr	r2, [pc, #80]	; (80a086c <loop+0x540>)
        curY = digitalRead(buttonY);
 80a081a:	4635      	mov	r5, r6
          points++;
 80a081c:	6813      	ldr	r3, [r2, #0]
 80a081e:	3301      	adds	r3, #1
 80a0820:	6013      	str	r3, [r2, #0]
 80a0822:	e78f      	b.n	80a0744 <loop+0x418>
      Serial.println("Something went wrong");
 80a0824:	f000 fc5a 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a0828:	4915      	ldr	r1, [pc, #84]	; (80a0880 <loop+0x554>)
 80a082a:	f000 fb42 	bl	80a0eb2 <_ZN5Print7printlnEPKc>
      digitalWrite(ledB, LOW);
 80a082e:	4639      	mov	r1, r7
 80a0830:	f8bb 0000 	ldrh.w	r0, [fp]
 80a0834:	f000 fe1b 	bl	80a146e <digitalWrite>
      digitalWrite(ledG, LOW);
 80a0838:	4a12      	ldr	r2, [pc, #72]	; (80a0884 <loop+0x558>)
 80a083a:	4639      	mov	r1, r7
 80a083c:	8810      	ldrh	r0, [r2, #0]
 80a083e:	f000 fe16 	bl	80a146e <digitalWrite>
      digitalWrite(ledY, LOW);
 80a0842:	4b11      	ldr	r3, [pc, #68]	; (80a0888 <loop+0x55c>)
 80a0844:	4639      	mov	r1, r7
 80a0846:	8818      	ldrh	r0, [r3, #0]
 80a0848:	f000 fe11 	bl	80a146e <digitalWrite>
      digitalWrite(ledR, LOW);
 80a084c:	4b08      	ldr	r3, [pc, #32]	; (80a0870 <loop+0x544>)
 80a084e:	4639      	mov	r1, r7
 80a0850:	8818      	ldrh	r0, [r3, #0]
 80a0852:	f000 fe0c 	bl	80a146e <digitalWrite>
      break;
 80a0856:	e686      	b.n	80a0566 <loop+0x23a>
 80a0858:	080a1898 	.word	0x080a1898
 80a085c:	080a1834 	.word	0x080a1834
 80a0860:	200000a4 	.word	0x200000a4
 80a0864:	080a188d 	.word	0x080a188d
 80a0868:	080a187c 	.word	0x080a187c
 80a086c:	20000090 	.word	0x20000090
 80a0870:	20000014 	.word	0x20000014
 80a0874:	080a18b0 	.word	0x080a18b0
 80a0878:	080a1847 	.word	0x080a1847
 80a087c:	080a18c5 	.word	0x080a18c5
 80a0880:	080a18e4 	.word	0x080a18e4
 80a0884:	20000010 	.word	0x20000010
 80a0888:	20000018 	.word	0x20000018

080a088c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <os_mutex_recursive_create+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601d0 	.word	0x080601d0

080a089c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <os_mutex_recursive_destroy+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601d0 	.word	0x080601d0

080a08ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <HAL_RNG_GetRandomNumber+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	685b      	ldr	r3, [r3, #4]
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	0806019c 	.word	0x0806019c

080a08bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b02      	ldr	r3, [pc, #8]	; (80a08c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	695b      	ldr	r3, [r3, #20]
 80a08c4:	9301      	str	r3, [sp, #4]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	0806019c 	.word	0x0806019c

080a08cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a08cc:	b508      	push	{r3, lr}
 80a08ce:	4b02      	ldr	r3, [pc, #8]	; (80a08d8 <HAL_Pin_Mode+0xc>)
 80a08d0:	681b      	ldr	r3, [r3, #0]
 80a08d2:	689b      	ldr	r3, [r3, #8]
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	bd08      	pop	{r3, pc}
 80a08d8:	080601b0 	.word	0x080601b0

080a08dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <HAL_Get_Pin_Mode+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	68db      	ldr	r3, [r3, #12]
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601b0 	.word	0x080601b0

080a08ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <HAL_GPIO_Write+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	691b      	ldr	r3, [r3, #16]
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601b0 	.word	0x080601b0

080a08fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <HAL_GPIO_Read+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	695b      	ldr	r3, [r3, #20]
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601b0 	.word	0x080601b0

080a090c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <hal_i2c_write+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601ac 	.word	0x080601ac

080a091c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <hal_i2c_available+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601ac 	.word	0x080601ac

080a092c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <hal_i2c_read+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601ac 	.word	0x080601ac

080a093c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <hal_i2c_peek+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601ac 	.word	0x080601ac

080a094c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <hal_i2c_flush+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601ac 	.word	0x080601ac

080a095c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <hal_i2c_is_enabled+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601ac 	.word	0x080601ac

080a096c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b03      	ldr	r3, [pc, #12]	; (80a097c <hal_i2c_init+0x10>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0976:	9301      	str	r3, [sp, #4]
 80a0978:	bd08      	pop	{r3, pc}
 80a097a:	0000      	.short	0x0000
 80a097c:	080601ac 	.word	0x080601ac

080a0980 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <hal_spi_init+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	69db      	ldr	r3, [r3, #28]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601b4 	.word	0x080601b4

080a0990 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <hal_spi_is_enabled+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	6a1b      	ldr	r3, [r3, #32]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601b4 	.word	0x080601b4

080a09a0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <hal_usart_write+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c4 	.word	0x080601c4

080a09b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <hal_usart_available+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c4 	.word	0x080601c4

080a09c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <hal_usart_read+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c4 	.word	0x080601c4

080a09d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <hal_usart_peek+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601c4 	.word	0x080601c4

080a09e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <hal_usart_flush+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c4 	.word	0x080601c4

080a09f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <hal_usart_is_enabled+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c4 	.word	0x080601c4

080a0a00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <hal_usart_available_data_for_write+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601c4 	.word	0x080601c4

080a0a10 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <hal_usart_init_ex+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601c4 	.word	0x080601c4

080a0a20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <HAL_USB_USART_Init+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	681b      	ldr	r3, [r3, #0]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601d8 	.word	0x080601d8

080a0a30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <HAL_USB_USART_Begin+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	685b      	ldr	r3, [r3, #4]
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601d8 	.word	0x080601d8

080a0a40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <HAL_USB_USART_Available_Data+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	691b      	ldr	r3, [r3, #16]
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601d8 	.word	0x080601d8

080a0a50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	695b      	ldr	r3, [r3, #20]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601d8 	.word	0x080601d8

080a0a60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <HAL_USB_USART_Receive_Data+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	699b      	ldr	r3, [r3, #24]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601d8 	.word	0x080601d8

080a0a70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <HAL_USB_USART_Send_Data+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	69db      	ldr	r3, [r3, #28]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601d8 	.word	0x080601d8

080a0a80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <HAL_USB_USART_Flush_Data+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	6a1b      	ldr	r3, [r3, #32]
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601d8 	.word	0x080601d8

080a0a90 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <inet_gethostbyname+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601c0 	.word	0x080601c0

080a0aa0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <set_system_mode+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	685b      	ldr	r3, [r3, #4]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601a4 	.word	0x080601a4

080a0ab0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <system_delay_ms+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	695b      	ldr	r3, [r3, #20]
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601a4 	.word	0x080601a4

080a0ac0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b03      	ldr	r3, [pc, #12]	; (80a0ad0 <system_ctrl_set_app_request_handler+0x10>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0aca:	9301      	str	r3, [sp, #4]
 80a0acc:	bd08      	pop	{r3, pc}
 80a0ace:	0000      	.short	0x0000
 80a0ad0:	080601a4 	.word	0x080601a4

080a0ad4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b03      	ldr	r3, [pc, #12]	; (80a0ae4 <system_ctrl_set_result+0x10>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ade:	9301      	str	r3, [sp, #4]
 80a0ae0:	bd08      	pop	{r3, pc}
 80a0ae2:	0000      	.short	0x0000
 80a0ae4:	080601a4 	.word	0x080601a4

080a0ae8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <spark_variable+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	681b      	ldr	r3, [r3, #0]
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601cc 	.word	0x080601cc

080a0af8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601cc 	.word	0x080601cc

080a0b08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <network_connect+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	685b      	ldr	r3, [r3, #4]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601c8 	.word	0x080601c8

080a0b18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <network_connecting+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	689b      	ldr	r3, [r3, #8]
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601c8 	.word	0x080601c8

080a0b28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <network_disconnect+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	68db      	ldr	r3, [r3, #12]
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601c8 	.word	0x080601c8

080a0b38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <network_ready+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	691b      	ldr	r3, [r3, #16]
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601c8 	.word	0x080601c8

080a0b48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <network_on+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	695b      	ldr	r3, [r3, #20]
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	080601c8 	.word	0x080601c8

080a0b58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b02      	ldr	r3, [pc, #8]	; (80a0b64 <network_off+0xc>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	699b      	ldr	r3, [r3, #24]
 80a0b60:	9301      	str	r3, [sp, #4]
 80a0b62:	bd08      	pop	{r3, pc}
 80a0b64:	080601c8 	.word	0x080601c8

080a0b68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b68:	b508      	push	{r3, lr}
 80a0b6a:	4b02      	ldr	r3, [pc, #8]	; (80a0b74 <network_listen+0xc>)
 80a0b6c:	681b      	ldr	r3, [r3, #0]
 80a0b6e:	69db      	ldr	r3, [r3, #28]
 80a0b70:	9301      	str	r3, [sp, #4]
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	080601c8 	.word	0x080601c8

080a0b78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b78:	b508      	push	{r3, lr}
 80a0b7a:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <network_listening+0xc>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	6a1b      	ldr	r3, [r3, #32]
 80a0b80:	9301      	str	r3, [sp, #4]
 80a0b82:	bd08      	pop	{r3, pc}
 80a0b84:	080601c8 	.word	0x080601c8

080a0b88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b88:	b508      	push	{r3, lr}
 80a0b8a:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <network_set_listen_timeout+0xc>)
 80a0b8c:	681b      	ldr	r3, [r3, #0]
 80a0b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b90:	9301      	str	r3, [sp, #4]
 80a0b92:	bd08      	pop	{r3, pc}
 80a0b94:	080601c8 	.word	0x080601c8

080a0b98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <network_get_listen_timeout+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601c8 	.word	0x080601c8

080a0ba8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <network_is_on+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601c8 	.word	0x080601c8

080a0bb8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <network_is_off+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601c8 	.word	0x080601c8

080a0bc8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <malloc+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	681b      	ldr	r3, [r3, #0]
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601a0 	.word	0x080601a0

080a0bd8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <free+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	685b      	ldr	r3, [r3, #4]
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601a0 	.word	0x080601a0

080a0be8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <__assert_func+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601a0 	.word	0x080601a0

080a0bf8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0bf8:	b508      	push	{r3, lr}
 80a0bfa:	4b02      	ldr	r3, [pc, #8]	; (80a0c04 <newlib_impure_ptr_callback+0xc>)
 80a0bfc:	681b      	ldr	r3, [r3, #0]
 80a0bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c00:	9301      	str	r3, [sp, #4]
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	080601a0 	.word	0x080601a0

080a0c08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0c08:	2100      	movs	r1, #0
 80a0c0a:	f7ff bf51 	b.w	80a0ab0 <system_delay_ms>

080a0c0e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0c0e:	4770      	bx	lr

080a0c10 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c12:	4606      	mov	r6, r0
 80a0c14:	4615      	mov	r5, r2
 80a0c16:	460c      	mov	r4, r1
 80a0c18:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c1a:	42bc      	cmp	r4, r7
 80a0c1c:	d006      	beq.n	80a0c2c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c1e:	6833      	ldr	r3, [r6, #0]
 80a0c20:	4630      	mov	r0, r6
 80a0c22:	689b      	ldr	r3, [r3, #8]
 80a0c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c28:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c2a:	e7f6      	b.n	80a0c1a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c2c:	4628      	mov	r0, r5
 80a0c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c30 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c30:	2200      	movs	r2, #0
 80a0c32:	7c00      	ldrb	r0, [r0, #16]
 80a0c34:	f7ff be6a 	b.w	80a090c <hal_i2c_write>

080a0c38 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c38:	2100      	movs	r1, #0
 80a0c3a:	7c00      	ldrb	r0, [r0, #16]
 80a0c3c:	f7ff be6e 	b.w	80a091c <hal_i2c_available>

080a0c40 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c40:	2100      	movs	r1, #0
 80a0c42:	7c00      	ldrb	r0, [r0, #16]
 80a0c44:	f7ff be72 	b.w	80a092c <hal_i2c_read>

080a0c48 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c48:	2100      	movs	r1, #0
 80a0c4a:	7c00      	ldrb	r0, [r0, #16]
 80a0c4c:	f7ff be76 	b.w	80a093c <hal_i2c_peek>

080a0c50 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c50:	2100      	movs	r1, #0
 80a0c52:	7c00      	ldrb	r0, [r0, #16]
 80a0c54:	f7ff be7a 	b.w	80a094c <hal_i2c_flush>

080a0c58 <_ZN7TwoWireD0Ev>:
 80a0c58:	b510      	push	{r4, lr}
 80a0c5a:	4604      	mov	r4, r0
 80a0c5c:	2114      	movs	r1, #20
 80a0c5e:	f7ff fa1c 	bl	80a009a <_ZdlPvj>
 80a0c62:	4620      	mov	r0, r4
 80a0c64:	bd10      	pop	{r4, pc}
	...

080a0c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c6e:	4604      	mov	r4, r0
 80a0c70:	4608      	mov	r0, r1
 80a0c72:	2100      	movs	r1, #0
 80a0c74:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0c78:	4b03      	ldr	r3, [pc, #12]	; (80a0c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0c7a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c7c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0c7e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0c80:	f7ff fe74 	bl	80a096c <hal_i2c_init>
}
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	bd10      	pop	{r4, pc}
 80a0c88:	080a1930 	.word	0x080a1930

080a0c8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c8c:	4770      	bx	lr

080a0c8e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c90:	460e      	mov	r6, r1
 80a0c92:	2400      	movs	r4, #0
 80a0c94:	f100 0708 	add.w	r7, r0, #8
 80a0c98:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0c9a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0c9e:	220a      	movs	r2, #10
 80a0ca0:	4630      	mov	r0, r6
 80a0ca2:	f000 f910 	bl	80a0ec6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ca6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ca8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0caa:	d101      	bne.n	80a0cb0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0cac:	4620      	mov	r0, r4
 80a0cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0cb0:	2c00      	cmp	r4, #0
 80a0cb2:	d0f2      	beq.n	80a0c9a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0cb4:	212e      	movs	r1, #46	; 0x2e
 80a0cb6:	4630      	mov	r0, r6
 80a0cb8:	f000 f8ec 	bl	80a0e94 <_ZN5Print5printEc>
 80a0cbc:	4404      	add	r4, r0
 80a0cbe:	e7ec      	b.n	80a0c9a <_ZNK9IPAddress7printToER5Print+0xc>

080a0cc0 <_ZN9IPAddressD0Ev>:
 80a0cc0:	b510      	push	{r4, lr}
 80a0cc2:	4604      	mov	r4, r0
 80a0cc4:	2118      	movs	r1, #24
 80a0cc6:	f7ff f9e8 	bl	80a009a <_ZdlPvj>
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	bd10      	pop	{r4, pc}
	...

080a0cd0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0cd0:	b510      	push	{r4, lr}
 80a0cd2:	4604      	mov	r4, r0
 80a0cd4:	4b04      	ldr	r3, [pc, #16]	; (80a0ce8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0cd6:	2211      	movs	r2, #17
 80a0cd8:	2100      	movs	r1, #0
 80a0cda:	f840 3b04 	str.w	r3, [r0], #4
 80a0cde:	f000 fc91 	bl	80a1604 <memset>
}
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	bd10      	pop	{r4, pc}
 80a0ce6:	bf00      	nop
 80a0ce8:	080a1958 	.word	0x080a1958

080a0cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0cec:	4603      	mov	r3, r0
 80a0cee:	4a07      	ldr	r2, [pc, #28]	; (80a0d0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0cf0:	b510      	push	{r4, lr}
 80a0cf2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0cf6:	f101 0210 	add.w	r2, r1, #16
 80a0cfa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0cfe:	4291      	cmp	r1, r2
 80a0d00:	f843 4b04 	str.w	r4, [r3], #4
 80a0d04:	d1f9      	bne.n	80a0cfa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0d06:	780a      	ldrb	r2, [r1, #0]
 80a0d08:	701a      	strb	r2, [r3, #0]
}
 80a0d0a:	bd10      	pop	{r4, pc}
 80a0d0c:	080a1958 	.word	0x080a1958

080a0d10 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0d10:	4a02      	ldr	r2, [pc, #8]	; (80a0d1c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0d12:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0d16:	2204      	movs	r2, #4
 80a0d18:	7502      	strb	r2, [r0, #20]
}
 80a0d1a:	4770      	bx	lr
 80a0d1c:	080a1958 	.word	0x080a1958

080a0d20 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0d20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d22:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d26:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0d2a:	2304      	movs	r3, #4
 80a0d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0d30:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0d34:	6044      	str	r4, [r0, #4]
 80a0d36:	7503      	strb	r3, [r0, #20]
}
 80a0d38:	bd10      	pop	{r4, pc}
	...

080a0d3c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0d3c:	b513      	push	{r0, r1, r4, lr}
 80a0d3e:	4c04      	ldr	r4, [pc, #16]	; (80a0d50 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0d40:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0d42:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a0d46:	9400      	str	r4, [sp, #0]
 80a0d48:	f7ff ffea 	bl	80a0d20 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0d4c:	b002      	add	sp, #8
 80a0d4e:	bd10      	pop	{r4, pc}
 80a0d50:	080a1958 	.word	0x080a1958

080a0d54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d54:	4b01      	ldr	r3, [pc, #4]	; (80a0d5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d56:	4a02      	ldr	r2, [pc, #8]	; (80a0d60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0d5a:	4770      	bx	lr
 80a0d5c:	200000ac 	.word	0x200000ac
 80a0d60:	080a1964 	.word	0x080a1964

080a0d64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d64:	2300      	movs	r3, #0
 80a0d66:	6840      	ldr	r0, [r0, #4]
 80a0d68:	461a      	mov	r2, r3
 80a0d6a:	f7ff becd 	b.w	80a0b08 <network_connect>

080a0d6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d6e:	2200      	movs	r2, #0
 80a0d70:	2102      	movs	r1, #2
 80a0d72:	6840      	ldr	r0, [r0, #4]
 80a0d74:	f7ff bed8 	b.w	80a0b28 <network_disconnect>

080a0d78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d78:	2200      	movs	r2, #0
 80a0d7a:	6840      	ldr	r0, [r0, #4]
 80a0d7c:	4611      	mov	r1, r2
 80a0d7e:	f7ff becb 	b.w	80a0b18 <network_connecting>

080a0d82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d82:	2200      	movs	r2, #0
 80a0d84:	6840      	ldr	r0, [r0, #4]
 80a0d86:	4611      	mov	r1, r2
 80a0d88:	f7ff bed6 	b.w	80a0b38 <network_ready>

080a0d8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d8c:	2300      	movs	r3, #0
 80a0d8e:	6840      	ldr	r0, [r0, #4]
 80a0d90:	461a      	mov	r2, r3
 80a0d92:	4619      	mov	r1, r3
 80a0d94:	f7ff bed8 	b.w	80a0b48 <network_on>

080a0d98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d98:	2300      	movs	r3, #0
 80a0d9a:	6840      	ldr	r0, [r0, #4]
 80a0d9c:	461a      	mov	r2, r3
 80a0d9e:	4619      	mov	r1, r3
 80a0da0:	f7ff beda 	b.w	80a0b58 <network_off>

080a0da4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0da4:	2100      	movs	r1, #0
 80a0da6:	6840      	ldr	r0, [r0, #4]
 80a0da8:	f7ff befe 	b.w	80a0ba8 <network_is_on>

080a0dac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0dac:	2100      	movs	r1, #0
 80a0dae:	6840      	ldr	r0, [r0, #4]
 80a0db0:	f7ff bf02 	b.w	80a0bb8 <network_is_off>

080a0db4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0db4:	2200      	movs	r2, #0
 80a0db6:	6840      	ldr	r0, [r0, #4]
 80a0db8:	f081 0101 	eor.w	r1, r1, #1
 80a0dbc:	f7ff bed4 	b.w	80a0b68 <network_listen>

080a0dc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0dc0:	2200      	movs	r2, #0
 80a0dc2:	6840      	ldr	r0, [r0, #4]
 80a0dc4:	f7ff bee0 	b.w	80a0b88 <network_set_listen_timeout>

080a0dc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0dc8:	2200      	movs	r2, #0
 80a0dca:	6840      	ldr	r0, [r0, #4]
 80a0dcc:	4611      	mov	r1, r2
 80a0dce:	f7ff bee3 	b.w	80a0b98 <network_get_listen_timeout>

080a0dd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0dd2:	2200      	movs	r2, #0
 80a0dd4:	6840      	ldr	r0, [r0, #4]
 80a0dd6:	4611      	mov	r1, r2
 80a0dd8:	f7ff bece 	b.w	80a0b78 <network_listening>

080a0ddc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0ddc:	b570      	push	{r4, r5, r6, lr}
 80a0dde:	4615      	mov	r5, r2
 80a0de0:	b08e      	sub	sp, #56	; 0x38
 80a0de2:	4604      	mov	r4, r0
    IPAddress addr;
 80a0de4:	a808      	add	r0, sp, #32
 80a0de6:	f7ff ff73 	bl	80a0cd0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0dea:	2211      	movs	r2, #17
 80a0dec:	2100      	movs	r1, #0
 80a0dee:	a803      	add	r0, sp, #12
 80a0df0:	f000 fc08 	bl	80a1604 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0df4:	2600      	movs	r6, #0
 80a0df6:	4628      	mov	r0, r5
 80a0df8:	f000 fc78 	bl	80a16ec <strlen>
 80a0dfc:	4b0a      	ldr	r3, [pc, #40]	; (80a0e28 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0dfe:	9600      	str	r6, [sp, #0]
 80a0e00:	b281      	uxth	r1, r0
 80a0e02:	685b      	ldr	r3, [r3, #4]
 80a0e04:	4628      	mov	r0, r5
 80a0e06:	aa03      	add	r2, sp, #12
 80a0e08:	f7ff fe42 	bl	80a0a90 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e0c:	b130      	cbz	r0, 80a0e1c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0e0e:	4631      	mov	r1, r6
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	f7ff ff7d 	bl	80a0d10 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	b00e      	add	sp, #56	; 0x38
 80a0e1a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	a903      	add	r1, sp, #12
 80a0e20:	f7ff ff64 	bl	80a0cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e24:	e7f7      	b.n	80a0e16 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e26:	bf00      	nop
 80a0e28:	20000410 	.word	0x20000410

080a0e2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0e2c:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e2e:	4a03      	ldr	r2, [pc, #12]	; (80a0e3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e30:	601a      	str	r2, [r3, #0]
 80a0e32:	2200      	movs	r2, #0
 80a0e34:	605a      	str	r2, [r3, #4]

} // spark
 80a0e36:	4770      	bx	lr
 80a0e38:	200000b0 	.word	0x200000b0
 80a0e3c:	080a1970 	.word	0x080a1970

080a0e40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e42:	4606      	mov	r6, r0
 80a0e44:	460d      	mov	r5, r1
  size_t n = 0;
 80a0e46:	2400      	movs	r4, #0
 80a0e48:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0e4a:	42bd      	cmp	r5, r7
 80a0e4c:	d00c      	beq.n	80a0e68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0e4e:	6833      	ldr	r3, [r6, #0]
 80a0e50:	4630      	mov	r0, r6
 80a0e52:	689b      	ldr	r3, [r3, #8]
 80a0e54:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e58:	4798      	blx	r3
     if (chunk>=0)
 80a0e5a:	1e03      	subs	r3, r0, #0
 80a0e5c:	db01      	blt.n	80a0e62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e5e:	441c      	add	r4, r3
  while (size--) {
 80a0e60:	e7f3      	b.n	80a0e4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e62:	2c00      	cmp	r4, #0
 80a0e64:	bf08      	it	eq
 80a0e66:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e6c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0e6c:	b570      	push	{r4, r5, r6, lr}
 80a0e6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e70:	460c      	mov	r4, r1
    }
 80a0e72:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0e74:	b149      	cbz	r1, 80a0e8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e76:	f000 fc39 	bl	80a16ec <strlen>
 80a0e7a:	682b      	ldr	r3, [r5, #0]
 80a0e7c:	4602      	mov	r2, r0
 80a0e7e:	4621      	mov	r1, r4
 80a0e80:	4628      	mov	r0, r5
    }
 80a0e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0e86:	68db      	ldr	r3, [r3, #12]
 80a0e88:	4718      	bx	r3
    }
 80a0e8a:	bd70      	pop	{r4, r5, r6, pc}

080a0e8c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0e8c:	b508      	push	{r3, lr}
  return write(str);
 80a0e8e:	f7ff ffed 	bl	80a0e6c <_ZN5Print5writeEPKc>
}
 80a0e92:	bd08      	pop	{r3, pc}

080a0e94 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0e94:	6803      	ldr	r3, [r0, #0]
 80a0e96:	689b      	ldr	r3, [r3, #8]
 80a0e98:	4718      	bx	r3

080a0e9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0e9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0e9c:	210d      	movs	r1, #13
{
 80a0e9e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0ea0:	f7ff fff8 	bl	80a0e94 <_ZN5Print5printEc>
  n += print('\n');
 80a0ea4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0ea6:	4604      	mov	r4, r0
  n += print('\n');
 80a0ea8:	4628      	mov	r0, r5
 80a0eaa:	f7ff fff3 	bl	80a0e94 <_ZN5Print5printEc>
  return n;
}
 80a0eae:	4420      	add	r0, r4
 80a0eb0:	bd38      	pop	{r3, r4, r5, pc}

080a0eb2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0eb2:	b538      	push	{r3, r4, r5, lr}
 80a0eb4:	4605      	mov	r5, r0
  return write(str);
 80a0eb6:	f7ff ffd9 	bl	80a0e6c <_ZN5Print5writeEPKc>
 80a0eba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0ebc:	4628      	mov	r0, r5
 80a0ebe:	f7ff ffec 	bl	80a0e9a <_ZN5Print7printlnEv>
  return n;
}
 80a0ec2:	4420      	add	r0, r4
 80a0ec4:	bd38      	pop	{r3, r4, r5, pc}

080a0ec6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0ec6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0ec8:	2a01      	cmp	r2, #1
 80a0eca:	bf98      	it	ls
 80a0ecc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0ece:	b530      	push	{r4, r5, lr}
 80a0ed0:	b08b      	sub	sp, #44	; 0x2c
 80a0ed2:	460c      	mov	r4, r1
  *str = '\0';
 80a0ed4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0ed8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0eda:	4625      	mov	r5, r4
 80a0edc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0ee0:	fb04 5312 	mls	r3, r4, r2, r5
 80a0ee4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ee6:	2b09      	cmp	r3, #9
 80a0ee8:	bf94      	ite	ls
 80a0eea:	3330      	addls	r3, #48	; 0x30
 80a0eec:	3337      	addhi	r3, #55	; 0x37
 80a0eee:	b2db      	uxtb	r3, r3
  } while(n);
 80a0ef0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ef2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0ef6:	d9f0      	bls.n	80a0eda <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0ef8:	f7ff ffb8 	bl	80a0e6c <_ZN5Print5writeEPKc>
}
 80a0efc:	b00b      	add	sp, #44	; 0x2c
 80a0efe:	bd30      	pop	{r4, r5, pc}

080a0f00 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f00:	2200      	movs	r2, #0
 80a0f02:	4b01      	ldr	r3, [pc, #4]	; (80a0f08 <_GLOBAL__sub_I_RGB+0x8>)
 80a0f04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0f06:	4770      	bx	lr
 80a0f08:	200000b8 	.word	0x200000b8

080a0f0c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0f0c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0f0e:	2600      	movs	r6, #0
 80a0f10:	4604      	mov	r4, r0
 80a0f12:	460d      	mov	r5, r1
 80a0f14:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0f18:	f7ff fcb8 	bl	80a088c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0f1c:	4628      	mov	r0, r5
    _spi = spi;
 80a0f1e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0f20:	f7ff fd2e 	bl	80a0980 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0f24:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0f26:	6066      	str	r6, [r4, #4]
}
 80a0f28:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0f2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0f2c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0f2e:	2000      	movs	r0, #0
 80a0f30:	4b04      	ldr	r3, [pc, #16]	; (80a0f44 <_GLOBAL__sub_I_System+0x18>)
 80a0f32:	601a      	str	r2, [r3, #0]
 80a0f34:	4b04      	ldr	r3, [pc, #16]	; (80a0f48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0f36:	4a05      	ldr	r2, [pc, #20]	; (80a0f4c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0f38:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a0f3c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0f3e:	f7ff bdaf 	b.w	80a0aa0 <set_system_mode>
 80a0f42:	bf00      	nop
 80a0f44:	200000d4 	.word	0x200000d4
 80a0f48:	200000c8 	.word	0x200000c8
 80a0f4c:	ffff0000 	.word	0xffff0000

080a0f50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0f50:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0f52:	681a      	ldr	r2, [r3, #0]
 80a0f54:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0f56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0f58:	4770      	bx	lr
 80a0f5a:	bf00      	nop
 80a0f5c:	2000001c 	.word	0x2000001c
 80a0f60:	200000d8 	.word	0x200000d8

080a0f64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0f64:	4770      	bx	lr

080a0f66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f66:	7441      	strb	r1, [r0, #17]
}
 80a0f68:	4770      	bx	lr

080a0f6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0f6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0f6c:	7c00      	ldrb	r0, [r0, #16]
 80a0f6e:	f7ff fd47 	bl	80a0a00 <hal_usart_available_data_for_write>
}
 80a0f72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f76:	bd08      	pop	{r3, pc}

080a0f78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0f78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0f7a:	7c00      	ldrb	r0, [r0, #16]
 80a0f7c:	f7ff fd18 	bl	80a09b0 <hal_usart_available>
}
 80a0f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f84:	bd08      	pop	{r3, pc}

080a0f86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0f86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0f88:	7c00      	ldrb	r0, [r0, #16]
 80a0f8a:	f7ff fd21 	bl	80a09d0 <hal_usart_peek>
}
 80a0f8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f92:	bd08      	pop	{r3, pc}

080a0f94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0f94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0f96:	7c00      	ldrb	r0, [r0, #16]
 80a0f98:	f7ff fd12 	bl	80a09c0 <hal_usart_read>
}
 80a0f9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0fa0:	bd08      	pop	{r3, pc}

080a0fa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0fa2:	7c00      	ldrb	r0, [r0, #16]
 80a0fa4:	f7ff bd1c 	b.w	80a09e0 <hal_usart_flush>

080a0fa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0fa8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0faa:	7c46      	ldrb	r6, [r0, #17]
{
 80a0fac:	4604      	mov	r4, r0
 80a0fae:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fb0:	b12e      	cbz	r6, 80a0fbe <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0fb2:	4629      	mov	r1, r5
 80a0fb4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0fba:	f7ff bcf1 	b.w	80a09a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fbe:	7c00      	ldrb	r0, [r0, #16]
 80a0fc0:	f7ff fd1e 	bl	80a0a00 <hal_usart_available_data_for_write>
 80a0fc4:	2800      	cmp	r0, #0
 80a0fc6:	dcf4      	bgt.n	80a0fb2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0fc8:	4630      	mov	r0, r6
 80a0fca:	bd70      	pop	{r4, r5, r6, pc}

080a0fcc <_ZN11USARTSerialD0Ev>:
 80a0fcc:	b510      	push	{r4, lr}
 80a0fce:	4604      	mov	r4, r0
 80a0fd0:	2114      	movs	r1, #20
 80a0fd2:	f7ff f862 	bl	80a009a <_ZdlPvj>
 80a0fd6:	4620      	mov	r0, r4
 80a0fd8:	bd10      	pop	{r4, pc}
	...

080a0fdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0fdc:	b510      	push	{r4, lr}
 80a0fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fe2:	4604      	mov	r4, r0
 80a0fe4:	4608      	mov	r0, r1
 80a0fe6:	4611      	mov	r1, r2
 80a0fe8:	2200      	movs	r2, #0
 80a0fea:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a0fee:	4b04      	ldr	r3, [pc, #16]	; (80a1000 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a0ff0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0ff2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0ff4:	2301      	movs	r3, #1
 80a0ff6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a0ff8:	f7ff fd0a 	bl	80a0a10 <hal_usart_init_ex>
}
 80a0ffc:	4620      	mov	r0, r4
 80a0ffe:	bd10      	pop	{r4, pc}
 80a1000:	080a19c8 	.word	0x080a19c8

080a1004 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1004:	7441      	strb	r1, [r0, #17]
}
 80a1006:	4770      	bx	lr

080a1008 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1008:	4770      	bx	lr

080a100a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a100a:	4770      	bx	lr

080a100c <_ZN9USBSerial4readEv>:
{
 80a100c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a100e:	2100      	movs	r1, #0
 80a1010:	7c00      	ldrb	r0, [r0, #16]
 80a1012:	f7ff fd25 	bl	80a0a60 <HAL_USB_USART_Receive_Data>
}
 80a1016:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a101a:	bd08      	pop	{r3, pc}

080a101c <_ZN9USBSerial4peekEv>:
{
 80a101c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a101e:	2101      	movs	r1, #1
 80a1020:	7c00      	ldrb	r0, [r0, #16]
 80a1022:	f7ff fd1d 	bl	80a0a60 <HAL_USB_USART_Receive_Data>
}
 80a1026:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a102a:	bd08      	pop	{r3, pc}

080a102c <_ZN9USBSerial17availableForWriteEv>:
{
 80a102c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a102e:	7c00      	ldrb	r0, [r0, #16]
 80a1030:	f7ff fd0e 	bl	80a0a50 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1034:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1038:	bd08      	pop	{r3, pc}

080a103a <_ZN9USBSerial9availableEv>:
{
 80a103a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a103c:	7c00      	ldrb	r0, [r0, #16]
 80a103e:	f7ff fcff 	bl	80a0a40 <HAL_USB_USART_Available_Data>
}
 80a1042:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1046:	bd08      	pop	{r3, pc}

080a1048 <_ZN9USBSerial5writeEh>:
{
 80a1048:	b538      	push	{r3, r4, r5, lr}
 80a104a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a104c:	7c00      	ldrb	r0, [r0, #16]
{
 80a104e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1050:	f7ff fcfe 	bl	80a0a50 <HAL_USB_USART_Available_Data_For_Write>
 80a1054:	2800      	cmp	r0, #0
 80a1056:	dc01      	bgt.n	80a105c <_ZN9USBSerial5writeEh+0x14>
 80a1058:	7c60      	ldrb	r0, [r4, #17]
 80a105a:	b128      	cbz	r0, 80a1068 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a105c:	4629      	mov	r1, r5
 80a105e:	7c20      	ldrb	r0, [r4, #16]
 80a1060:	f7ff fd06 	bl	80a0a70 <HAL_USB_USART_Send_Data>
 80a1064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1068:	bd38      	pop	{r3, r4, r5, pc}

080a106a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a106a:	7c00      	ldrb	r0, [r0, #16]
 80a106c:	f7ff bd08 	b.w	80a0a80 <HAL_USB_USART_Flush_Data>

080a1070 <_ZN9USBSerialD0Ev>:
 80a1070:	b510      	push	{r4, lr}
 80a1072:	4604      	mov	r4, r0
 80a1074:	2114      	movs	r1, #20
 80a1076:	f7ff f810 	bl	80a009a <_ZdlPvj>
 80a107a:	4620      	mov	r0, r4
 80a107c:	bd10      	pop	{r4, pc}

080a107e <__tcf_1>:
 80a107e:	4770      	bx	lr

080a1080 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1080:	b510      	push	{r4, lr}
 80a1082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1086:	4604      	mov	r4, r0
 80a1088:	4608      	mov	r0, r1
 80a108a:	2100      	movs	r1, #0
 80a108c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1090:	4b04      	ldr	r3, [pc, #16]	; (80a10a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1092:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1094:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1096:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1098:	4611      	mov	r1, r2
  _blocking = true;
 80a109a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a109c:	f7ff fcc0 	bl	80a0a20 <HAL_USB_USART_Init>
}
 80a10a0:	4620      	mov	r0, r4
 80a10a2:	bd10      	pop	{r4, pc}
 80a10a4:	080a19f8 	.word	0x080a19f8

080a10a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a10a8:	2200      	movs	r2, #0
 80a10aa:	7c00      	ldrb	r0, [r0, #16]
 80a10ac:	f7ff bcc0 	b.w	80a0a30 <HAL_USB_USART_Begin>

080a10b0 <_Z19acquireSerialBufferv>:
{
 80a10b0:	b510      	push	{r4, lr}
 80a10b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a10b4:	2214      	movs	r2, #20
 80a10b6:	2100      	movs	r1, #0
 80a10b8:	f000 faa4 	bl	80a1604 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a10bc:	4b05      	ldr	r3, [pc, #20]	; (80a10d4 <_Z19acquireSerialBufferv+0x24>)
}
 80a10be:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a10c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a10c2:	4b05      	ldr	r3, [pc, #20]	; (80a10d8 <_Z19acquireSerialBufferv+0x28>)
 80a10c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a10c6:	f240 1301 	movw	r3, #257	; 0x101
 80a10ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a10cc:	2381      	movs	r3, #129	; 0x81
 80a10ce:	8223      	strh	r3, [r4, #16]
}
 80a10d0:	bd10      	pop	{r4, pc}
 80a10d2:	bf00      	nop
 80a10d4:	2000010c 	.word	0x2000010c
 80a10d8:	2000020d 	.word	0x2000020d

080a10dc <_Z16_fetch_usbserialv>:
{
 80a10dc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a10de:	4d0e      	ldr	r5, [pc, #56]	; (80a1118 <_Z16_fetch_usbserialv+0x3c>)
{
 80a10e0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a10e2:	a801      	add	r0, sp, #4
 80a10e4:	f7ff ffe4 	bl	80a10b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a10e8:	7829      	ldrb	r1, [r5, #0]
 80a10ea:	f3bf 8f5b 	dmb	ish
 80a10ee:	f011 0401 	ands.w	r4, r1, #1
 80a10f2:	d10e      	bne.n	80a1112 <_Z16_fetch_usbserialv+0x36>
 80a10f4:	4628      	mov	r0, r5
 80a10f6:	f7fe ffd2 	bl	80a009e <__cxa_guard_acquire>
 80a10fa:	b150      	cbz	r0, 80a1112 <_Z16_fetch_usbserialv+0x36>
 80a10fc:	4621      	mov	r1, r4
 80a10fe:	aa01      	add	r2, sp, #4
 80a1100:	4806      	ldr	r0, [pc, #24]	; (80a111c <_Z16_fetch_usbserialv+0x40>)
 80a1102:	f7ff ffbd 	bl	80a1080 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1106:	4628      	mov	r0, r5
 80a1108:	f7fe ffce 	bl	80a00a8 <__cxa_guard_release>
 80a110c:	4804      	ldr	r0, [pc, #16]	; (80a1120 <_Z16_fetch_usbserialv+0x44>)
 80a110e:	f000 fa65 	bl	80a15dc <atexit>
	return _usbserial;
}
 80a1112:	4802      	ldr	r0, [pc, #8]	; (80a111c <_Z16_fetch_usbserialv+0x40>)
 80a1114:	b007      	add	sp, #28
 80a1116:	bd30      	pop	{r4, r5, pc}
 80a1118:	200000dc 	.word	0x200000dc
 80a111c:	200000e4 	.word	0x200000e4
 80a1120:	080a1009 	.word	0x080a1009

080a1124 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1124:	b510      	push	{r4, lr}
 80a1126:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1128:	2214      	movs	r2, #20
 80a112a:	2100      	movs	r1, #0
 80a112c:	f000 fa6a 	bl	80a1604 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1130:	4b05      	ldr	r3, [pc, #20]	; (80a1148 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1132:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1134:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1136:	4b05      	ldr	r3, [pc, #20]	; (80a114c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1138:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a113a:	f240 1301 	movw	r3, #257	; 0x101
 80a113e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1140:	2381      	movs	r3, #129	; 0x81
 80a1142:	8223      	strh	r3, [r4, #16]
}
 80a1144:	bd10      	pop	{r4, pc}
 80a1146:	bf00      	nop
 80a1148:	2000028e 	.word	0x2000028e
 80a114c:	2000038f 	.word	0x2000038f

080a1150 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1150:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1152:	4c0e      	ldr	r4, [pc, #56]	; (80a118c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1154:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1156:	a801      	add	r0, sp, #4
 80a1158:	f7ff ffe4 	bl	80a1124 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a115c:	7823      	ldrb	r3, [r4, #0]
 80a115e:	f3bf 8f5b 	dmb	ish
 80a1162:	07db      	lsls	r3, r3, #31
 80a1164:	d40e      	bmi.n	80a1184 <_Z17_fetch_usbserial1v+0x34>
 80a1166:	4620      	mov	r0, r4
 80a1168:	f7fe ff99 	bl	80a009e <__cxa_guard_acquire>
 80a116c:	b150      	cbz	r0, 80a1184 <_Z17_fetch_usbserial1v+0x34>
 80a116e:	2101      	movs	r1, #1
 80a1170:	aa01      	add	r2, sp, #4
 80a1172:	4807      	ldr	r0, [pc, #28]	; (80a1190 <_Z17_fetch_usbserial1v+0x40>)
 80a1174:	f7ff ff84 	bl	80a1080 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1178:	4620      	mov	r0, r4
 80a117a:	f7fe ff95 	bl	80a00a8 <__cxa_guard_release>
 80a117e:	4805      	ldr	r0, [pc, #20]	; (80a1194 <_Z17_fetch_usbserial1v+0x44>)
 80a1180:	f000 fa2c 	bl	80a15dc <atexit>
  return _usbserial1;
}
 80a1184:	4802      	ldr	r0, [pc, #8]	; (80a1190 <_Z17_fetch_usbserial1v+0x40>)
 80a1186:	b006      	add	sp, #24
 80a1188:	bd10      	pop	{r4, pc}
 80a118a:	bf00      	nop
 80a118c:	200000e0 	.word	0x200000e0
 80a1190:	200000f8 	.word	0x200000f8
 80a1194:	080a107f 	.word	0x080a107f

080a1198 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1198:	2200      	movs	r2, #0
 80a119a:	6840      	ldr	r0, [r0, #4]
 80a119c:	4611      	mov	r1, r2
 80a119e:	f7ff bccb 	b.w	80a0b38 <network_ready>

080a11a2 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a11a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11a4:	4615      	mov	r5, r2
 80a11a6:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a11a8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a11aa:	460e      	mov	r6, r1
 80a11ac:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a11ae:	2100      	movs	r1, #0
 80a11b0:	a803      	add	r0, sp, #12
 80a11b2:	f000 fa27 	bl	80a1604 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a11b6:	4628      	mov	r0, r5
 80a11b8:	f000 fa98 	bl	80a16ec <strlen>
 80a11bc:	2700      	movs	r7, #0
 80a11be:	b281      	uxth	r1, r0
 80a11c0:	6873      	ldr	r3, [r6, #4]
 80a11c2:	4628      	mov	r0, r5
 80a11c4:	9700      	str	r7, [sp, #0]
 80a11c6:	aa03      	add	r2, sp, #12
 80a11c8:	f7ff fc62 	bl	80a0a90 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a11cc:	b130      	cbz	r0, 80a11dc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a11ce:	4639      	mov	r1, r7
 80a11d0:	4620      	mov	r0, r4
 80a11d2:	f7ff fd9d 	bl	80a0d10 <_ZN9IPAddressC1Em>
    }
 80a11d6:	4620      	mov	r0, r4
 80a11d8:	b009      	add	sp, #36	; 0x24
 80a11da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a11dc:	4620      	mov	r0, r4
 80a11de:	a903      	add	r1, sp, #12
 80a11e0:	f7ff fd84 	bl	80a0cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a11e4:	e7f7      	b.n	80a11d6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a11e6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a11e6:	2200      	movs	r2, #0
 80a11e8:	6840      	ldr	r0, [r0, #4]
 80a11ea:	4611      	mov	r1, r2
 80a11ec:	f7ff bcc4 	b.w	80a0b78 <network_listening>

080a11f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a11f0:	2200      	movs	r2, #0
 80a11f2:	6840      	ldr	r0, [r0, #4]
 80a11f4:	4611      	mov	r1, r2
 80a11f6:	f7ff bccf 	b.w	80a0b98 <network_get_listen_timeout>

080a11fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a11fa:	2200      	movs	r2, #0
 80a11fc:	6840      	ldr	r0, [r0, #4]
 80a11fe:	f7ff bcc3 	b.w	80a0b88 <network_set_listen_timeout>

080a1202 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1202:	2200      	movs	r2, #0
 80a1204:	6840      	ldr	r0, [r0, #4]
 80a1206:	f081 0101 	eor.w	r1, r1, #1
 80a120a:	f7ff bcad 	b.w	80a0b68 <network_listen>

080a120e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a120e:	2300      	movs	r3, #0
 80a1210:	6840      	ldr	r0, [r0, #4]
 80a1212:	461a      	mov	r2, r3
 80a1214:	4619      	mov	r1, r3
 80a1216:	f7ff bc9f 	b.w	80a0b58 <network_off>

080a121a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a121a:	2300      	movs	r3, #0
 80a121c:	6840      	ldr	r0, [r0, #4]
 80a121e:	461a      	mov	r2, r3
 80a1220:	4619      	mov	r1, r3
 80a1222:	f7ff bc91 	b.w	80a0b48 <network_on>

080a1226 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1226:	2200      	movs	r2, #0
 80a1228:	6840      	ldr	r0, [r0, #4]
 80a122a:	4611      	mov	r1, r2
 80a122c:	f7ff bc74 	b.w	80a0b18 <network_connecting>

080a1230 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1230:	2200      	movs	r2, #0
 80a1232:	2102      	movs	r1, #2
 80a1234:	6840      	ldr	r0, [r0, #4]
 80a1236:	f7ff bc77 	b.w	80a0b28 <network_disconnect>

080a123a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a123a:	2300      	movs	r3, #0
 80a123c:	6840      	ldr	r0, [r0, #4]
 80a123e:	461a      	mov	r2, r3
 80a1240:	f7ff bc62 	b.w	80a0b08 <network_connect>

080a1244 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1244:	2204      	movs	r2, #4
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1248:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a124a:	4a02      	ldr	r2, [pc, #8]	; (80a1254 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a124c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a124e:	4770      	bx	lr
 80a1250:	20000410 	.word	0x20000410
 80a1254:	080a1a28 	.word	0x080a1a28

080a1258 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1258:	4b01      	ldr	r3, [pc, #4]	; (80a1260 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a125a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a125c:	4770      	bx	lr
 80a125e:	bf00      	nop
 80a1260:	20000020 	.word	0x20000020

080a1264 <serialEventRun>:
{
 80a1264:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1266:	4b13      	ldr	r3, [pc, #76]	; (80a12b4 <serialEventRun+0x50>)
 80a1268:	b143      	cbz	r3, 80a127c <serialEventRun+0x18>
 80a126a:	f7ff ff37 	bl	80a10dc <_Z16_fetch_usbserialv>
 80a126e:	6803      	ldr	r3, [r0, #0]
 80a1270:	691b      	ldr	r3, [r3, #16]
 80a1272:	4798      	blx	r3
 80a1274:	2800      	cmp	r0, #0
 80a1276:	dd01      	ble.n	80a127c <serialEventRun+0x18>
        serialEvent();
 80a1278:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a127c:	4b0e      	ldr	r3, [pc, #56]	; (80a12b8 <serialEventRun+0x54>)
 80a127e:	b143      	cbz	r3, 80a1292 <serialEventRun+0x2e>
 80a1280:	f000 f986 	bl	80a1590 <_Z22__fetch_global_Serial1v>
 80a1284:	6803      	ldr	r3, [r0, #0]
 80a1286:	691b      	ldr	r3, [r3, #16]
 80a1288:	4798      	blx	r3
 80a128a:	2800      	cmp	r0, #0
 80a128c:	dd01      	ble.n	80a1292 <serialEventRun+0x2e>
        serialEvent1();
 80a128e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1292:	4b0a      	ldr	r3, [pc, #40]	; (80a12bc <serialEventRun+0x58>)
 80a1294:	b10b      	cbz	r3, 80a129a <serialEventRun+0x36>
 80a1296:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a129a:	4b09      	ldr	r3, [pc, #36]	; (80a12c0 <serialEventRun+0x5c>)
 80a129c:	b143      	cbz	r3, 80a12b0 <serialEventRun+0x4c>
 80a129e:	f7ff ff57 	bl	80a1150 <_Z17_fetch_usbserial1v>
 80a12a2:	6803      	ldr	r3, [r0, #0]
 80a12a4:	691b      	ldr	r3, [r3, #16]
 80a12a6:	4798      	blx	r3
 80a12a8:	2800      	cmp	r0, #0
 80a12aa:	dd01      	ble.n	80a12b0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a12ac:	f3af 8000 	nop.w
}
 80a12b0:	bd08      	pop	{r3, pc}
 80a12b2:	bf00      	nop
	...

080a12c4 <_post_loop>:
{
 80a12c4:	b508      	push	{r3, lr}
	serialEventRun();
 80a12c6:	f7ff ffcd 	bl	80a1264 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a12ca:	f7ff faf7 	bl	80a08bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a12ce:	4b01      	ldr	r3, [pc, #4]	; (80a12d4 <_post_loop+0x10>)
 80a12d0:	6018      	str	r0, [r3, #0]
}
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	20000430 	.word	0x20000430

080a12d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a12d8:	4805      	ldr	r0, [pc, #20]	; (80a12f0 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a12da:	4a06      	ldr	r2, [pc, #24]	; (80a12f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a12dc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a12de:	1a12      	subs	r2, r2, r0
 80a12e0:	4905      	ldr	r1, [pc, #20]	; (80a12f8 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a12e2:	f000 f981 	bl	80a15e8 <memcpy>
    __backup_sram_signature = signature;
 80a12e6:	4b05      	ldr	r3, [pc, #20]	; (80a12fc <_Z33system_initialize_user_backup_ramv+0x24>)
 80a12e8:	4a05      	ldr	r2, [pc, #20]	; (80a1300 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a12ea:	601a      	str	r2, [r3, #0]
}
 80a12ec:	bd08      	pop	{r3, pc}
 80a12ee:	bf00      	nop
 80a12f0:	40024000 	.word	0x40024000
 80a12f4:	40024004 	.word	0x40024004
 80a12f8:	080a1af0 	.word	0x080a1af0
 80a12fc:	40024000 	.word	0x40024000
 80a1300:	9a271c1e 	.word	0x9a271c1e

080a1304 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1304:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1306:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1308:	461a      	mov	r2, r3
 80a130a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a130e:	9300      	str	r3, [sp, #0]
 80a1310:	f7ff fbe0 	bl	80a0ad4 <system_ctrl_set_result>
}
 80a1314:	b003      	add	sp, #12
 80a1316:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a131c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a131c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a131e:	8843      	ldrh	r3, [r0, #2]
 80a1320:	2b0a      	cmp	r3, #10
 80a1322:	d008      	beq.n	80a1336 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1324:	2b50      	cmp	r3, #80	; 0x50
 80a1326:	d10b      	bne.n	80a1340 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1328:	4b09      	ldr	r3, [pc, #36]	; (80a1350 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a132a:	681b      	ldr	r3, [r3, #0]
 80a132c:	b14b      	cbz	r3, 80a1342 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a132e:	b003      	add	sp, #12
 80a1330:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1334:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1336:	f7ff ffe5 	bl	80a1304 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a133a:	b003      	add	sp, #12
 80a133c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1340:	2300      	movs	r3, #0
 80a1342:	461a      	mov	r2, r3
 80a1344:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1348:	9300      	str	r3, [sp, #0]
 80a134a:	f7ff fbc3 	bl	80a0ad4 <system_ctrl_set_result>
}
 80a134e:	e7f4      	b.n	80a133a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1350:	2000041c 	.word	0x2000041c

080a1354 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1354:	2100      	movs	r1, #0
{
 80a1356:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1358:	4811      	ldr	r0, [pc, #68]	; (80a13a0 <module_user_init_hook+0x4c>)
 80a135a:	f7ff fc4d 	bl	80a0bf8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a135e:	4b11      	ldr	r3, [pc, #68]	; (80a13a4 <module_user_init_hook+0x50>)
 80a1360:	681a      	ldr	r2, [r3, #0]
 80a1362:	4b11      	ldr	r3, [pc, #68]	; (80a13a8 <module_user_init_hook+0x54>)
 80a1364:	429a      	cmp	r2, r3
 80a1366:	bf0c      	ite	eq
 80a1368:	2201      	moveq	r2, #1
 80a136a:	2200      	movne	r2, #0
 80a136c:	4b0f      	ldr	r3, [pc, #60]	; (80a13ac <module_user_init_hook+0x58>)
 80a136e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1370:	d001      	beq.n	80a1376 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1372:	f7ff ffb1 	bl	80a12d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1376:	f7ff fa99 	bl	80a08ac <HAL_RNG_GetRandomNumber>
 80a137a:	4604      	mov	r4, r0
    srand(seed);
 80a137c:	f000 f94a 	bl	80a1614 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1380:	4b0b      	ldr	r3, [pc, #44]	; (80a13b0 <module_user_init_hook+0x5c>)
 80a1382:	b113      	cbz	r3, 80a138a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1384:	4620      	mov	r0, r4
 80a1386:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a138a:	2100      	movs	r1, #0
 80a138c:	4808      	ldr	r0, [pc, #32]	; (80a13b0 <module_user_init_hook+0x5c>)
 80a138e:	f7ff fbb3 	bl	80a0af8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1396:	2100      	movs	r1, #0
 80a1398:	4806      	ldr	r0, [pc, #24]	; (80a13b4 <module_user_init_hook+0x60>)
 80a139a:	f7ff bb91 	b.w	80a0ac0 <system_ctrl_set_app_request_handler>
 80a139e:	bf00      	nop
 80a13a0:	080a1259 	.word	0x080a1259
 80a13a4:	40024000 	.word	0x40024000
 80a13a8:	9a271c1e 	.word	0x9a271c1e
 80a13ac:	20000418 	.word	0x20000418
 80a13b0:	00000000 	.word	0x00000000
 80a13b4:	080a131d 	.word	0x080a131d

080a13b8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a13b8:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <__tcf_0+0xc>)
 80a13ba:	6898      	ldr	r0, [r3, #8]
 80a13bc:	b108      	cbz	r0, 80a13c2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a13be:	f7ff ba6d 	b.w	80a089c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a13c2:	4770      	bx	lr
 80a13c4:	20000424 	.word	0x20000424

080a13c8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a13c8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a13ca:	b570      	push	{r4, r5, r6, lr}
 80a13cc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a13ce:	d901      	bls.n	80a13d4 <pinAvailable+0xc>
    return false;
 80a13d0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a13d2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a13d4:	f1a0 030d 	sub.w	r3, r0, #13
 80a13d8:	2b02      	cmp	r3, #2
 80a13da:	d90b      	bls.n	80a13f4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a13dc:	2801      	cmp	r0, #1
 80a13de:	d824      	bhi.n	80a142a <pinAvailable+0x62>
 80a13e0:	f000 f888 	bl	80a14f4 <_Z19__fetch_global_Wirev>
 80a13e4:	2100      	movs	r1, #0
 80a13e6:	7c00      	ldrb	r0, [r0, #16]
 80a13e8:	f7ff fab8 	bl	80a095c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a13ec:	f080 0001 	eor.w	r0, r0, #1
 80a13f0:	b2c0      	uxtb	r0, r0
 80a13f2:	e7ee      	b.n	80a13d2 <pinAvailable+0xa>
 80a13f4:	4e12      	ldr	r6, [pc, #72]	; (80a1440 <pinAvailable+0x78>)
 80a13f6:	7831      	ldrb	r1, [r6, #0]
 80a13f8:	f3bf 8f5b 	dmb	ish
 80a13fc:	f011 0501 	ands.w	r5, r1, #1
 80a1400:	d10d      	bne.n	80a141e <pinAvailable+0x56>
 80a1402:	4630      	mov	r0, r6
 80a1404:	f7fe fe4b 	bl	80a009e <__cxa_guard_acquire>
 80a1408:	b148      	cbz	r0, 80a141e <pinAvailable+0x56>
 80a140a:	4629      	mov	r1, r5
 80a140c:	480d      	ldr	r0, [pc, #52]	; (80a1444 <pinAvailable+0x7c>)
 80a140e:	f7ff fd7d 	bl	80a0f0c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1412:	4630      	mov	r0, r6
 80a1414:	f7fe fe48 	bl	80a00a8 <__cxa_guard_release>
 80a1418:	480b      	ldr	r0, [pc, #44]	; (80a1448 <pinAvailable+0x80>)
 80a141a:	f000 f8df 	bl	80a15dc <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a141e:	4b09      	ldr	r3, [pc, #36]	; (80a1444 <pinAvailable+0x7c>)
 80a1420:	7818      	ldrb	r0, [r3, #0]
 80a1422:	f7ff fab5 	bl	80a0990 <hal_spi_is_enabled>
 80a1426:	2800      	cmp	r0, #0
 80a1428:	d1d2      	bne.n	80a13d0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a142a:	3c12      	subs	r4, #18
 80a142c:	2c01      	cmp	r4, #1
 80a142e:	d805      	bhi.n	80a143c <pinAvailable+0x74>
 80a1430:	f000 f8ae 	bl	80a1590 <_Z22__fetch_global_Serial1v>
 80a1434:	7c00      	ldrb	r0, [r0, #16]
 80a1436:	f7ff fadb 	bl	80a09f0 <hal_usart_is_enabled>
 80a143a:	e7d7      	b.n	80a13ec <pinAvailable+0x24>
  return true; // 'pin' is available
 80a143c:	2001      	movs	r0, #1
 80a143e:	e7c8      	b.n	80a13d2 <pinAvailable+0xa>
 80a1440:	20000420 	.word	0x20000420
 80a1444:	20000424 	.word	0x20000424
 80a1448:	080a13b9 	.word	0x080a13b9

080a144c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a144c:	2817      	cmp	r0, #23
{
 80a144e:	b538      	push	{r3, r4, r5, lr}
 80a1450:	4604      	mov	r4, r0
 80a1452:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1454:	d80a      	bhi.n	80a146c <pinMode+0x20>
 80a1456:	29ff      	cmp	r1, #255	; 0xff
 80a1458:	d008      	beq.n	80a146c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a145a:	f7ff ffb5 	bl	80a13c8 <pinAvailable>
 80a145e:	b128      	cbz	r0, 80a146c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1460:	4629      	mov	r1, r5
 80a1462:	4620      	mov	r0, r4
}
 80a1464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1468:	f7ff ba30 	b.w	80a08cc <HAL_Pin_Mode>
}
 80a146c:	bd38      	pop	{r3, r4, r5, pc}

080a146e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a146e:	b538      	push	{r3, r4, r5, lr}
 80a1470:	4604      	mov	r4, r0
 80a1472:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1474:	f7ff fa32 	bl	80a08dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1478:	28ff      	cmp	r0, #255	; 0xff
 80a147a:	d010      	beq.n	80a149e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a147c:	2806      	cmp	r0, #6
 80a147e:	d804      	bhi.n	80a148a <digitalWrite+0x1c>
 80a1480:	234d      	movs	r3, #77	; 0x4d
 80a1482:	fa23 f000 	lsr.w	r0, r3, r0
 80a1486:	07c3      	lsls	r3, r0, #31
 80a1488:	d409      	bmi.n	80a149e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a148a:	4620      	mov	r0, r4
 80a148c:	f7ff ff9c 	bl	80a13c8 <pinAvailable>
 80a1490:	b128      	cbz	r0, 80a149e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1492:	4629      	mov	r1, r5
 80a1494:	4620      	mov	r0, r4
}
 80a1496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a149a:	f7ff ba27 	b.w	80a08ec <HAL_GPIO_Write>
}
 80a149e:	bd38      	pop	{r3, r4, r5, pc}

080a14a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a14a0:	b510      	push	{r4, lr}
 80a14a2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a14a4:	f7ff fa1a 	bl	80a08dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a14a8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a14aa:	b2db      	uxtb	r3, r3
 80a14ac:	2b01      	cmp	r3, #1
 80a14ae:	d908      	bls.n	80a14c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a14b0:	4620      	mov	r0, r4
 80a14b2:	f7ff ff89 	bl	80a13c8 <pinAvailable>
 80a14b6:	b120      	cbz	r0, 80a14c2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a14b8:	4620      	mov	r0, r4
}
 80a14ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a14be:	f7ff ba1d 	b.w	80a08fc <HAL_GPIO_Read>
}
 80a14c2:	2000      	movs	r0, #0
 80a14c4:	bd10      	pop	{r4, pc}

080a14c6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a14c6:	4770      	bx	lr

080a14c8 <_Z17acquireWireBufferv>:
{
 80a14c8:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a14ca:	2314      	movs	r3, #20
 80a14cc:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a14ce:	4e08      	ldr	r6, [pc, #32]	; (80a14f0 <_Z17acquireWireBufferv+0x28>)
{
 80a14d0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a14d2:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a14d4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a14d6:	6085      	str	r5, [r0, #8]
 80a14d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a14da:	4628      	mov	r0, r5
 80a14dc:	f000 f87c 	bl	80a15d8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a14e0:	4631      	mov	r1, r6
	};
 80a14e2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a14e4:	4628      	mov	r0, r5
 80a14e6:	f000 f877 	bl	80a15d8 <_ZnajRKSt9nothrow_t>
	};
 80a14ea:	60e0      	str	r0, [r4, #12]
}
 80a14ec:	4620      	mov	r0, r4
 80a14ee:	bd70      	pop	{r4, r5, r6, pc}
 80a14f0:	080a1a5c 	.word	0x080a1a5c

080a14f4 <_Z19__fetch_global_Wirev>:
{
 80a14f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a14f6:	4d0e      	ldr	r5, [pc, #56]	; (80a1530 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a14f8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a14fa:	7829      	ldrb	r1, [r5, #0]
 80a14fc:	f3bf 8f5b 	dmb	ish
 80a1500:	f011 0401 	ands.w	r4, r1, #1
 80a1504:	d111      	bne.n	80a152a <_Z19__fetch_global_Wirev+0x36>
 80a1506:	4628      	mov	r0, r5
 80a1508:	f7fe fdc9 	bl	80a009e <__cxa_guard_acquire>
 80a150c:	b168      	cbz	r0, 80a152a <_Z19__fetch_global_Wirev+0x36>
 80a150e:	a801      	add	r0, sp, #4
 80a1510:	f7ff ffda 	bl	80a14c8 <_Z17acquireWireBufferv>
 80a1514:	4621      	mov	r1, r4
 80a1516:	aa01      	add	r2, sp, #4
 80a1518:	4806      	ldr	r0, [pc, #24]	; (80a1534 <_Z19__fetch_global_Wirev+0x40>)
 80a151a:	f7ff fba5 	bl	80a0c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a151e:	4628      	mov	r0, r5
 80a1520:	f7fe fdc2 	bl	80a00a8 <__cxa_guard_release>
 80a1524:	4804      	ldr	r0, [pc, #16]	; (80a1538 <_Z19__fetch_global_Wirev+0x44>)
 80a1526:	f000 f859 	bl	80a15dc <atexit>
	return wire;
}
 80a152a:	4802      	ldr	r0, [pc, #8]	; (80a1534 <_Z19__fetch_global_Wirev+0x40>)
 80a152c:	b007      	add	sp, #28
 80a152e:	bd30      	pop	{r4, r5, pc}
 80a1530:	20000434 	.word	0x20000434
 80a1534:	20000438 	.word	0x20000438
 80a1538:	080a14c7 	.word	0x080a14c7

080a153c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a153c:	2300      	movs	r3, #0
 80a153e:	b507      	push	{r0, r1, r2, lr}
 80a1540:	461a      	mov	r2, r3
 80a1542:	4619      	mov	r1, r3
 80a1544:	9300      	str	r3, [sp, #0]
 80a1546:	4803      	ldr	r0, [pc, #12]	; (80a1554 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1548:	f7ff fbf8 	bl	80a0d3c <_ZN9IPAddressC1Ehhhh>
 80a154c:	b003      	add	sp, #12
 80a154e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1552:	bf00      	nop
 80a1554:	2000044c 	.word	0x2000044c

080a1558 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1558:	4770      	bx	lr
	...

080a155c <_Z20acquireSerial1Bufferv>:
{
 80a155c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a155e:	2514      	movs	r5, #20
{
 80a1560:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1562:	462a      	mov	r2, r5
 80a1564:	2100      	movs	r1, #0
 80a1566:	f000 f84d 	bl	80a1604 <memset>
 80a156a:	8025      	strh	r5, [r4, #0]
 80a156c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a156e:	4e07      	ldr	r6, [pc, #28]	; (80a158c <_Z20acquireSerial1Bufferv+0x30>)
 80a1570:	4628      	mov	r0, r5
 80a1572:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1574:	8125      	strh	r5, [r4, #8]
 80a1576:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1578:	f000 f82e 	bl	80a15d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a157c:	4631      	mov	r1, r6
    };
 80a157e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1580:	4628      	mov	r0, r5
 80a1582:	f000 f829 	bl	80a15d8 <_ZnajRKSt9nothrow_t>
    };
 80a1586:	60e0      	str	r0, [r4, #12]
}
 80a1588:	4620      	mov	r0, r4
 80a158a:	bd70      	pop	{r4, r5, r6, pc}
 80a158c:	080a1a5c 	.word	0x080a1a5c

080a1590 <_Z22__fetch_global_Serial1v>:
{
 80a1590:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1592:	4d0e      	ldr	r5, [pc, #56]	; (80a15cc <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1594:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1596:	7829      	ldrb	r1, [r5, #0]
 80a1598:	f3bf 8f5b 	dmb	ish
 80a159c:	f011 0401 	ands.w	r4, r1, #1
 80a15a0:	d111      	bne.n	80a15c6 <_Z22__fetch_global_Serial1v+0x36>
 80a15a2:	4628      	mov	r0, r5
 80a15a4:	f7fe fd7b 	bl	80a009e <__cxa_guard_acquire>
 80a15a8:	b168      	cbz	r0, 80a15c6 <_Z22__fetch_global_Serial1v+0x36>
 80a15aa:	a801      	add	r0, sp, #4
 80a15ac:	f7ff ffd6 	bl	80a155c <_Z20acquireSerial1Bufferv>
 80a15b0:	4621      	mov	r1, r4
 80a15b2:	aa01      	add	r2, sp, #4
 80a15b4:	4806      	ldr	r0, [pc, #24]	; (80a15d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a15b6:	f7ff fd11 	bl	80a0fdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a15ba:	4628      	mov	r0, r5
 80a15bc:	f7fe fd74 	bl	80a00a8 <__cxa_guard_release>
 80a15c0:	4804      	ldr	r0, [pc, #16]	; (80a15d4 <_Z22__fetch_global_Serial1v+0x44>)
 80a15c2:	f000 f80b 	bl	80a15dc <atexit>
    return serial1;
}
 80a15c6:	4802      	ldr	r0, [pc, #8]	; (80a15d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a15c8:	b007      	add	sp, #28
 80a15ca:	bd30      	pop	{r4, r5, pc}
 80a15cc:	20000464 	.word	0x20000464
 80a15d0:	20000468 	.word	0x20000468
 80a15d4:	080a1559 	.word	0x080a1559

080a15d8 <_ZnajRKSt9nothrow_t>:
 80a15d8:	f7fe bd5d 	b.w	80a0096 <_Znaj>

080a15dc <atexit>:
 80a15dc:	2300      	movs	r3, #0
 80a15de:	4601      	mov	r1, r0
 80a15e0:	461a      	mov	r2, r3
 80a15e2:	4618      	mov	r0, r3
 80a15e4:	f000 b88a 	b.w	80a16fc <__register_exitproc>

080a15e8 <memcpy>:
 80a15e8:	440a      	add	r2, r1
 80a15ea:	4291      	cmp	r1, r2
 80a15ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a15f0:	d100      	bne.n	80a15f4 <memcpy+0xc>
 80a15f2:	4770      	bx	lr
 80a15f4:	b510      	push	{r4, lr}
 80a15f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a15fa:	4291      	cmp	r1, r2
 80a15fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1600:	d1f9      	bne.n	80a15f6 <memcpy+0xe>
 80a1602:	bd10      	pop	{r4, pc}

080a1604 <memset>:
 80a1604:	4603      	mov	r3, r0
 80a1606:	4402      	add	r2, r0
 80a1608:	4293      	cmp	r3, r2
 80a160a:	d100      	bne.n	80a160e <memset+0xa>
 80a160c:	4770      	bx	lr
 80a160e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1612:	e7f9      	b.n	80a1608 <memset+0x4>

080a1614 <srand>:
 80a1614:	b538      	push	{r3, r4, r5, lr}
 80a1616:	4b10      	ldr	r3, [pc, #64]	; (80a1658 <srand+0x44>)
 80a1618:	4604      	mov	r4, r0
 80a161a:	681d      	ldr	r5, [r3, #0]
 80a161c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a161e:	b9b3      	cbnz	r3, 80a164e <srand+0x3a>
 80a1620:	2018      	movs	r0, #24
 80a1622:	f7ff fad1 	bl	80a0bc8 <malloc>
 80a1626:	4602      	mov	r2, r0
 80a1628:	63a8      	str	r0, [r5, #56]	; 0x38
 80a162a:	b920      	cbnz	r0, 80a1636 <srand+0x22>
 80a162c:	2142      	movs	r1, #66	; 0x42
 80a162e:	4b0b      	ldr	r3, [pc, #44]	; (80a165c <srand+0x48>)
 80a1630:	480b      	ldr	r0, [pc, #44]	; (80a1660 <srand+0x4c>)
 80a1632:	f7ff fad9 	bl	80a0be8 <__assert_func>
 80a1636:	490b      	ldr	r1, [pc, #44]	; (80a1664 <srand+0x50>)
 80a1638:	4b0b      	ldr	r3, [pc, #44]	; (80a1668 <srand+0x54>)
 80a163a:	e9c0 1300 	strd	r1, r3, [r0]
 80a163e:	4b0b      	ldr	r3, [pc, #44]	; (80a166c <srand+0x58>)
 80a1640:	2100      	movs	r1, #0
 80a1642:	6083      	str	r3, [r0, #8]
 80a1644:	230b      	movs	r3, #11
 80a1646:	8183      	strh	r3, [r0, #12]
 80a1648:	2001      	movs	r0, #1
 80a164a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a164e:	2200      	movs	r2, #0
 80a1650:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1652:	611c      	str	r4, [r3, #16]
 80a1654:	615a      	str	r2, [r3, #20]
 80a1656:	bd38      	pop	{r3, r4, r5, pc}
 80a1658:	20000020 	.word	0x20000020
 80a165c:	080a1a5d 	.word	0x080a1a5d
 80a1660:	080a1a74 	.word	0x080a1a74
 80a1664:	abcd330e 	.word	0xabcd330e
 80a1668:	e66d1234 	.word	0xe66d1234
 80a166c:	0005deec 	.word	0x0005deec

080a1670 <rand>:
 80a1670:	4b16      	ldr	r3, [pc, #88]	; (80a16cc <rand+0x5c>)
 80a1672:	b510      	push	{r4, lr}
 80a1674:	681c      	ldr	r4, [r3, #0]
 80a1676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1678:	b9b3      	cbnz	r3, 80a16a8 <rand+0x38>
 80a167a:	2018      	movs	r0, #24
 80a167c:	f7ff faa4 	bl	80a0bc8 <malloc>
 80a1680:	4602      	mov	r2, r0
 80a1682:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1684:	b920      	cbnz	r0, 80a1690 <rand+0x20>
 80a1686:	214e      	movs	r1, #78	; 0x4e
 80a1688:	4b11      	ldr	r3, [pc, #68]	; (80a16d0 <rand+0x60>)
 80a168a:	4812      	ldr	r0, [pc, #72]	; (80a16d4 <rand+0x64>)
 80a168c:	f7ff faac 	bl	80a0be8 <__assert_func>
 80a1690:	4911      	ldr	r1, [pc, #68]	; (80a16d8 <rand+0x68>)
 80a1692:	4b12      	ldr	r3, [pc, #72]	; (80a16dc <rand+0x6c>)
 80a1694:	e9c0 1300 	strd	r1, r3, [r0]
 80a1698:	4b11      	ldr	r3, [pc, #68]	; (80a16e0 <rand+0x70>)
 80a169a:	2100      	movs	r1, #0
 80a169c:	6083      	str	r3, [r0, #8]
 80a169e:	230b      	movs	r3, #11
 80a16a0:	8183      	strh	r3, [r0, #12]
 80a16a2:	2001      	movs	r0, #1
 80a16a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a16a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a16aa:	4a0e      	ldr	r2, [pc, #56]	; (80a16e4 <rand+0x74>)
 80a16ac:	6920      	ldr	r0, [r4, #16]
 80a16ae:	6963      	ldr	r3, [r4, #20]
 80a16b0:	4342      	muls	r2, r0
 80a16b2:	490d      	ldr	r1, [pc, #52]	; (80a16e8 <rand+0x78>)
 80a16b4:	fb01 2203 	mla	r2, r1, r3, r2
 80a16b8:	fba0 0101 	umull	r0, r1, r0, r1
 80a16bc:	1c43      	adds	r3, r0, #1
 80a16be:	eb42 0001 	adc.w	r0, r2, r1
 80a16c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80a16c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a16ca:	bd10      	pop	{r4, pc}
 80a16cc:	20000020 	.word	0x20000020
 80a16d0:	080a1a5d 	.word	0x080a1a5d
 80a16d4:	080a1a74 	.word	0x080a1a74
 80a16d8:	abcd330e 	.word	0xabcd330e
 80a16dc:	e66d1234 	.word	0xe66d1234
 80a16e0:	0005deec 	.word	0x0005deec
 80a16e4:	5851f42d 	.word	0x5851f42d
 80a16e8:	4c957f2d 	.word	0x4c957f2d

080a16ec <strlen>:
 80a16ec:	4603      	mov	r3, r0
 80a16ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a16f2:	2a00      	cmp	r2, #0
 80a16f4:	d1fb      	bne.n	80a16ee <strlen+0x2>
 80a16f6:	1a18      	subs	r0, r3, r0
 80a16f8:	3801      	subs	r0, #1
 80a16fa:	4770      	bx	lr

080a16fc <__register_exitproc>:
 80a16fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1700:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a17b0 <__register_exitproc+0xb4>
 80a1704:	4606      	mov	r6, r0
 80a1706:	f8d8 0000 	ldr.w	r0, [r8]
 80a170a:	461f      	mov	r7, r3
 80a170c:	460d      	mov	r5, r1
 80a170e:	4691      	mov	r9, r2
 80a1710:	f000 f858 	bl	80a17c4 <__retarget_lock_acquire_recursive>
 80a1714:	4b27      	ldr	r3, [pc, #156]	; (80a17b4 <__register_exitproc+0xb8>)
 80a1716:	681c      	ldr	r4, [r3, #0]
 80a1718:	b934      	cbnz	r4, 80a1728 <__register_exitproc+0x2c>
 80a171a:	4c27      	ldr	r4, [pc, #156]	; (80a17b8 <__register_exitproc+0xbc>)
 80a171c:	601c      	str	r4, [r3, #0]
 80a171e:	4b27      	ldr	r3, [pc, #156]	; (80a17bc <__register_exitproc+0xc0>)
 80a1720:	b113      	cbz	r3, 80a1728 <__register_exitproc+0x2c>
 80a1722:	681b      	ldr	r3, [r3, #0]
 80a1724:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1728:	6863      	ldr	r3, [r4, #4]
 80a172a:	2b1f      	cmp	r3, #31
 80a172c:	dd07      	ble.n	80a173e <__register_exitproc+0x42>
 80a172e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1732:	f000 f849 	bl	80a17c8 <__retarget_lock_release_recursive>
 80a1736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a173a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a173e:	b35e      	cbz	r6, 80a1798 <__register_exitproc+0x9c>
 80a1740:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1744:	b988      	cbnz	r0, 80a176a <__register_exitproc+0x6e>
 80a1746:	4b1e      	ldr	r3, [pc, #120]	; (80a17c0 <__register_exitproc+0xc4>)
 80a1748:	b923      	cbnz	r3, 80a1754 <__register_exitproc+0x58>
 80a174a:	f8d8 0000 	ldr.w	r0, [r8]
 80a174e:	f000 f83a 	bl	80a17c6 <__retarget_lock_release>
 80a1752:	e7f0      	b.n	80a1736 <__register_exitproc+0x3a>
 80a1754:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1758:	f7ff fa36 	bl	80a0bc8 <malloc>
 80a175c:	2800      	cmp	r0, #0
 80a175e:	d0f4      	beq.n	80a174a <__register_exitproc+0x4e>
 80a1760:	2300      	movs	r3, #0
 80a1762:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1766:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a176a:	2201      	movs	r2, #1
 80a176c:	6863      	ldr	r3, [r4, #4]
 80a176e:	2e02      	cmp	r6, #2
 80a1770:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1774:	fa02 f203 	lsl.w	r2, r2, r3
 80a1778:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a177c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1780:	ea43 0302 	orr.w	r3, r3, r2
 80a1784:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1788:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a178c:	bf02      	ittt	eq
 80a178e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1792:	4313      	orreq	r3, r2
 80a1794:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a1798:	6863      	ldr	r3, [r4, #4]
 80a179a:	f8d8 0000 	ldr.w	r0, [r8]
 80a179e:	1c5a      	adds	r2, r3, #1
 80a17a0:	3302      	adds	r3, #2
 80a17a2:	6062      	str	r2, [r4, #4]
 80a17a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a17a8:	f000 f80e 	bl	80a17c8 <__retarget_lock_release_recursive>
 80a17ac:	2000      	movs	r0, #0
 80a17ae:	e7c4      	b.n	80a173a <__register_exitproc+0x3e>
 80a17b0:	20000084 	.word	0x20000084
 80a17b4:	20000508 	.word	0x20000508
 80a17b8:	2000047c 	.word	0x2000047c
 80a17bc:	00000000 	.word	0x00000000
 80a17c0:	080a0bc9 	.word	0x080a0bc9

080a17c4 <__retarget_lock_acquire_recursive>:
 80a17c4:	4770      	bx	lr

080a17c6 <__retarget_lock_release>:
 80a17c6:	4770      	bx	lr

080a17c8 <__retarget_lock_release_recursive>:
 80a17c8:	4770      	bx	lr

080a17ca <link_code_end>:
	...

080a17cc <dynalib_user>:
 80a17cc:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a17dc:	0000 0000 6e69 5674 6c61 4200 756c 2065     ....intVal.Blue 
 80a17ec:	7562 7474 6e6f 7020 6572 7373 6420 7465     button press det
 80a17fc:	6365 6574 2e64 5320 6174 7472 7420 6568     ected. Start the
 80a180c:	6720 6d61 2165 5000 696f 746e 2073 203d      game!.Points = 
 80a181c:	4800 6c6f 2064 6874 2065 7267 6565 206e     .Hold the green 
 80a182c:	7562 7474 6e6f 002e 4e20 206f 6f70 6e69     button.. No poin
 80a183c:	7374 6120 6177 6472 6465 2000 6e4f 2065     ts awarded. One 
 80a184c:	6f70 6e69 2074 7761 7261 6564 0064 6953     point awarded.Si
 80a185c:	6f6d 206e 6173 7379 6820 6c6f 2064 6874     mon says hold th
 80a186c:	2065 7267 6565 206e 7562 7474 6e6f 002e     e green button..
 80a187c:	3120 7020 696f 746e 6120 6177 6472 6465      1 point awarded
 80a188c:	5300 6d69 6e6f 7320 7961 2073 6f68 646c     .Simon says hold
 80a189c:	7420 6568 7920 6c65 6f6c 2077 7562 7474      the yellow butt
 80a18ac:	6e6f 002e 7250 7365 2073 6874 2065 6572     on..Press the re
 80a18bc:	2064 7562 7474 6e6f 5300 6d69 6e6f 7320     d button.Simon s
 80a18cc:	7961 2073 6f68 646c 7420 6568 7220 6465     ays hold the red
 80a18dc:	6220 7475 6f74 006e 6f53 656d 6874 6e69      button.Somethin
 80a18ec:	2067 6577 746e 7720 6f72 676e 4200 756c     g went wrong.Blu
 80a18fc:	2065 7562 7474 6e6f 7020 6572 7373 6420     e button press d
 80a190c:	7465 6365 6574 2e64 4520 746e 7265 6920     etected. Enter i
 80a191c:	6c64 2065 6f6d 6564 0000 0000               dle mode....

080a1928 <_ZTV7TwoWire>:
	...
 80a1930:	0c0f 080a 0c59 080a 0c31 080a 0c11 080a     ....Y...1.......
 80a1940:	0c39 080a 0c41 080a 0c49 080a 0c51 080a     9...A...I...Q...

080a1950 <_ZTV9IPAddress>:
	...
 80a1958:	0c8f 080a 0c8d 080a 0cc1 080a 7061 0070     ............app.

080a1968 <_ZTVN5spark12NetworkClassE>:
	...
 80a1970:	0d65 080a 0d6f 080a 0d79 080a 0d83 080a     e...o...y.......
 80a1980:	0d8d 080a 0d99 080a 0da5 080a 0dad 080a     ................
 80a1990:	0db5 080a 0dc1 080a 0dc9 080a 0dd3 080a     ................
 80a19a0:	0ddd 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a19b0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a19c0 <_ZTV11USARTSerial>:
	...
 80a19c8:	0f65 080a 0fcd 080a 0fa9 080a 0e41 080a     e...........A...
 80a19d8:	0f79 080a 0f95 080a 0f87 080a 0fa3 080a     y...............
 80a19e8:	0f67 080a 0f6b 080a                         g...k...

080a19f0 <_ZTV9USBSerial>:
	...
 80a19f8:	100b 080a 1071 080a 1049 080a 0e41 080a     ....q...I...A...
 80a1a08:	103b 080a 100d 080a 101d 080a 106b 080a     ;...........k...
 80a1a18:	102d 080a 1005 080a                         -.......

080a1a20 <_ZTVN5spark9WiFiClassE>:
	...
 80a1a28:	123b 080a 1231 080a 1227 080a 1199 080a     ;...1...'.......
 80a1a38:	121b 080a 120f 080a 0da5 080a 0dad 080a     ................
 80a1a48:	1203 080a 11fb 080a 11f1 080a 11e7 080a     ................
 80a1a58:	11a3 080a                                   ....

080a1a5c <_ZSt7nothrow>:
 80a1a5c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a1a6c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 80a1a7c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80a1a8c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80a1a9c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 80a1aac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80a1abc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

080a1acd <link_const_variable_data_end>:
 80a1acd:	00          	.byte	0x00
	...

080a1ad0 <link_constructors_location>:
 80a1ad0:	080a0d55 	.word	0x080a0d55
 80a1ad4:	080a0e2d 	.word	0x080a0e2d
 80a1ad8:	080a0f01 	.word	0x080a0f01
 80a1adc:	080a0f2d 	.word	0x080a0f2d
 80a1ae0:	080a0f51 	.word	0x080a0f51
 80a1ae4:	080a1245 	.word	0x080a1245
 80a1ae8:	080a153d 	.word	0x080a153d

080a1aec <link_constructors_end>:
 80a1aec:	00000000 	.word	0x00000000
